{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Web 101: Intro to the Web Objective Statement Students who have completed this course will be able to navigate and understand the DOM, use HTML elements and their attributes to style them using CSS rules, and handle DOM events with JavaScript functions. By the end of the course, students will have built multiple static web pages and practiced the skills to build a functional static web page. These skills will transfer directly to the students\u2019 graduation app, completed in their 400 level course. In the students\u2019 200 level course, they will learn to program small applications before learning to structure data and serve it over the internet in their 300 level course. Class Structure and Expectations This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements. To Pass This Class (and all others) To pass Web 101 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Pitch to the class your idea of an app to build for your Capstone Project. Path to Success Students are expected to spend their weekends preparing for the next week of class by watching videos, reading tutorials, and working through examples. Additionally, there is a \"Career Readiness\" reading, video, or activity each week. Thus each week you will learn important skills that will help you secure employment upon completion of the course. Failure to complete the work outside of class will lead to failure in the class. Our philosophy is \"learn by doing\". We engage our students in the problem solving process as opposed to relying heavily on lectures. Our instructors, who are real developers, facilitate learning through guiding your progress as you work through projects in class. In these short eight weeks we have with you, we cannot possibly teach you everything there is to know about web development. You will not even learn it all in a career of web development. But we can hope to teach you to become an active learner, an engaged participant, an avid problem solver, and an enthusiastic entrepreneur in your learning journey which will soon become your career. We will lay out for you content that, if read, watched, practiced, and absorbed, will give you a strong foundation in learning every other skill needed to be a successful developer. We will give you challenges that if you face now will give you the know-how, the confidence and skills to tackle any challenge in the workplace. To be successful in this course, you must spend 10-15 hours outside of class completing every \"Pre-Homework\" assignment before class and continue to reference the assignment during and after class. Our class structure follows the flipped classroom model where students learn on their own and bring their questions to class. Class begins by reviewing the \"Questions for Discussion\" of the \"Pre-Homework\", and the majority of class time is spent working on projects. Much of learning to code means understanding what is possible. You are not expected to memorize anything. The important thing is that you are able to ask the right questions to find answers and solve problems. Remember to use this book and every resource you come across, including your classmates, as you progress as a developer here and after school. How To Use This Textbook Video For more information see Additional Resources","title":"Home"},{"location":"#welcome-to-web-101-intro-to-the-web","text":"","title":"Welcome to Web 101: Intro to the Web"},{"location":"#objective-statement","text":"Students who have completed this course will be able to navigate and understand the DOM, use HTML elements and their attributes to style them using CSS rules, and handle DOM events with JavaScript functions. By the end of the course, students will have built multiple static web pages and practiced the skills to build a functional static web page. These skills will transfer directly to the students\u2019 graduation app, completed in their 400 level course. In the students\u2019 200 level course, they will learn to program small applications before learning to structure data and serve it over the internet in their 300 level course.","title":"Objective Statement"},{"location":"#class-structure-and-expectations","text":"This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements.","title":"Class Structure and Expectations"},{"location":"#to-pass-this-class-and-all-others","text":"To pass Web 101 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Pitch to the class your idea of an app to build for your Capstone Project.","title":"To Pass This Class (and all others)"},{"location":"#path-to-success","text":"Students are expected to spend their weekends preparing for the next week of class by watching videos, reading tutorials, and working through examples. Additionally, there is a \"Career Readiness\" reading, video, or activity each week. Thus each week you will learn important skills that will help you secure employment upon completion of the course. Failure to complete the work outside of class will lead to failure in the class. Our philosophy is \"learn by doing\". We engage our students in the problem solving process as opposed to relying heavily on lectures. Our instructors, who are real developers, facilitate learning through guiding your progress as you work through projects in class. In these short eight weeks we have with you, we cannot possibly teach you everything there is to know about web development. You will not even learn it all in a career of web development. But we can hope to teach you to become an active learner, an engaged participant, an avid problem solver, and an enthusiastic entrepreneur in your learning journey which will soon become your career. We will lay out for you content that, if read, watched, practiced, and absorbed, will give you a strong foundation in learning every other skill needed to be a successful developer. We will give you challenges that if you face now will give you the know-how, the confidence and skills to tackle any challenge in the workplace. To be successful in this course, you must spend 10-15 hours outside of class completing every \"Pre-Homework\" assignment before class and continue to reference the assignment during and after class. Our class structure follows the flipped classroom model where students learn on their own and bring their questions to class. Class begins by reviewing the \"Questions for Discussion\" of the \"Pre-Homework\", and the majority of class time is spent working on projects. Much of learning to code means understanding what is possible. You are not expected to memorize anything. The important thing is that you are able to ask the right questions to find answers and solve problems. Remember to use this book and every resource you come across, including your classmates, as you progress as a developer here and after school.","title":"Path to Success"},{"location":"#how-to-use-this-textbook-video","text":"For more information see Additional Resources","title":"How To Use This Textbook Video"},{"location":"additionalResources/blogPrompts/","text":"Blog Prompts Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story. Class 2 - Prompt 101 [ ] Class 4 - Prompt 102 [ ] Class 6 - Prompt 103 [ ] Class 8 - Prompt 104 [ ] Class 10 - Prompt 105 [ ] Class 12 - Prompt 106 [ ] Class 14 - Prompt 107 [ ] Class 16 - Prompt 108 [ ]","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#blog-prompts","text":"Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story.","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#class-2-prompt-101","text":"[ ]","title":"Class 2 - Prompt 101"},{"location":"additionalResources/blogPrompts/#class-4-prompt-102","text":"[ ]","title":"Class 4 - Prompt 102"},{"location":"additionalResources/blogPrompts/#class-6-prompt-103","text":"[ ]","title":"Class 6 - Prompt 103"},{"location":"additionalResources/blogPrompts/#class-8-prompt-104","text":"[ ]","title":"Class 8 - Prompt 104"},{"location":"additionalResources/blogPrompts/#class-10-prompt-105","text":"[ ]","title":"Class 10 - Prompt 105"},{"location":"additionalResources/blogPrompts/#class-12-prompt-106","text":"[ ]","title":"Class 12 - Prompt 106"},{"location":"additionalResources/blogPrompts/#class-14-prompt-107","text":"[ ]","title":"Class 14 - Prompt 107"},{"location":"additionalResources/blogPrompts/#class-16-prompt-108","text":"[ ]","title":"Class 16 - Prompt 108"},{"location":"additionalResources/developSeries/","text":"Develop Series Class 1 - Growth Mindset vs Fixed Mindset","title":"Develop Series Collection"},{"location":"additionalResources/developSeries/#develop-series","text":"Class 1 - Growth Mindset vs Fixed Mindset","title":"Develop Series"},{"location":"additionalResources/gitCommands/","text":"Git & CLI Commands Useful Git Commands git init >> initialize a local folder as a git repo to be tracked and push to the cloud git branch feature-1-berger >> Create the branch on your local machine called \"feature-1-berger\". git checkout -b feature-1-berger >> Create the branch on your local machine and switch into this branch. git checkout feature-1-berger >> Switch into this branch. git branch >> return the current branch you are working in. git status >> Check the status of tracked/untracked changed files git add fileName.js >> Add the file \"fileName.js\" to be tracked for the next commit. git add -A >> Add all changed files to be tracked. git commit -m \"message\" >> Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name >> Push the commit to the branch \"branch_name\" git pull >> Pulls down changes from the repo to bring your local codebase up-to-date git push \u2014set-upstream origin resume >> set the initial push to know where all future pushes need to go in the gitHub cloud. cd => // change directories cd workspace => // will change to a new folder/directory called workspace ls => // list out the files in that directory List CLI Commands mkdir jsDev >> will make a folder(aka, directory) called \"jsDev\" cd >> change directories cd workspace >> will change to a new folder(aka, directory) called \"workspace\" pwd >> Print Working Directory, will return the name of the current directory you are in. ls >> list out the files in that directory code . >> open the current directory in VS Code (Macs have to install the PATH) touch index.html >> will create a file inside the current directory called \"index.html\" echo \"USERNAME=meathead\" >> .env >> create a file called .env and writes \"USERNAME=meathead\" inside of it. Other useful commands to research mv >> move directory cp >> copy file rm >> remove file or directory tree >> Must install with brew or bash, but is a very useful command to see your entire working directory's tree.","title":"Git & CLI Commands"},{"location":"additionalResources/gitCommands/#git-cli-commands","text":"","title":"Git &amp; CLI Commands"},{"location":"additionalResources/gitCommands/#useful-git-commands","text":"git init >> initialize a local folder as a git repo to be tracked and push to the cloud git branch feature-1-berger >> Create the branch on your local machine called \"feature-1-berger\". git checkout -b feature-1-berger >> Create the branch on your local machine and switch into this branch. git checkout feature-1-berger >> Switch into this branch. git branch >> return the current branch you are working in. git status >> Check the status of tracked/untracked changed files git add fileName.js >> Add the file \"fileName.js\" to be tracked for the next commit. git add -A >> Add all changed files to be tracked. git commit -m \"message\" >> Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name >> Push the commit to the branch \"branch_name\" git pull >> Pulls down changes from the repo to bring your local codebase up-to-date git push \u2014set-upstream origin resume >> set the initial push to know where all future pushes need to go in the gitHub cloud. cd => // change directories cd workspace => // will change to a new folder/directory called workspace ls => // list out the files in that directory","title":"Useful Git Commands"},{"location":"additionalResources/gitCommands/#list-cli-commands","text":"mkdir jsDev >> will make a folder(aka, directory) called \"jsDev\" cd >> change directories cd workspace >> will change to a new folder(aka, directory) called \"workspace\" pwd >> Print Working Directory, will return the name of the current directory you are in. ls >> list out the files in that directory code . >> open the current directory in VS Code (Macs have to install the PATH) touch index.html >> will create a file inside the current directory called \"index.html\" echo \"USERNAME=meathead\" >> .env >> create a file called .env and writes \"USERNAME=meathead\" inside of it.","title":"List CLI Commands"},{"location":"additionalResources/gitCommands/#other-useful-commands-to-research","text":"mv >> move directory cp >> copy file rm >> remove file or directory tree >> Must install with brew or bash, but is a very useful command to see your entire working directory's tree.","title":"Other useful commands to research"},{"location":"additionalResources/graduationPrerequisites/","text":"Graduation Prerequisites A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/graduationPrerequisites/#graduation-prerequisites","text":"A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/interviewChallenges/","text":"Interview Challenges Why Train for Interviews? Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor): How to Solve Your Challenge Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home. The Prompts Class 1 Prompt 1: Title - description Class 2 Prompt 1: Title - description Class 3 Prompt 1: Title - description Class 4 Prompt 1: Title - description Class 5 Prompt 1: Title - description Class 6 Prompt 1: Title - description Class 7 Prompt 1: Title - description Class 8 Prompt 1: Title - description Class 9 Prompt 1: Title - description Class 10 Prompt 1: Title - description Class 11 Prompt 1: Title - description Class 12 Prompt 1: Title - description Class 13 Prompt 1: Title - description Class 14 Prompt 1: Title - description Class 15 Prompt 1: Title - description Class 16 Prompt 1: Title - description","title":"Interview Training"},{"location":"additionalResources/interviewChallenges/#interview-challenges","text":"","title":"Interview Challenges"},{"location":"additionalResources/interviewChallenges/#why-train-for-interviews","text":"Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor):","title":"Why Train for Interviews?"},{"location":"additionalResources/interviewChallenges/#how-to-solve-your-challenge","text":"Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home.","title":"How to Solve Your Challenge"},{"location":"additionalResources/interviewChallenges/#the-prompts","text":"","title":"The Prompts"},{"location":"additionalResources/interviewChallenges/#class-1","text":"Prompt 1: Title - description","title":"Class 1"},{"location":"additionalResources/interviewChallenges/#class-2","text":"Prompt 1: Title - description","title":"Class 2"},{"location":"additionalResources/interviewChallenges/#class-3","text":"Prompt 1: Title - description","title":"Class 3"},{"location":"additionalResources/interviewChallenges/#class-4","text":"Prompt 1: Title - description","title":"Class 4"},{"location":"additionalResources/interviewChallenges/#class-5","text":"Prompt 1: Title - description","title":"Class 5"},{"location":"additionalResources/interviewChallenges/#class-6","text":"Prompt 1: Title - description","title":"Class 6"},{"location":"additionalResources/interviewChallenges/#class-7","text":"Prompt 1: Title - description","title":"Class 7"},{"location":"additionalResources/interviewChallenges/#class-8","text":"Prompt 1: Title - description","title":"Class 8"},{"location":"additionalResources/interviewChallenges/#class-9","text":"Prompt 1: Title - description","title":"Class 9"},{"location":"additionalResources/interviewChallenges/#class-10","text":"Prompt 1: Title - description","title":"Class 10"},{"location":"additionalResources/interviewChallenges/#class-11","text":"Prompt 1: Title - description","title":"Class 11"},{"location":"additionalResources/interviewChallenges/#class-12","text":"Prompt 1: Title - description","title":"Class 12"},{"location":"additionalResources/interviewChallenges/#class-13","text":"Prompt 1: Title - description","title":"Class 13"},{"location":"additionalResources/interviewChallenges/#class-14","text":"Prompt 1: Title - description","title":"Class 14"},{"location":"additionalResources/interviewChallenges/#class-15","text":"Prompt 1: Title - description","title":"Class 15"},{"location":"additionalResources/interviewChallenges/#class-16","text":"Prompt 1: Title - description","title":"Class 16"},{"location":"additionalResources/keyboardShortcuts/","text":"Keyboard Shortcuts Short-cuts macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#keyboard-shortcuts","text":"","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#short-cuts","text":"macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Short-cuts"},{"location":"additionalResources/presentationsQualifications/","text":"Presentations Qualifications To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director. Capstone Project Presentation Guidelines The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Presentations Qualifications"},{"location":"additionalResources/presentationsQualifications/#presentations-qualifications","text":"To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director.","title":"Presentations Qualifications"},{"location":"additionalResources/presentationsQualifications/#capstone-project-presentation-guidelines","text":"The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Capstone Project Presentation Guidelines"},{"location":"additionalResources/studentPresentations/","text":"Daily Student Presentations Class 5 - Organize and Coordinate who and when students are presenting. Class 6 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 7 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 8 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 9 - todo todo Class 10 - todo todo Class 11 - todo todo Class 12 - todo todo Class 13 - todo todo Class 14 - todo todo Class 15 - todo todo Class 16 - todo todo Class 17 - todo todo Class 18 - todo todo Class 19 - todo todo Class 20 - todo todo","title":"Student Presentations"},{"location":"additionalResources/studentPresentations/#daily-student-presentations","text":"Class 5 - Organize and Coordinate who and when students are presenting. Class 6 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 7 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 8 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 9 - todo todo Class 10 - todo todo Class 11 - todo todo Class 12 - todo todo Class 13 - todo todo Class 14 - todo todo Class 15 - todo todo Class 16 - todo todo Class 17 - todo todo Class 18 - todo todo Class 19 - todo todo Class 20 - todo todo","title":"Daily Student Presentations"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/","text":"Class One: Questions for Discussion Supported by browsers Points view-height view-width Child element Parent element CSS properties CSS values Box model Block element CSS class selector Shorthand code CSS length units (as values)","title":"Day 1 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/#class-one-questions-for-discussion","text":"Supported by browsers Points view-height view-width Child element Parent element CSS properties CSS values Box model Block element CSS class selector Shorthand code CSS length units (as values)","title":"Class One: Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/","text":"Class Two: Questions for Discussion","title":"Day 2 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/#class-two-questions-for-discussion","text":"","title":"Class Two: Questions for Discussion"},{"location":"module-1/boxModel-border/","text":"Box Model: Border The border of an element sits just outside the padding and before the margin, usually invisible. In fact, all HTML Elements have a border but have a default value of null , meaning you won't see them (See, Default CSS Values Reference ). To make a border visible you need to set three values: border-style , border-width , and border-color . Try it ! 1 < p > Hello World </ p > 1 2 3 4 5 p { border-style : groove ; border-width : 12 pt ; border-color : #FF9633 ; } Just like padding (and margin) there is a short-hand, border : 1 2 3 p { border : groove 12 pt #AA9933 ; } NOTE: Again, this short-hand comes with a warning: it is less readable than the long-hand form. More Long-Hand To complicate things a little more there are properties that allow us to style each side of the border differently. This isn't all that common but it becomes VERY useful when you're creating strange and interesting shapes on the screen. Try it ! 1 2 3 4 5 6 7 8 9 10 11 12 13 p { border-style : groove ; border-top-color : blue ; border-top-width : 75 pt ; border-right-color : green ; border-right-width : 40 pt ; border-right-style : dotted ; border-bottom-color : purple ; border-bottom-width : 100 pt ; border-left-color : red ; border-left-width : 60 pt ; border-left-style : dotted ; } Above you can see there are properties for each side so you are able to control -style , -color , and -width of each side as you please!! Border Counts for Total Width There's a small \"gotcha\" with borders. Because borders are often invisible they don't have a value on the screen which means that count in the total amount of \"available space\". But, when you start add value to the border-width , it will start to push outward affecting the element's neighbor(s). The docs will say: \"Although an element's border is bound to the element itself, border settings will affect neighboring elements.\" NOTE: Check out the docs ahead to see all the values these properties can take. Additional Resources W3S Docs - Border s CodePen - Box Model Visualizer W3S Docs - Default CSS Values Reference","title":"Border"},{"location":"module-1/boxModel-border/#box-model-border","text":"The border of an element sits just outside the padding and before the margin, usually invisible. In fact, all HTML Elements have a border but have a default value of null , meaning you won't see them (See, Default CSS Values Reference ). To make a border visible you need to set three values: border-style , border-width , and border-color . Try it ! 1 < p > Hello World </ p > 1 2 3 4 5 p { border-style : groove ; border-width : 12 pt ; border-color : #FF9633 ; } Just like padding (and margin) there is a short-hand, border : 1 2 3 p { border : groove 12 pt #AA9933 ; } NOTE: Again, this short-hand comes with a warning: it is less readable than the long-hand form.","title":"Box Model: Border"},{"location":"module-1/boxModel-border/#more-long-hand","text":"To complicate things a little more there are properties that allow us to style each side of the border differently. This isn't all that common but it becomes VERY useful when you're creating strange and interesting shapes on the screen. Try it ! 1 2 3 4 5 6 7 8 9 10 11 12 13 p { border-style : groove ; border-top-color : blue ; border-top-width : 75 pt ; border-right-color : green ; border-right-width : 40 pt ; border-right-style : dotted ; border-bottom-color : purple ; border-bottom-width : 100 pt ; border-left-color : red ; border-left-width : 60 pt ; border-left-style : dotted ; } Above you can see there are properties for each side so you are able to control -style , -color , and -width of each side as you please!!","title":"More Long-Hand"},{"location":"module-1/boxModel-border/#border-counts-for-total-width","text":"There's a small \"gotcha\" with borders. Because borders are often invisible they don't have a value on the screen which means that count in the total amount of \"available space\". But, when you start add value to the border-width , it will start to push outward affecting the element's neighbor(s). The docs will say: \"Although an element's border is bound to the element itself, border settings will affect neighboring elements.\" NOTE: Check out the docs ahead to see all the values these properties can take.","title":"Border Counts for Total Width"},{"location":"module-1/boxModel-border/#additional-resources","text":"W3S Docs - Border s CodePen - Box Model Visualizer W3S Docs - Default CSS Values Reference","title":"Additional Resources"},{"location":"module-1/boxModel-margin/","text":"Box Model: Margin Continuing on with our Box Model properties, we arrive now at margin . Beyond the edge of the border lies the margin . If you add margin to any side of an element, it will push against other elements near it and create an invisible barrier between the elements. If you were looking at an image gallery, the margins would create the gutter between each column and row of images. Just like padding and border we can set the values of all four margins like the following: 1 2 3 4 5 6 p { margin-top : 10 % ; margin-right : 15 % ; margin-bottom : 1 % ; margin-left : 15 % } The Margin Short-Hand Again, like padding and border there are short-hands versions that are harder to read. However, if you have uniform margin on all for side it maybe be easier to just write something like this: 1 2 3 4 /* In this example, 15pt of margin will be applied to all four sides of the element */ . margin-on-all-sides { margin : 15 pt ; } And if you have equal margins on the left and right and equal margins on the top & bottom you could right it like this: 1 2 3 4 /* In this example, 15pt will be applied to the TOP and BOTTOM margins, 30pt to the LEFT and RIGHT margins*/ . TopBottom-LeftRight { margin : 15 pt 30 pt ; } This is a very common form of the short-hand to center an element: 1 2 3 . topBottom-leftRight-centered { margin : 15 pt auto ; } The Worst Short-Hand The last two short-hands are so confusing they're not really worth mentioning but just so you have them as a reference here they are: 1 2 3 4 5 6 7 8 9 10 11 12 13 /* the TOP margin will be 15pt, the RIGHT 30pt, the BOTTOM 25pt, the LEFT 20pt (clockwise)*/ . T-R-B-L { margin : 15 pt 30 pt 25 pt 20 pt ; } /* :yuck: */ /* In this example, 15pt on the TOP margin, 30pt on LEFT and RIGHT margins, 45pt on BOTTOM margin*/ . Top-LeftRight-Bottom { margin : 15 pt 30 pt 45 pt ; /* :barf: */ } You can do the same thing but with a little more typing that results in far more readable code ! 1 2 3 4 5 6 7 8 . T-R-B-L { margin-top : 15 pt ; margin-right : 30 pt ; margin-bottom : 25 pt ; margin-left : 20 pt ; } /* YAY, MUCH MORE READABLE CODE WE'LL GET HIRED FOR!!!!! */ Additional Resources W3S Docs - Margin CodePen - Box Model Visualizer W3S Docs - Default CSS Values Reference","title":"Margin"},{"location":"module-1/boxModel-margin/#box-model-margin","text":"Continuing on with our Box Model properties, we arrive now at margin . Beyond the edge of the border lies the margin . If you add margin to any side of an element, it will push against other elements near it and create an invisible barrier between the elements. If you were looking at an image gallery, the margins would create the gutter between each column and row of images. Just like padding and border we can set the values of all four margins like the following: 1 2 3 4 5 6 p { margin-top : 10 % ; margin-right : 15 % ; margin-bottom : 1 % ; margin-left : 15 % }","title":"Box Model: Margin"},{"location":"module-1/boxModel-margin/#the-margin-short-hand","text":"Again, like padding and border there are short-hands versions that are harder to read. However, if you have uniform margin on all for side it maybe be easier to just write something like this: 1 2 3 4 /* In this example, 15pt of margin will be applied to all four sides of the element */ . margin-on-all-sides { margin : 15 pt ; } And if you have equal margins on the left and right and equal margins on the top & bottom you could right it like this: 1 2 3 4 /* In this example, 15pt will be applied to the TOP and BOTTOM margins, 30pt to the LEFT and RIGHT margins*/ . TopBottom-LeftRight { margin : 15 pt 30 pt ; } This is a very common form of the short-hand to center an element: 1 2 3 . topBottom-leftRight-centered { margin : 15 pt auto ; }","title":"The Margin Short-Hand"},{"location":"module-1/boxModel-margin/#the-worst-short-hand","text":"The last two short-hands are so confusing they're not really worth mentioning but just so you have them as a reference here they are: 1 2 3 4 5 6 7 8 9 10 11 12 13 /* the TOP margin will be 15pt, the RIGHT 30pt, the BOTTOM 25pt, the LEFT 20pt (clockwise)*/ . T-R-B-L { margin : 15 pt 30 pt 25 pt 20 pt ; } /* :yuck: */ /* In this example, 15pt on the TOP margin, 30pt on LEFT and RIGHT margins, 45pt on BOTTOM margin*/ . Top-LeftRight-Bottom { margin : 15 pt 30 pt 45 pt ; /* :barf: */ } You can do the same thing but with a little more typing that results in far more readable code ! 1 2 3 4 5 6 7 8 . T-R-B-L { margin-top : 15 pt ; margin-right : 30 pt ; margin-bottom : 25 pt ; margin-left : 20 pt ; } /* YAY, MUCH MORE READABLE CODE WE'LL GET HIRED FOR!!!!! */","title":"The Worst Short-Hand"},{"location":"module-1/boxModel-margin/#additional-resources","text":"W3S Docs - Margin CodePen - Box Model Visualizer W3S Docs - Default CSS Values Reference","title":"Additional Resources"},{"location":"module-1/boxModel-padding/","text":"Box Model: Padding After we've decided how big an element's content should be using height: and width: we should starting thinking about the space between the content and the border, the padding . Padding is the space between the element's border and the content itself. If you had a bird's-eye-view of a pool table, you can think of the padding as the cushions or banks between the wooden outside border and the content inside, the billiard balls and green felt. As you saw before there are for properties that address the padding of an element: padding-top - holds the value of the padding at the top of the element padding-right - holds the value of the padding on the right side of the element padding-bottom - holds the value of the padding at the bottom of the element padding-left - holds the value of the padding on the left side of the element Each of these properties gives you control of the four different sides of the element. However, if you intend to have equal padding on either side and a different amount of padding for the top & bottom you might try the short-hand property: padding and write them with only two values: 1 2 3 4 /* The element(s) with the class name: my-other-element will have 20 points of padding on the top & bottom and 10 points of padding on the right & left */ . my-element { padding : 20 pt 10 pt ; } And if you wanted to have an equal amount of padding all the way around you could write it like this: 1 2 3 4 /* The element(s) with the class name: my-other-element will have an absolute padding of 20 points on all four sides*/ . my-other-element { padding : 20 pt ; } While you can use four values to specify the four sides in this short-hand it gets hard to read and remember the order : TOP, RIGHT, BOTTOM, LEFT (clockwise) 1 2 3 4 /* The element(s) with the class name: my-last-element will have 20 points of padding on the top, 5 points on the right, 10 points on the bottom and 1 point of padding on the left*/ . my-last-element { padding : 20 pt 5 pt 10 pt 1 pt ; } For code readability , you should use the long-hand form of the padding properties to specify 4 different values: 1 2 3 4 5 6 . my-readable-code { padding-top : 20 pt ; padding-right : 5 pt ; padding-bottom : 10 pt ; padding-left : 1 pt ; } Additional Resources W3S Docs - Padding CodePen - Box Model Visualizer W3S Docs - Default CSS Values Reference","title":"Padding"},{"location":"module-1/boxModel-padding/#box-model-padding","text":"After we've decided how big an element's content should be using height: and width: we should starting thinking about the space between the content and the border, the padding . Padding is the space between the element's border and the content itself. If you had a bird's-eye-view of a pool table, you can think of the padding as the cushions or banks between the wooden outside border and the content inside, the billiard balls and green felt. As you saw before there are for properties that address the padding of an element: padding-top - holds the value of the padding at the top of the element padding-right - holds the value of the padding on the right side of the element padding-bottom - holds the value of the padding at the bottom of the element padding-left - holds the value of the padding on the left side of the element Each of these properties gives you control of the four different sides of the element. However, if you intend to have equal padding on either side and a different amount of padding for the top & bottom you might try the short-hand property: padding and write them with only two values: 1 2 3 4 /* The element(s) with the class name: my-other-element will have 20 points of padding on the top & bottom and 10 points of padding on the right & left */ . my-element { padding : 20 pt 10 pt ; } And if you wanted to have an equal amount of padding all the way around you could write it like this: 1 2 3 4 /* The element(s) with the class name: my-other-element will have an absolute padding of 20 points on all four sides*/ . my-other-element { padding : 20 pt ; } While you can use four values to specify the four sides in this short-hand it gets hard to read and remember the order : TOP, RIGHT, BOTTOM, LEFT (clockwise) 1 2 3 4 /* The element(s) with the class name: my-last-element will have 20 points of padding on the top, 5 points on the right, 10 points on the bottom and 1 point of padding on the left*/ . my-last-element { padding : 20 pt 5 pt 10 pt 1 pt ; } For code readability , you should use the long-hand form of the padding properties to specify 4 different values: 1 2 3 4 5 6 . my-readable-code { padding-top : 20 pt ; padding-right : 5 pt ; padding-bottom : 10 pt ; padding-left : 1 pt ; }","title":"Box Model: Padding"},{"location":"module-1/boxModel-padding/#additional-resources","text":"W3S Docs - Padding CodePen - Box Model Visualizer W3S Docs - Default CSS Values Reference","title":"Additional Resources"},{"location":"module-1/boxModel-width%26height/","text":"Content Width & Height + New Length Units Since you already know these two values let's take some time to cover them quickly but also introduce to you some other useful values/ length units you can use for margin, padding, and border as well as height and width. New Length Units By default, the dimension of an element is the size of the content contained within the element. This means that when you create an <article> element it won't have a height that you can see on the screen because there is nothing inside of it. But as soon as you add content you'll be able to see it grow to fit the amount of content. We can, of course, make the element larger than the content by changing its width and height properties. The width and height properties take the traditional px (pixel) unit like the other properties you've read about so far, but now we'll throw a curve ball at you: All of the properties you've read about take far more length units than just the traditional px , including: in , cm , mm , em , rem , vh , vw , % , pt and many more. \"Why so many?\" That's a good question that doesn't really need to be answered right now. Suffice it to say that there have been many additions to the CSS language trying to accommodate for designers working on computers. The ones I'd like you to focus your attention on right now are % and pt . Percentage is Dynamic % , or percentage , tells the child element to be displayed at a specified percentage, or proportion, of its parent element. Check out the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!-- index.html file --> < article > < p > The red fox jumped over the green turtle. </ p > </ article > < style > /* style.css file */ article { width : 500 px ; height : 600 px ; } article > p { width : 90 % ; height : 50 % ; } </ style > In the example above, the <article> element, or parent element, will be 500px by 600px while the <p> element, or child element, will be rendered at 450px( 90% ) by 300px( 50% ) because it is set to be a percentage of its parent element. This is really useful when parent elements are set to be sized in proportion to their parent element like maybe . . . <body> . See the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <!-- index.html file --> < article > < p > The red fox jumped over the green turtle. </ p > </ article > < style > /* style.css file */ /* The <body> element will be automatically set to the height and width of the viewport, or display of the computer, tablet, or phone's window */ body { width : auto ; height : auto ; } /* Then the <article> element will be set to 50% as wide as the whole <body> and 100% as tall as the <body> */ article { width : 50 % ; height : 100 % ; } /* Can I assume you can guess what the paragraph element will do? */ article > p { width : 90 % ; height : 50 % ; } </ style > Using percentages is advantageous because you will never know all the sizes of screens that will view your web pages; this way you can tell elements to be a specific percentage of the available area instead of hard coded pixels! Follow It Up with Min- & Max- When using percentages as values it's important to include the min-width / max-width and min-height / max-height properties so as to avoid your elements being rendered in sizes that are unmanageable for the user. See below: 1 2 3 4 5 6 7 8 body { width : auto ; height : auto ; min-width : 100 pt ; /* <--- Notice the use of the pt unit */ max-width : 1000 pt ; min-height : 150 pt ; max-height : 1500 pt ; } Above you saw the use of pt or points . These are a little more reliable than px which are relative to the number of pixels in a user's display and other factors . The pt value is equal to 1/72nd of an inch so you can calculate a little more easily the size of your elements. View-height & View-Width The last units you should know about are vh and vw which stand for view-height and view-width , respectively. These are very useful units except for the fact that they are not supported on all previous versions of mobile browsers. Additional Resources W3S Docs - Height & Width CodePen - Box Model Visualizer W3S Docs - Default CSS Values Reference","title":"Width & Height"},{"location":"module-1/boxModel-width%26height/#content-width-height-new-length-units","text":"Since you already know these two values let's take some time to cover them quickly but also introduce to you some other useful values/ length units you can use for margin, padding, and border as well as height and width.","title":"Content Width &amp; Height + New Length Units"},{"location":"module-1/boxModel-width%26height/#new-length-units","text":"By default, the dimension of an element is the size of the content contained within the element. This means that when you create an <article> element it won't have a height that you can see on the screen because there is nothing inside of it. But as soon as you add content you'll be able to see it grow to fit the amount of content. We can, of course, make the element larger than the content by changing its width and height properties. The width and height properties take the traditional px (pixel) unit like the other properties you've read about so far, but now we'll throw a curve ball at you: All of the properties you've read about take far more length units than just the traditional px , including: in , cm , mm , em , rem , vh , vw , % , pt and many more. \"Why so many?\" That's a good question that doesn't really need to be answered right now. Suffice it to say that there have been many additions to the CSS language trying to accommodate for designers working on computers. The ones I'd like you to focus your attention on right now are % and pt .","title":"New Length Units"},{"location":"module-1/boxModel-width%26height/#percentage-is-dynamic","text":"% , or percentage , tells the child element to be displayed at a specified percentage, or proportion, of its parent element. Check out the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!-- index.html file --> < article > < p > The red fox jumped over the green turtle. </ p > </ article > < style > /* style.css file */ article { width : 500 px ; height : 600 px ; } article > p { width : 90 % ; height : 50 % ; } </ style > In the example above, the <article> element, or parent element, will be 500px by 600px while the <p> element, or child element, will be rendered at 450px( 90% ) by 300px( 50% ) because it is set to be a percentage of its parent element. This is really useful when parent elements are set to be sized in proportion to their parent element like maybe . . . <body> . See the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <!-- index.html file --> < article > < p > The red fox jumped over the green turtle. </ p > </ article > < style > /* style.css file */ /* The <body> element will be automatically set to the height and width of the viewport, or display of the computer, tablet, or phone's window */ body { width : auto ; height : auto ; } /* Then the <article> element will be set to 50% as wide as the whole <body> and 100% as tall as the <body> */ article { width : 50 % ; height : 100 % ; } /* Can I assume you can guess what the paragraph element will do? */ article > p { width : 90 % ; height : 50 % ; } </ style > Using percentages is advantageous because you will never know all the sizes of screens that will view your web pages; this way you can tell elements to be a specific percentage of the available area instead of hard coded pixels!","title":"Percentage is Dynamic"},{"location":"module-1/boxModel-width%26height/#follow-it-up-with-min-max-","text":"When using percentages as values it's important to include the min-width / max-width and min-height / max-height properties so as to avoid your elements being rendered in sizes that are unmanageable for the user. See below: 1 2 3 4 5 6 7 8 body { width : auto ; height : auto ; min-width : 100 pt ; /* <--- Notice the use of the pt unit */ max-width : 1000 pt ; min-height : 150 pt ; max-height : 1500 pt ; } Above you saw the use of pt or points . These are a little more reliable than px which are relative to the number of pixels in a user's display and other factors . The pt value is equal to 1/72nd of an inch so you can calculate a little more easily the size of your elements.","title":"Follow It Up with Min- &amp; Max-"},{"location":"module-1/boxModel-width%26height/#view-height-view-width","text":"The last units you should know about are vh and vw which stand for view-height and view-width , respectively. These are very useful units except for the fact that they are not supported on all previous versions of mobile browsers.","title":"View-height &amp; View-Width"},{"location":"module-1/boxModel-width%26height/#additional-resources","text":"W3S Docs - Height & Width CodePen - Box Model Visualizer W3S Docs - Default CSS Values Reference","title":"Additional Resources"},{"location":"module-1/class-1/","text":"Class One: Hosting Your Landing Pag Greet, Outline, and Objectify Today we're going to: OBJECTIVE: Review previous knowledge and engage on a deeper level. Ask why do we need to do these things?. Intro of Instructor + Staff - 15 mins Student Intros - 30 mins Welcome to the class space with quick tour - 3 mins Questions for Student Led Discussion Account Setup/Check-In - 20 mins Downloads Review - 10 mins Creation Time Host Your Landing Page - 45 mins Exit Recap, Attendance, and Reminders Learning Structure and Expectations - 10 mins What's next? - 2 mins Intros Intro of Instructor: Who you are? What you do for full-time employment? Why you teach? How you like to work within the class and the expectations you have for students? Intro to: the school, Why it was created? What we do? How we do it? the program and what you'll learn in it, Why - We teach to industry standards while meeting students where they are by ramping their learning curves What - Full-stack web development How - Flipped classroom, student owns their learning with the guidance on classroom facilitation as a small piece of everything they learn. this course and what we'll learn during it, Front-end web development Minimal programming but lots of interaction with websites the textbook and how to navigate it There are always Pre-Class Lessons (homework) to complete. Look ahead into each class and write down your questions to be asked during class. Intro of support staff: Campus Director and Tutor(s) + Tutor Page invitation to RocketChat or email anytime set up tutoring sessions important: come to tutoring sessions on the weekends Ice Breaker 3 mins - Look across the table and find a classmate, someone that is interested in the same career as you and ask them the following questions to get to know them: What's your name? What do you currently do? Why do you want to get into Web Development? What do you like to do to exercise your mind? 3 mins - Now turn to your left or right and find another aspiring developer. Ask them these questions: What's your name? Have you always lived in Austin? Where? What do you know about the tech world? Do you have any pets? Species? Names? 3 mins - Now turn the opposite way and find another collaborator. Ask them these questions: What's your name? Tell me about an interesting book or article you've read lately? What do you think about when you watch the stars? What is a dream of yours you are willing to work toward and figure out how to bring it to fruition? 3 mins - Last time, get up and walk to the other side of the classroom to find a different colleague to ask them these questions: What's your name? What's your Zodiac sign? What daily self-care methods do you practice to maintain good health? What is a fear you have about this course? How do you plan to overcome it? 15 mins - Show-And-Tell , Finally, stop where you are, turn toward the rest of the class, and as you feel the need, raise your hand to introduce your new (last/most recent) friend to the class. Example: \"Hello, my friend, James, is a Libra, born Oct 15th. He says that journaling, drinking water, and running help him sleep soundly and have bright useful days. He's nervous that he doesn't know computers well enough but he thinks if he keeps reading, breathing, and resting his mind he can stay focused on the marathon and not just the dash!\" Everyone should introduce their new friend. Now that we know each other let's sit down and get to work! Questions for Student Led Discussion, 35 mins Questions to prompt discussion Accounts, Downloads, and Git Software Check-In, 30 minutes In this section we'll take things step at a time with time to slow down and get help, we'll call them Pause and Partner where students that were successful in the steps will partner with students that weren't to help them through any troubles. This will help conserve class time so your instructor can teach thing everyone needs to learn. We'll be using these two programs tonight and for the rest of class. If you didn't get both of them downloaded and opened up, ask your new friends if they did so they can help you out. The IDE : Visual Studio Code Plus the extension: Live-Server The version control software: Git For Windows: How To Install Git on Windows Install Git For Mac: Install HomeBrew - /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Install Git - brew install git NOTE: (There is no icon for this program, just go to your terminal/shell/commandPrompt/bash and type git + ENTER) Pause and Partner: Did anyone NOT get these downloaded? Did anyone not get them opened? Partner up and help each other. Create a Repo on GitHub First, Sign-in to GitHub. At the top-right of the screen click on the \"+\" icon and select \"New Repository\" In the \"Repository Name\" field type: web101_firstName_lastName NOTE: remember to change firstName for your actual first name and lastName for your actual last name. In the \"Description field\" type: \"This is my portfolio website!\" Make it \"Public\" by clicking the radio button next to Public. So your instructor can view it. Check the box to \"Initialize this repository with a README.md\" NOTE: This is a file we'll use later on and you'll understand why it's important to use later on. Click \"Create Repository\". After this you should see a screen that looks like this: Find your Portfolio Folder in the terminal by either: dragging and dropping the folder in the terminal Use the command cd to change directories until you're inside the folder. Type pwd to confirm your in the correct folder. Then use these commands one after another. They're modified a little from the image above. git init - this will initialize the folder as a folder for the git software to watch. git add -A - this adds all the files you created for your Portfolio Landing Page. git commit -m \"first commit\" - This stages your new files to be added to the remote remote, you're \"committing\" to the changes. git branch -M main - GitHub recently changed the name of the \"main\" branch from master to main . This command ensure you're using main as your \"main\" branch. git remote add origin https://github.com/YOUR-USERNAME/web101-firstName_lastName.git - Attaches the remote repo to this local folder. NOTE: be sure you replace the link wit the link given to YOU from gitHub. git push -u origin main - pushes your committed files up to the remote repo. Watch the progress in your terminal then refresh the tab with your GitHub Repo to see if the files are there. In your terminal you're looking for feedback that looks like this: Pause and Partner: What problems have you encountered? Is there anyone that was rejected by GitHub? Password? Username? Let's partner up according to our problems and help each other get through them! Who's successful and who is struggling? Follow-Up Video: Creating a Repo and Using Git Is anyone having a trouble push ing? Maybe your configurations aren't set correctly. See next section: Git Configurations NOTE: Mac users can learn to setup the code . path for VS Code in this video. Git Configurations When you're pushing code to a repo, Git needs to know who you are so it can sign-in to GitHub. It uses your username/email and password to do this. If you don't setup this configuration, git will populate your email with an address assigned to your computer that doesn't match your account on GitHub. NOTE: if while doing these steps you'll see a strange looking screen pop up, it might be your computer's default text editor, VIM or VI . Just follow the instructions below and/or watch the video to use it. Set up Git Config(urations) All Machine Users Set your git username. In your terminal, copy/paste this code and replace YOUR-USERNAME with your GitHub username: git config --global user.name \"YOUR-USERNAME\" + ENTER Now, set your email. In your terminal, copy/paste this code and replace YOUR EMAIL with the email you used to create your GitHub account: git config --global user.email \"YOURemail@address.com\" + ENTER Note: If it asks you for a password this is your GitHub account password VIM/VI - How to Use It When doing your git config you may see a more unusual window in your terminal. it will have a bunch of ~ or # along the left side. This is a built-in text editor like VS Code but very stripped down. It allows you to change files and write code. For this step you'll be changing your .gitconfig file to contain your username and email. VIM has two modes: Insert (input text) and Command (move around and do stuff). For now, we really only need to insert text, but you'll need to know how to get in and out of the two different modes. To start the Insert Mode : Press i to enter Insert mode and press esc to begin Command mode . You'll know which one you're in because \"insert\" will appear at the bottom of the screen when you enter insert mode. While Command Mode is active you navigate around the page with your arrow keys (d-pad). When you need to type in your email or anything else, press i . You're then free to type in whatever you need. In this .gitconfig file all lines that begin with # are read as \"comments\" meaning the computer doesn't read them. Make sure you remove them from the important lines. Ask your instructor. When you're finished inserting, press esc to move back to Command mode . Then to exit and save the file type :wq + ENTER. This simply says to the computer: \"I'm about to give you a command( : ), write the file( w ) then quit the program( q ).\" NOTE: If you're lost, it's totally fine. VIM is an old relic that's stuck around and become a hipster text editor but really it's there so you can always change files, no matter what! If you're having trouble: Git Config How-To Video Pause and Partner: How we doing? Try git push ing again. Who hasn't been able to push? Practice It Again: Add A file and Push It Now that you've configured your git software and learned the status , add , commit , push process, let's practice using git again. Create another file in the same directory called: .gitignore . Then copy/paste this code into that file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 ### macOS ### # General .DS_Store .AppleDouble .LSOverride # Icon must end with two \\r Icon # Thumbnails ._* # Files that might appear in the root of a volume .DocumentRevisions-V100 .fseventsd .Spotlight-V100 .TemporaryItems .Trashes .VolumeIcon.icns .com.apple.timemachine.donotpresent # Directories potentially created on remote AFP share .AppleDB .AppleDesktop Network Trash Folder Temporary Items .apdisk ### Windows ### # Windows thumbnail cache files Thumbs.db Thumbs.db:encryptable ehthumbs.db ehthumbs_vista.db # Dump file *.stackdump # Folder config file [Dd]esktop.ini # Recycle Bin used on file shares $RECYCLE.BIN/ # Windows Installer files *.cab *.msi *.msix *.msm *.msp # Windows shortcuts *.lnk # Sensitive Environment Variables .env # VS CODE .vscode/settings.json # End of https://www.toptal.com/developers/gitignore/api/macos,windows NOTE: This step is mainly for Mac users but really all users should know how to use .gitignore which is a file that git software looks for and will ignore whatever you write inside of it. Its good practice to include this file with all projects you do in the future. To move this file up to your remote repo by running these commands in order: git status - check to see what files you've changed and that you hit \"SAVE\" git add .gitignore - Adds the changed file to the staging area. git commit -m \"to git to ignore certain files\" - Commits the file changes with a descriptive message about the changes made. git push - pushes the change from the staging area to the remote repo. Make a note for yourself!! Every time you make substantial changes to your code bases you'll run these commands in this order EVERYTIME! Pause & Partner : How we doing? Any questions about these four commands? Who didn't get this .gitignore file into their repo? Serve Your Landing Page Now that your web page is hosted on a publicly available computer, GitHub's server, you can change the permissions and allow for it to seen by the world! Go back to the repo you just created on GitHub then go to the \"Settings Tab\". Under the Settings, scroll down almost to the bottom of the page until you see \"GitHub Pages\". Click the None dropdown and select main branch and then click \"Save\". Now, scroll back down to the \"GitHub Pages\" section and you'll see a section that says \"Your site is ready to be published at https://yourusername.github.io/ .\" - This is the ROOT of your live site. In order to see your live site, you need to put in the rest of the URL's path . Use your browser to navigate to: https://YOUR-GITHUB-USERNAME.github.io/ACA_web101_FIRSTNAME_LASTNAME/myPortfolio/index.html NOTE: Do you see how the forward-slashes / in the URL look the exact same as the path names in our <link/> tags? That's because server-computers hold files the same way your personal computer does and the structure of the directories are the same, i.e. the current path to your portfolio looks like: documents/DevFolder/myPortfolio/index.html . All computers are built the same way and talk the same way. Pause & Partner * Where are we? Is anyone able to see their site live? It can take a few minutes to populate. * Who's lost? Turning in Your Assignments Your instructor will show you where and how to turn your assignments in using this live GitHub link as an example. Important Notes About Git and GitHub DON'T make changes to your code using the tools on GitHub like editing, deleting, creating, or uploading any files. Only make changes in your editor (VS Code) and push them up EVERY TIME. No exceptions. If you don't it may cause you some headaches. Git software is powerful but confusing for beginners. If something goes wrong while using git follow these steps: PLEASE DON'T delete your local folder with work in it that is not on GitHub. That is your precious time you are deleting! THIS IS WHY WE KEEP OUR CODE IN A REPO IN THE FIRST PLACE!! Check the branch you're on: git branch Change branches to see if the code you're looking for is on that branch: git checkout <NameOfBranch> Replace the \"broken\" folder with a new folder: Rename your folder on your computer web101_firstName_lastName to web101_firstName_lastName-broken Re-clone your repository from GitHub git clone https://github.com/username/ACA_web101_firstName_lastName.git Copy over all changed files from ACA_web101_firstName_lastName-broken folder into the new ACA_web101_firstName_lastName git add -A - Add all new files git status - See green git commit -m \"fixed my mess-up\" - to commit the changes git push origin main or master - push your code up to GitHub. ONLY AFTER you've confirmed that all changes are on GitHub, delete the broken repo folder. Student Presentation Organization Knowledge is best when it's learned not taught. In this program instructors and the learning portal guide the student's learning journey but our students own their learning experience. You'll be assigned to teach your classmates specific topics that are related to concepts and techniques being taught throughout the course and program. This process has been proven to deepen student's understanding, boost retention, and strengthen community and interpersonal communication skills. Let's take some time to assign & document individual students and groups of students to present the coming topics. List of Student Daily Presentations Exit Recap, Attendance, and Reminders, 5 mins Review Class Structure & Expectations of Students Answer the following questions: How would you describe programming? How would you describe coding? What does Clone mean? What's a Local Machine? What's a Repo? Prepare for your presentations. Next class we'll be adding an image gallery to your website so make sure you study CSS Grid & Box Model tonight and tomorrow. We'll see you then!","title":"Class 1 Hosting Your Page"},{"location":"module-1/class-1/#class-one-hosting-your-landing-pag","text":"","title":"Class One: Hosting Your Landing Pag"},{"location":"module-1/class-1/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: Review previous knowledge and engage on a deeper level. Ask why do we need to do these things?. Intro of Instructor + Staff - 15 mins Student Intros - 30 mins Welcome to the class space with quick tour - 3 mins Questions for Student Led Discussion Account Setup/Check-In - 20 mins Downloads Review - 10 mins Creation Time Host Your Landing Page - 45 mins Exit Recap, Attendance, and Reminders Learning Structure and Expectations - 10 mins What's next? - 2 mins","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-1/#intros","text":"Intro of Instructor: Who you are? What you do for full-time employment? Why you teach? How you like to work within the class and the expectations you have for students? Intro to: the school, Why it was created? What we do? How we do it? the program and what you'll learn in it, Why - We teach to industry standards while meeting students where they are by ramping their learning curves What - Full-stack web development How - Flipped classroom, student owns their learning with the guidance on classroom facilitation as a small piece of everything they learn. this course and what we'll learn during it, Front-end web development Minimal programming but lots of interaction with websites the textbook and how to navigate it There are always Pre-Class Lessons (homework) to complete. Look ahead into each class and write down your questions to be asked during class. Intro of support staff: Campus Director and Tutor(s) + Tutor Page invitation to RocketChat or email anytime set up tutoring sessions important: come to tutoring sessions on the weekends","title":"Intros"},{"location":"module-1/class-1/#ice-breaker","text":"3 mins - Look across the table and find a classmate, someone that is interested in the same career as you and ask them the following questions to get to know them: What's your name? What do you currently do? Why do you want to get into Web Development? What do you like to do to exercise your mind? 3 mins - Now turn to your left or right and find another aspiring developer. Ask them these questions: What's your name? Have you always lived in Austin? Where? What do you know about the tech world? Do you have any pets? Species? Names? 3 mins - Now turn the opposite way and find another collaborator. Ask them these questions: What's your name? Tell me about an interesting book or article you've read lately? What do you think about when you watch the stars? What is a dream of yours you are willing to work toward and figure out how to bring it to fruition? 3 mins - Last time, get up and walk to the other side of the classroom to find a different colleague to ask them these questions: What's your name? What's your Zodiac sign? What daily self-care methods do you practice to maintain good health? What is a fear you have about this course? How do you plan to overcome it? 15 mins - Show-And-Tell , Finally, stop where you are, turn toward the rest of the class, and as you feel the need, raise your hand to introduce your new (last/most recent) friend to the class. Example: \"Hello, my friend, James, is a Libra, born Oct 15th. He says that journaling, drinking water, and running help him sleep soundly and have bright useful days. He's nervous that he doesn't know computers well enough but he thinks if he keeps reading, breathing, and resting his mind he can stay focused on the marathon and not just the dash!\" Everyone should introduce their new friend. Now that we know each other let's sit down and get to work!","title":"Ice Breaker"},{"location":"module-1/class-1/#questions-for-student-led-discussion-35-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 35 mins"},{"location":"module-1/class-1/#accounts-downloads-and-git-software-check-in-30-minutes","text":"In this section we'll take things step at a time with time to slow down and get help, we'll call them Pause and Partner where students that were successful in the steps will partner with students that weren't to help them through any troubles. This will help conserve class time so your instructor can teach thing everyone needs to learn. We'll be using these two programs tonight and for the rest of class. If you didn't get both of them downloaded and opened up, ask your new friends if they did so they can help you out. The IDE : Visual Studio Code Plus the extension: Live-Server The version control software: Git For Windows: How To Install Git on Windows Install Git For Mac: Install HomeBrew - /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Install Git - brew install git NOTE: (There is no icon for this program, just go to your terminal/shell/commandPrompt/bash and type git + ENTER) Pause and Partner: Did anyone NOT get these downloaded? Did anyone not get them opened? Partner up and help each other.","title":"Accounts, Downloads, and Git Software Check-In, 30 minutes"},{"location":"module-1/class-1/#create-a-repo-on-github","text":"First, Sign-in to GitHub. At the top-right of the screen click on the \"+\" icon and select \"New Repository\" In the \"Repository Name\" field type: web101_firstName_lastName NOTE: remember to change firstName for your actual first name and lastName for your actual last name. In the \"Description field\" type: \"This is my portfolio website!\" Make it \"Public\" by clicking the radio button next to Public. So your instructor can view it. Check the box to \"Initialize this repository with a README.md\" NOTE: This is a file we'll use later on and you'll understand why it's important to use later on. Click \"Create Repository\". After this you should see a screen that looks like this: Find your Portfolio Folder in the terminal by either: dragging and dropping the folder in the terminal Use the command cd to change directories until you're inside the folder. Type pwd to confirm your in the correct folder. Then use these commands one after another. They're modified a little from the image above. git init - this will initialize the folder as a folder for the git software to watch. git add -A - this adds all the files you created for your Portfolio Landing Page. git commit -m \"first commit\" - This stages your new files to be added to the remote remote, you're \"committing\" to the changes. git branch -M main - GitHub recently changed the name of the \"main\" branch from master to main . This command ensure you're using main as your \"main\" branch. git remote add origin https://github.com/YOUR-USERNAME/web101-firstName_lastName.git - Attaches the remote repo to this local folder. NOTE: be sure you replace the link wit the link given to YOU from gitHub. git push -u origin main - pushes your committed files up to the remote repo. Watch the progress in your terminal then refresh the tab with your GitHub Repo to see if the files are there. In your terminal you're looking for feedback that looks like this: Pause and Partner: What problems have you encountered? Is there anyone that was rejected by GitHub? Password? Username? Let's partner up according to our problems and help each other get through them! Who's successful and who is struggling? Follow-Up Video: Creating a Repo and Using Git Is anyone having a trouble push ing? Maybe your configurations aren't set correctly. See next section: Git Configurations NOTE: Mac users can learn to setup the code . path for VS Code in this video.","title":"Create a Repo on GitHub"},{"location":"module-1/class-1/#git-configurations","text":"When you're pushing code to a repo, Git needs to know who you are so it can sign-in to GitHub. It uses your username/email and password to do this. If you don't setup this configuration, git will populate your email with an address assigned to your computer that doesn't match your account on GitHub. NOTE: if while doing these steps you'll see a strange looking screen pop up, it might be your computer's default text editor, VIM or VI . Just follow the instructions below and/or watch the video to use it.","title":"Git Configurations"},{"location":"module-1/class-1/#set-up-git-configurations-all-machine-users","text":"Set your git username. In your terminal, copy/paste this code and replace YOUR-USERNAME with your GitHub username: git config --global user.name \"YOUR-USERNAME\" + ENTER Now, set your email. In your terminal, copy/paste this code and replace YOUR EMAIL with the email you used to create your GitHub account: git config --global user.email \"YOURemail@address.com\" + ENTER Note: If it asks you for a password this is your GitHub account password","title":"Set up Git Config(urations) All Machine Users"},{"location":"module-1/class-1/#vimvi-how-to-use-it","text":"When doing your git config you may see a more unusual window in your terminal. it will have a bunch of ~ or # along the left side. This is a built-in text editor like VS Code but very stripped down. It allows you to change files and write code. For this step you'll be changing your .gitconfig file to contain your username and email. VIM has two modes: Insert (input text) and Command (move around and do stuff). For now, we really only need to insert text, but you'll need to know how to get in and out of the two different modes. To start the Insert Mode : Press i to enter Insert mode and press esc to begin Command mode . You'll know which one you're in because \"insert\" will appear at the bottom of the screen when you enter insert mode. While Command Mode is active you navigate around the page with your arrow keys (d-pad). When you need to type in your email or anything else, press i . You're then free to type in whatever you need. In this .gitconfig file all lines that begin with # are read as \"comments\" meaning the computer doesn't read them. Make sure you remove them from the important lines. Ask your instructor. When you're finished inserting, press esc to move back to Command mode . Then to exit and save the file type :wq + ENTER. This simply says to the computer: \"I'm about to give you a command( : ), write the file( w ) then quit the program( q ).\" NOTE: If you're lost, it's totally fine. VIM is an old relic that's stuck around and become a hipster text editor but really it's there so you can always change files, no matter what! If you're having trouble: Git Config How-To Video Pause and Partner: How we doing? Try git push ing again. Who hasn't been able to push?","title":"VIM/VI - How to Use It"},{"location":"module-1/class-1/#practice-it-again-add-a-file-and-push-it","text":"Now that you've configured your git software and learned the status , add , commit , push process, let's practice using git again. Create another file in the same directory called: .gitignore . Then copy/paste this code into that file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 ### macOS ### # General .DS_Store .AppleDouble .LSOverride # Icon must end with two \\r Icon # Thumbnails ._* # Files that might appear in the root of a volume .DocumentRevisions-V100 .fseventsd .Spotlight-V100 .TemporaryItems .Trashes .VolumeIcon.icns .com.apple.timemachine.donotpresent # Directories potentially created on remote AFP share .AppleDB .AppleDesktop Network Trash Folder Temporary Items .apdisk ### Windows ### # Windows thumbnail cache files Thumbs.db Thumbs.db:encryptable ehthumbs.db ehthumbs_vista.db # Dump file *.stackdump # Folder config file [Dd]esktop.ini # Recycle Bin used on file shares $RECYCLE.BIN/ # Windows Installer files *.cab *.msi *.msix *.msm *.msp # Windows shortcuts *.lnk # Sensitive Environment Variables .env # VS CODE .vscode/settings.json # End of https://www.toptal.com/developers/gitignore/api/macos,windows NOTE: This step is mainly for Mac users but really all users should know how to use .gitignore which is a file that git software looks for and will ignore whatever you write inside of it. Its good practice to include this file with all projects you do in the future. To move this file up to your remote repo by running these commands in order: git status - check to see what files you've changed and that you hit \"SAVE\" git add .gitignore - Adds the changed file to the staging area. git commit -m \"to git to ignore certain files\" - Commits the file changes with a descriptive message about the changes made. git push - pushes the change from the staging area to the remote repo. Make a note for yourself!! Every time you make substantial changes to your code bases you'll run these commands in this order EVERYTIME! Pause & Partner : How we doing? Any questions about these four commands? Who didn't get this .gitignore file into their repo?","title":"Practice It Again: Add A file and Push It"},{"location":"module-1/class-1/#serve-your-landing-page","text":"Now that your web page is hosted on a publicly available computer, GitHub's server, you can change the permissions and allow for it to seen by the world! Go back to the repo you just created on GitHub then go to the \"Settings Tab\". Under the Settings, scroll down almost to the bottom of the page until you see \"GitHub Pages\". Click the None dropdown and select main branch and then click \"Save\". Now, scroll back down to the \"GitHub Pages\" section and you'll see a section that says \"Your site is ready to be published at https://yourusername.github.io/ .\" - This is the ROOT of your live site. In order to see your live site, you need to put in the rest of the URL's path . Use your browser to navigate to: https://YOUR-GITHUB-USERNAME.github.io/ACA_web101_FIRSTNAME_LASTNAME/myPortfolio/index.html NOTE: Do you see how the forward-slashes / in the URL look the exact same as the path names in our <link/> tags? That's because server-computers hold files the same way your personal computer does and the structure of the directories are the same, i.e. the current path to your portfolio looks like: documents/DevFolder/myPortfolio/index.html . All computers are built the same way and talk the same way. Pause & Partner * Where are we? Is anyone able to see their site live? It can take a few minutes to populate. * Who's lost?","title":"Serve Your Landing Page"},{"location":"module-1/class-1/#turning-in-your-assignments","text":"Your instructor will show you where and how to turn your assignments in using this live GitHub link as an example.","title":"Turning in Your Assignments"},{"location":"module-1/class-1/#important-notes-about-git-and-github","text":"DON'T make changes to your code using the tools on GitHub like editing, deleting, creating, or uploading any files. Only make changes in your editor (VS Code) and push them up EVERY TIME. No exceptions. If you don't it may cause you some headaches. Git software is powerful but confusing for beginners. If something goes wrong while using git follow these steps: PLEASE DON'T delete your local folder with work in it that is not on GitHub. That is your precious time you are deleting! THIS IS WHY WE KEEP OUR CODE IN A REPO IN THE FIRST PLACE!! Check the branch you're on: git branch Change branches to see if the code you're looking for is on that branch: git checkout <NameOfBranch> Replace the \"broken\" folder with a new folder: Rename your folder on your computer web101_firstName_lastName to web101_firstName_lastName-broken Re-clone your repository from GitHub git clone https://github.com/username/ACA_web101_firstName_lastName.git Copy over all changed files from ACA_web101_firstName_lastName-broken folder into the new ACA_web101_firstName_lastName git add -A - Add all new files git status - See green git commit -m \"fixed my mess-up\" - to commit the changes git push origin main or master - push your code up to GitHub. ONLY AFTER you've confirmed that all changes are on GitHub, delete the broken repo folder.","title":"Important Notes About Git and GitHub"},{"location":"module-1/class-1/#student-presentation-organization","text":"Knowledge is best when it's learned not taught. In this program instructors and the learning portal guide the student's learning journey but our students own their learning experience. You'll be assigned to teach your classmates specific topics that are related to concepts and techniques being taught throughout the course and program. This process has been proven to deepen student's understanding, boost retention, and strengthen community and interpersonal communication skills. Let's take some time to assign & document individual students and groups of students to present the coming topics. List of Student Daily Presentations","title":"Student Presentation Organization"},{"location":"module-1/class-1/#exit-recap-attendance-and-reminders-5-mins","text":"Review Class Structure & Expectations of Students Answer the following questions: How would you describe programming? How would you describe coding? What does Clone mean? What's a Local Machine? What's a Repo? Prepare for your presentations. Next class we'll be adding an image gallery to your website so make sure you study CSS Grid & Box Model tonight and tomorrow. We'll see you then!","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-2/","text":"Class #: Title ** Greet, Outline, and Objectify Today we're going to: OBJECTIVE: By re-engaging with previously learned knowledge and applying it to a new challenge the student will deepen their understanding and be prepared to creatively reuse these techniques in new ways. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time ... Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Push Yourself Further Exit Recap, Attendance, and Reminders, 5 mins Create *** Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 2"},{"location":"module-1/class-2/#class-title","text":"**","title":"Class #: Title"},{"location":"module-1/class-2/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: By re-engaging with previously learned knowledge and applying it to a new challenge the student will deepen their understanding and be prepared to creatively reuse these techniques in new ways. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time ... Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-2/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-1/class-2/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-2/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-2/#creation-time-60-90-mins","text":"","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-2/#push-yourself-further","text":"","title":"Push Yourself Further"},{"location":"module-1/class-2/#exit-recap-attendance-and-reminders-5-mins","text":"Create *** Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/theBoxModel/","text":"The CSS Box Model Maybe everyone can live beyond what they're capable of. \u2015Markus Zusak, I Am the Messenger Throughout this course and the rest of the program you'll be introduced to many \"models\". We mean models by the way we can understand how computers interact with the world around them. They don't see models or know about models, rather models are just ways we humans can conceptualize the way a computer keeps up with memory and transfers that information to other computers. Today we're going to learn about the \" CSS Box Model \" which is, put shortly, a model that helps us understand how to change the size, shape and overall appearance on an HTML element on the screen. Think, every element we put in our HTML code has a representation on the screen. That thing on the screen is just a box or rectangle. But with CSS we can change its properties to be taller, wider, centered, have a border and even change the shape to not be a box ... The box model properties used to change the appearance of our rectangles are: height min-height max-height width min-width max-width margin - (short-hand of the following 4 properties) margin-top margin-right margin-bottom margin-left border - (short-hand of the following 3 properties) border-style border-color border-width border-radius padding - (short-hand of the following 4 properties) padding-top padding-right padding-bottom padding-left The six properties listed above comprise most of the Box Model properties. There are, of course, many more properties that allow you very fine-tuned control over the shape and size of your elements . But for much of our lessons we won't have time to cover them all (you'll have to do that on your own time!). To help you understand how the short-hand properties (seen above) can represent all of the long hand properties, below are two CSS declarations that style a Section Element the exact same way. Notice the differences... 1 2 3 4 5 6 7 8 section { background-color : #b1deef ; height : 200 px ; width : 200 px ; margin : 1 % auto ; padding : 5 % auto ; border : 1 px solid #264653 ; } The same properties could have been written this way, as well: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 section { background-color : #b1deef ; height : 200 px ; width : 200 px ; margin-top : 1 % ; margin-bottom : 1 % ; margin-left : auto ; margin-right : auto ; padding-top : 5 % ; padding-top : 5 % ; padding-right : auto ; padding-left : auto ; border-width : 1 px ; border-style : solid ; border-color : #264653 ; } Did you pick it up? If not, look again until you understand it for yourself. Do not move on until you got it! Box Model Visualizer We'll definitely be re-visiting this visualizer but it may be a good introduction for you now. This CSS Box Model Visualizer is a nifty tool built by Caroline Artz to help people see how each property on the element effects the visual representation of the element on the screen. Each of the sliders are labeled with the actual properties you could type in CSS and the values you see are actual values you could code in CSS. And the changing box at the bottom right is what the element would look like. Try it! Box Model Visualizer In the upcoming lessons we'll dig a little deeper into the four categories of the CSS Box Model: Content Height & Width Margin Border Padding In addition to knowing the Box Model in your head, your browser's developer Tools offer a visualization of each element. Just open your browser's devtools, hover over an element, then click to select the element. In the DevTool Tray you should see the \"Elements\" Tab highlighted at the top-left and to the right you'll see two sub-tabs named \"Styles\" and \"Computed\". The \"Styles\" tab will list all of the CSS rules that are applied to that element including rules that are overridden (denoted by a strike-through). Under the \"Computed\" tab you'll see a box with colors of blue(content), green(padding), yellow(border), orange(margin) along with numbers indicating the value in pixels. Keep this tool handy as you learn the properties of the Box Model and for the rest of your career!! Additional Resources See It - The Box Model CSS Tricks: The CSS Box Model Box Model, Sizing, Shadow","title":"The Box Model"},{"location":"module-1/theBoxModel/#the-css-box-model","text":"Maybe everyone can live beyond what they're capable of. \u2015Markus Zusak, I Am the Messenger Throughout this course and the rest of the program you'll be introduced to many \"models\". We mean models by the way we can understand how computers interact with the world around them. They don't see models or know about models, rather models are just ways we humans can conceptualize the way a computer keeps up with memory and transfers that information to other computers. Today we're going to learn about the \" CSS Box Model \" which is, put shortly, a model that helps us understand how to change the size, shape and overall appearance on an HTML element on the screen. Think, every element we put in our HTML code has a representation on the screen. That thing on the screen is just a box or rectangle. But with CSS we can change its properties to be taller, wider, centered, have a border and even change the shape to not be a box ... The box model properties used to change the appearance of our rectangles are: height min-height max-height width min-width max-width margin - (short-hand of the following 4 properties) margin-top margin-right margin-bottom margin-left border - (short-hand of the following 3 properties) border-style border-color border-width border-radius padding - (short-hand of the following 4 properties) padding-top padding-right padding-bottom padding-left The six properties listed above comprise most of the Box Model properties. There are, of course, many more properties that allow you very fine-tuned control over the shape and size of your elements . But for much of our lessons we won't have time to cover them all (you'll have to do that on your own time!). To help you understand how the short-hand properties (seen above) can represent all of the long hand properties, below are two CSS declarations that style a Section Element the exact same way. Notice the differences... 1 2 3 4 5 6 7 8 section { background-color : #b1deef ; height : 200 px ; width : 200 px ; margin : 1 % auto ; padding : 5 % auto ; border : 1 px solid #264653 ; } The same properties could have been written this way, as well: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 section { background-color : #b1deef ; height : 200 px ; width : 200 px ; margin-top : 1 % ; margin-bottom : 1 % ; margin-left : auto ; margin-right : auto ; padding-top : 5 % ; padding-top : 5 % ; padding-right : auto ; padding-left : auto ; border-width : 1 px ; border-style : solid ; border-color : #264653 ; } Did you pick it up? If not, look again until you understand it for yourself. Do not move on until you got it!","title":"The CSS Box Model"},{"location":"module-1/theBoxModel/#box-model-visualizer","text":"We'll definitely be re-visiting this visualizer but it may be a good introduction for you now. This CSS Box Model Visualizer is a nifty tool built by Caroline Artz to help people see how each property on the element effects the visual representation of the element on the screen. Each of the sliders are labeled with the actual properties you could type in CSS and the values you see are actual values you could code in CSS. And the changing box at the bottom right is what the element would look like. Try it! Box Model Visualizer In the upcoming lessons we'll dig a little deeper into the four categories of the CSS Box Model: Content Height & Width Margin Border Padding In addition to knowing the Box Model in your head, your browser's developer Tools offer a visualization of each element. Just open your browser's devtools, hover over an element, then click to select the element. In the DevTool Tray you should see the \"Elements\" Tab highlighted at the top-left and to the right you'll see two sub-tabs named \"Styles\" and \"Computed\". The \"Styles\" tab will list all of the CSS rules that are applied to that element including rules that are overridden (denoted by a strike-through). Under the \"Computed\" tab you'll see a box with colors of blue(content), green(padding), yellow(border), orange(margin) along with numbers indicating the value in pixels. Keep this tool handy as you learn the properties of the Box Model and for the rest of your career!!","title":"Box Model Visualizer"},{"location":"module-1/theBoxModel/#additional-resources","text":"See It - The Box Model CSS Tricks: The CSS Box Model Box Model, Sizing, Shadow","title":"Additional Resources"}]}