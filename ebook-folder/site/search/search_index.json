{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Web 101: Intro to the Web Objective Statement Students who have completed this course will be able to navigate and understand the DOM, use HTML elements and their attributes to style them using CSS rules, and handle DOM events with JavaScript functions. By the end of the course, students will have built multiple static web pages and practiced the skills to build a functional static web page. These skills will transfer directly to the students\u2019 graduation app, completed in their 400 level course. In the students\u2019 200 level course, they will learn to program small applications before learning to structure data and serve it over the internet in their 300 level course. Class Structure and Expectations This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements. To Pass This Class (and all others) To pass Web 101 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Pitch to the class your idea of an app to build for your Capstone Project. Path to Success Students are expected to spend their weekends preparing for the next week of class by watching videos, reading tutorials, and working through examples. Additionally, there is a \"Career Readiness\" reading, video, or activity each week. Thus each week you will learn important skills that will help you secure employment upon completion of the course. Failure to complete the work outside of class will lead to failure in the class. Our philosophy is \"learn by doing\". We engage our students in the problem solving process as opposed to relying heavily on lectures. Our instructors, who are real developers, facilitate learning through guiding your progress as you work through projects in class. In these short eight weeks we have with you, we cannot possibly teach you everything there is to know about web development. You will not even learn it all in a career of web development. But we can hope to teach you to become an active learner, an engaged participant, an avid problem solver, and an enthusiastic entrepreneur in your learning journey which will soon become your career. We will lay out for you content that, if read, watched, practiced, and absorbed, will give you a strong foundation in learning every other skill needed to be a successful developer. We will give you challenges that if you face now will give you the know-how, the confidence and skills to tackle any challenge in the workplace. To be successful in this course, you must spend 10-15 hours outside of class completing every \"Pre-Homework\" assignment before class and continue to reference the assignment during and after class. Our class structure follows the flipped classroom model where students learn on their own and bring their questions to class. Class begins by reviewing the \"Questions for Discussion\" of the \"Pre-Homework\", and the majority of class time is spent working on projects. Much of learning to code means understanding what is possible. You are not expected to memorize anything. The important thing is that you are able to ask the right questions to find answers and solve problems. Remember to use this book and every resource you come across, including your classmates, as you progress as a developer here and after school. How To Use This Textbook Video For more information see Additional Resources","title":"Home"},{"location":"#welcome-to-web-101-intro-to-the-web","text":"","title":"Welcome to Web 101: Intro to the Web"},{"location":"#objective-statement","text":"Students who have completed this course will be able to navigate and understand the DOM, use HTML elements and their attributes to style them using CSS rules, and handle DOM events with JavaScript functions. By the end of the course, students will have built multiple static web pages and practiced the skills to build a functional static web page. These skills will transfer directly to the students\u2019 graduation app, completed in their 400 level course. In the students\u2019 200 level course, they will learn to program small applications before learning to structure data and serve it over the internet in their 300 level course.","title":"Objective Statement"},{"location":"#class-structure-and-expectations","text":"This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements.","title":"Class Structure and Expectations"},{"location":"#to-pass-this-class-and-all-others","text":"To pass Web 101 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Pitch to the class your idea of an app to build for your Capstone Project.","title":"To Pass This Class (and all others)"},{"location":"#path-to-success","text":"Students are expected to spend their weekends preparing for the next week of class by watching videos, reading tutorials, and working through examples. Additionally, there is a \"Career Readiness\" reading, video, or activity each week. Thus each week you will learn important skills that will help you secure employment upon completion of the course. Failure to complete the work outside of class will lead to failure in the class. Our philosophy is \"learn by doing\". We engage our students in the problem solving process as opposed to relying heavily on lectures. Our instructors, who are real developers, facilitate learning through guiding your progress as you work through projects in class. In these short eight weeks we have with you, we cannot possibly teach you everything there is to know about web development. You will not even learn it all in a career of web development. But we can hope to teach you to become an active learner, an engaged participant, an avid problem solver, and an enthusiastic entrepreneur in your learning journey which will soon become your career. We will lay out for you content that, if read, watched, practiced, and absorbed, will give you a strong foundation in learning every other skill needed to be a successful developer. We will give you challenges that if you face now will give you the know-how, the confidence and skills to tackle any challenge in the workplace. To be successful in this course, you must spend 10-15 hours outside of class completing every \"Pre-Homework\" assignment before class and continue to reference the assignment during and after class. Our class structure follows the flipped classroom model where students learn on their own and bring their questions to class. Class begins by reviewing the \"Questions for Discussion\" of the \"Pre-Homework\", and the majority of class time is spent working on projects. Much of learning to code means understanding what is possible. You are not expected to memorize anything. The important thing is that you are able to ask the right questions to find answers and solve problems. Remember to use this book and every resource you come across, including your classmates, as you progress as a developer here and after school.","title":"Path to Success"},{"location":"#how-to-use-this-textbook-video","text":"For more information see Additional Resources","title":"How To Use This Textbook Video"},{"location":"additionalResources/blogPrompts/","text":"Blog Prompts Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story. Class 2 - Prompt 101 [ ] Class 4 - Prompt 102 [ ] Class 6 - Prompt 103 [ ] Class 8 - Prompt 104 [ ] Class 10 - Prompt 105 [ ] Class 12 - Prompt 106 [ ] Class 14 - Prompt 107 [ ] Class 16 - Prompt 108 [ ]","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#blog-prompts","text":"Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story.","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#class-2-prompt-101","text":"[ ]","title":"Class 2 - Prompt 101"},{"location":"additionalResources/blogPrompts/#class-4-prompt-102","text":"[ ]","title":"Class 4 - Prompt 102"},{"location":"additionalResources/blogPrompts/#class-6-prompt-103","text":"[ ]","title":"Class 6 - Prompt 103"},{"location":"additionalResources/blogPrompts/#class-8-prompt-104","text":"[ ]","title":"Class 8 - Prompt 104"},{"location":"additionalResources/blogPrompts/#class-10-prompt-105","text":"[ ]","title":"Class 10 - Prompt 105"},{"location":"additionalResources/blogPrompts/#class-12-prompt-106","text":"[ ]","title":"Class 12 - Prompt 106"},{"location":"additionalResources/blogPrompts/#class-14-prompt-107","text":"[ ]","title":"Class 14 - Prompt 107"},{"location":"additionalResources/blogPrompts/#class-16-prompt-108","text":"[ ]","title":"Class 16 - Prompt 108"},{"location":"additionalResources/developSeries/","text":"Develop Series Class 1 - Growth Mindset vs Fixed Mindset","title":"Develop Series Collection"},{"location":"additionalResources/developSeries/#develop-series","text":"Class 1 - Growth Mindset vs Fixed Mindset","title":"Develop Series"},{"location":"additionalResources/gitCommands/","text":"Git Commands Useful Git Commands git init - initialize a local folder as a git repo to be tracked and push to the cloud git branch branch_name - Create the branch on your local machine called \"branch_name\". git checkout -b branch_name - Create the branch on your local machine and switch into this branch. git checkout branch_name - Switch into this branch. git status - Check the status of tracked/untracked changed files git add fileName.js - Add the file \"fileName.js\" to be tracked for the next commit. git add . - Add all changed files to be tracked. git commit -m \"message\" - Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name - Push the commit to the branch \"branch_name\" git pull - Pulls down changes from the repo to bring your local codebase up-to-date","title":"Git Commands"},{"location":"additionalResources/gitCommands/#git-commands","text":"","title":"Git Commands"},{"location":"additionalResources/gitCommands/#useful-git-commands","text":"git init - initialize a local folder as a git repo to be tracked and push to the cloud git branch branch_name - Create the branch on your local machine called \"branch_name\". git checkout -b branch_name - Create the branch on your local machine and switch into this branch. git checkout branch_name - Switch into this branch. git status - Check the status of tracked/untracked changed files git add fileName.js - Add the file \"fileName.js\" to be tracked for the next commit. git add . - Add all changed files to be tracked. git commit -m \"message\" - Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name - Push the commit to the branch \"branch_name\" git pull - Pulls down changes from the repo to bring your local codebase up-to-date","title":"Useful Git Commands"},{"location":"additionalResources/graduationPrerequisites/","text":"Graduation Prerequisites A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/graduationPrerequisites/#graduation-prerequisites","text":"A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/interviewChallenges/","text":"Interview Challenges Why Train for Interviews? Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor): How to Solve Your Challenge Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home. The Prompts Class 1 Prompt 1: Title - description Class 2 Prompt 1: Title - description Class 3 Prompt 1: Title - description Class 4 Prompt 1: Title - description Class 5 Prompt 1: Title - description Class 6 Prompt 1: Title - description Class 7 Prompt 1: Title - description Class 8 Prompt 1: Title - description Class 9 Prompt 1: Title - description Class 10 Prompt 1: Title - description Class 11 Prompt 1: Title - description Class 12 Prompt 1: Title - description Class 13 Prompt 1: Title - description Class 14 Prompt 1: Title - description Class 15 Prompt 1: Title - description Class 16 Prompt 1: Title - description","title":"Interview Training"},{"location":"additionalResources/interviewChallenges/#interview-challenges","text":"","title":"Interview Challenges"},{"location":"additionalResources/interviewChallenges/#why-train-for-interviews","text":"Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor):","title":"Why Train for Interviews?"},{"location":"additionalResources/interviewChallenges/#how-to-solve-your-challenge","text":"Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home.","title":"How to Solve Your Challenge"},{"location":"additionalResources/interviewChallenges/#the-prompts","text":"","title":"The Prompts"},{"location":"additionalResources/interviewChallenges/#class-1","text":"Prompt 1: Title - description","title":"Class 1"},{"location":"additionalResources/interviewChallenges/#class-2","text":"Prompt 1: Title - description","title":"Class 2"},{"location":"additionalResources/interviewChallenges/#class-3","text":"Prompt 1: Title - description","title":"Class 3"},{"location":"additionalResources/interviewChallenges/#class-4","text":"Prompt 1: Title - description","title":"Class 4"},{"location":"additionalResources/interviewChallenges/#class-5","text":"Prompt 1: Title - description","title":"Class 5"},{"location":"additionalResources/interviewChallenges/#class-6","text":"Prompt 1: Title - description","title":"Class 6"},{"location":"additionalResources/interviewChallenges/#class-7","text":"Prompt 1: Title - description","title":"Class 7"},{"location":"additionalResources/interviewChallenges/#class-8","text":"Prompt 1: Title - description","title":"Class 8"},{"location":"additionalResources/interviewChallenges/#class-9","text":"Prompt 1: Title - description","title":"Class 9"},{"location":"additionalResources/interviewChallenges/#class-10","text":"Prompt 1: Title - description","title":"Class 10"},{"location":"additionalResources/interviewChallenges/#class-11","text":"Prompt 1: Title - description","title":"Class 11"},{"location":"additionalResources/interviewChallenges/#class-12","text":"Prompt 1: Title - description","title":"Class 12"},{"location":"additionalResources/interviewChallenges/#class-13","text":"Prompt 1: Title - description","title":"Class 13"},{"location":"additionalResources/interviewChallenges/#class-14","text":"Prompt 1: Title - description","title":"Class 14"},{"location":"additionalResources/interviewChallenges/#class-15","text":"Prompt 1: Title - description","title":"Class 15"},{"location":"additionalResources/interviewChallenges/#class-16","text":"Prompt 1: Title - description","title":"Class 16"},{"location":"additionalResources/keyboardShortcuts/","text":"Keyboard Shortcuts Short-cuts macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#keyboard-shortcuts","text":"","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#short-cuts","text":"macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Short-cuts"},{"location":"additionalResources/presentationsQualifications/","text":"Presentations Qualifications To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director. Capstone Project Presentation Guidelines The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Presentations Qualifications"},{"location":"additionalResources/presentationsQualifications/#presentations-qualifications","text":"To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director.","title":"Presentations Qualifications"},{"location":"additionalResources/presentationsQualifications/#capstone-project-presentation-guidelines","text":"The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Capstone Project Presentation Guidelines"},{"location":"additionalResources/studentPresentations/","text":"Daily Student Presentations Class 5 - Organize and Coordinate who and when students are presenting. Class 6 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 7 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 8 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 9 - todo todo Class 10 - todo todo Class 11 - todo todo Class 12 - todo todo Class 13 - todo todo Class 14 - todo todo Class 15 - todo todo Class 16 - todo todo Class 17 - todo todo Class 18 - todo todo Class 19 - todo todo Class 20 - todo todo","title":"Student Presentations"},{"location":"additionalResources/studentPresentations/#daily-student-presentations","text":"Class 5 - Organize and Coordinate who and when students are presenting. Class 6 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 7 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 8 - Pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 9 - todo todo Class 10 - todo todo Class 11 - todo todo Class 12 - todo todo Class 13 - todo todo Class 14 - todo todo Class 15 - todo todo Class 16 - todo todo Class 17 - todo todo Class 18 - todo todo Class 19 - todo todo Class 20 - todo todo","title":"Daily Student Presentations"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/","text":"Class One: Questions for Discussion","title":"Day 1 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/#class-one-questions-for-discussion","text":"","title":"Class One: Questions for Discussion"},{"location":"module-1/classOutlineTemplate/","text":"Class #: Title Instructor Only Content - HIDE FROM STUDENTS Greet, Outline, and Objectify Today we're going to: GENERIC OBJECTIVE: By re-engaging with previously learned knowledge and applying it to a new challenge the student will deepen their understanding and be prepared to creatively reuse these techniques in new ways. GENERIC OBJECTIVE: After learning new content through individual presentations and exploring their uses with familiar tasks the student will gain confidence in their abilities to effectively solve new problems in the future. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 10-15 minutes First Question: Tell me what you learned. ..? Interview Challenge, 10-15 minutes Prompt: Student Presentations, 10-15 minutes Prompt 1: Prompt 2: Creation Time, 60-90 minutes Push Yourself Further Exit Recap, Attendance, and Reminders, 5 mins","title":"Class 2 TITLE"},{"location":"module-1/classOutlineTemplate/#class-title","text":"","title":"Class #: Title"},{"location":"module-1/classOutlineTemplate/#instructor-only-content-hide-from-students","text":"","title":"Instructor Only Content - HIDE FROM STUDENTS"},{"location":"module-1/classOutlineTemplate/#greet-outline-and-objectify","text":"Today we're going to: GENERIC OBJECTIVE: By re-engaging with previously learned knowledge and applying it to a new challenge the student will deepen their understanding and be prepared to creatively reuse these techniques in new ways. GENERIC OBJECTIVE: After learning new content through individual presentations and exploring their uses with familiar tasks the student will gain confidence in their abilities to effectively solve new problems in the future. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/classOutlineTemplate/#questions-for-student-led-discussion-10-15-minutes","text":"First Question: Tell me what you learned. ..?","title":"Questions for Student Led Discussion, 10-15 minutes"},{"location":"module-1/classOutlineTemplate/#interview-challenge-10-15-minutes","text":"Prompt:","title":"Interview Challenge, 10-15 minutes"},{"location":"module-1/classOutlineTemplate/#student-presentations-10-15-minutes","text":"Prompt 1: Prompt 2:","title":"Student Presentations, 10-15 minutes"},{"location":"module-1/classOutlineTemplate/#creation-time-60-90-minutes","text":"","title":"Creation Time, 60-90 minutes"},{"location":"module-1/classOutlineTemplate/#push-yourself-further","text":"","title":"Push Yourself Further"},{"location":"module-1/classOutlineTemplate/#exit-recap-attendance-and-reminders-5-mins","text":"","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/lessonOutlineTemplate/","text":"Pre-Class Lesson 1: The Internet/Web, Our Job as Developers, and Ways to Think About It How The Internet Works In this course we'll be learning how to build websites. No, not apps yet but trust that the technology used for apps is the same technology used to build website and anything you'll ever want to build in the future, is also built on the foundations we'll learn in this course..... What is the Internet? The internet is a continuous connection of various computer and devices that includes your phone, computer, watch, and doorbell. More here... How Does it Work? In order for these devices to talk to one another they must rely on a series of steps that detail how, when, and what data transfers look like. More here... Three Jobs of a Web Developer At any given point of a web developer's typical work day they are doing one these three jobs: 1 - Storing Data 2 - Moving & Manipulating Data 3 - Rendering Data Ways of Thinking The way computers work does seem like magic. more here... What Layer of Abstraction are We? Now that we've know about electrons passing through our phone screen and binary representing red actions, where are we actually developing? What level of abstraction are we working in if not in electrons or binary? In this course and the entire program, we'll be building websites and web apps that depend on the pre-determined structure of a computer and the protocol we've just learned about earlier. That structure and protocol are just two of the many layers of abstracted tools that we get to use to build! To answer the question, in web development we are working at the 10th layer of abstraction. 1st - Electrons and Transistors 2nd - DRAM memory and a CPU using binary(1s & 0s) 3rd - Bits & Bytes 4th - Logic Gates - AND, NOT, NAND, OR, XOR, ADDER 5th - Functions - small packets of instructions 6th - Operating System - computing the memory with functions 7th - Service Workers - small but massively important programs that keep your computer running smoothly 8th - Interpreters - programs used to interpret instructions from other apps into binary 9th - Browser App - an app that interprets your HTML, CSS, and JavaScript into visual elements with executable actions. 10th - HTTP, HTML, CSS, JS IT IS MOST IMPORTANT THAT YOU REALIZE YOU DON'T NEED TO UNDERSTAND THE FIRST 9 LAYERS OF ABSTRACTION! Use this list to appreciate the work many scientists and engineers have done to create the environment we are lucky to inherit and develop within AND to know that this layers of abstraction create the fundamentals of how computers operate and communicate with one another. This means that our HTML, CSS, and JS code is just following the same foundational principals of computer science. Now all that's left to do is learn to use these abstracted tools(layers) to build website and web apps! To learn and use these tools/abstractions doesn't require CS degrees or knowledge of bits, bytes, interpreters, or service workers. It only requires you to see this development world from two perspectives at the same time while keeping another idea in mind, Object Modeling. The Two Perspectives + Object Modeling Perspective One: Objects are how the computer keeps up with memory and interacts with the world and people around it? Perspective Two: We use code to organize our thoughts about how to access that memory and give instructions on what to do with that memory to both the computer and other human-beings(fellow developers). In the next session we'll explore the following questions: 1 2 * How do we accomplish the invisible task of seeing the memory of computers? * How does code represent our programming intentions to the computer? To do this we'll break them down in three parts: Objects, Object Modeling, Code as Communication. Part One: Objects Computers don't have eyes or ears...yet. Part Two: Object Modeling. Object Modeling... try it! Draw a large box nearly the size of a sheet of notebook paper. At the top label it window . Inside draw another box nearly 3/4 the size of the first box. Label this one document . > Inside the window box create two lists titled: \"Properties\" & \"Methods\" > Under the \"Properties\" list write down the first five properties you find at this website: W3S Window Object NOTICE: The 2nd property is \"Console\" and the 4th is \"Document\" These are two objects you've already come across; the \"Console\" is the one you opened in your Inspect > Developer Tools earlier and typed \"window\". And the \"Document\" is the other box on your page!! > In the \"Methods\" list write the first 5 methods you see on that same website: W3S Window Object > Repeat these steps for the smaller box, the \"Document\" object, but with this page instead: W3S Document Object NOTE: the ones with parenthesis() following them are methods and the ones without are properties. What you see on your paper is a simple model of two objects, Window and Document, and shorts lists of each of their properties and methods. This is Object Modeling. And this is how we will talk about EVERYTHING we learn. Everything is an object with properties, methods, and events. To continue on this Object Modeling exploration we'll need to cover some new terms: Properties , Methods , and Events . These three new terms are called the members of an object. Properties All objects have properties . Properties are descriptions of the object. If you were an object you would have properties that might include: name: , gender: , height: , weight: , age: , DOB: , job: . The same goes for our web page objects. All visible objects have color: , height: , width: , z-index: , font-size: , etc... Properties are things that describe what something is, what it contains, and what it looks like when rendered. You'll also see properties referred to as attributes and keys while the value that is assigned to each of them (the part after the colon and before comma) is called a value leading to the common expression: key/value pairs , i.e. name: \"Rebecca\", , age: 33, or width: 500px, Methods Most objects have methods . Methods are like special properties in that they don't describe the object but instead they describe actions the object can do! You might have methods like eat() , sleep() , run() , and beStill() . However, as you saw in your exercise, objects on our web pages might have methods like: confirm() , clearInterval() , createElement() , execCommand() and open() because they are computer object-things and not human-being things with needs like food, water, and shelter. Methods are also called built-in functions because they work like functions. They're small sets of instructions that can be executed just like other functions. Now, we haven't fully covered functions yet but suffice it to say that if you just learned how to mix cocktails you would now have two new functions written into your system that are maybe called: mixIngredients() and shakeVigoursly() . So every time you need to make a cocktail for your party you would first call mixIngredients() then shakeVigoursly() . Not everyone needs or want to learn how to make cocktails but everyone needs to eat, sleep, and drink. So the good Lord gave us all built-in functions/ methods called: sleep() , eat() , and drink() . In web development, the reason we have methods is because some functions need to be called regularly, by all developers for most apps and don't need to be special or customized. So the engineers of HTML created \"built-in functions\" that are readily available to be used by us. The \"built-in\" functions are methods . Events Most objects also have a third category of members : Events . You can think of events as interactions. Interactions that happen between objects and other objects or objects and humans. See, we can move our mouse, place our icon on an element on our screen, and click on that icon. In that single move there are three distinct events/interactions that happen: 1) onmousemove , onmouseenter , and onmousedown . The events are built into object so that they can be interacted with. We have event like: lookedAt , smiledAt , handShaked , poked , hugged , shoved , greeted . All of these are ways in which our bodies are interacted with the world around them. In web development terms, these Events are used to \"capture\" an interaction and then do something because of it. For the most part all of these built-in events are attached to a \"blank\"; in that, they fire every time the event happens but nothing is triggered. It's up to us, the developer to create reactions and then attach them to the the events. So we might say something like: onmouseenter=\"openGreetingWindow()\" . This could be equivalent to our bodies being programmed with: smiledAt=\"smileBack()\" . At this point you may be a bit confused on the difference between methods and events so for now separate them by this distinctions: 1 2 3 * Events capture interactions with the object from the outside world, in order for us to attach instructions to be carried out when the event happens. * Methods are actions the the object can take to outwardly interact with the world. * And properties are bits information that describe the object. While object modeling is a great way to understand how a computer interacts with the world it is not how we communicate to the computer our programming intentions. The computer, frankly doesn't know anything about this Object Modeling stuff. It just knows about objects because what we interpret as a \"model\" is the complete and total reality of a computer. It knows nothing else. Because of this, we have to use a language that communicates to the computer our intentions with its objects their subsequent properties, methods, and events. This language is what generally call code . The great thing about learning code now is that you've already built-thing with three different coding languages and you've been reading code in all of these textual examples. Part Three: Code as Communication. In order for us to communicate our programming needs and intentions we need a language that can be interpreted by the computer and understood by humans. This is what we call code . Code comes in many different names and flavors that we call languages, or programming languages . We use programming languages to communicate to both humans and computers what our programming needs and intentions are. Notice earlier, we used the word \"interpret\" for computers and \"understand\" for humans. This is because, as long as your fellow developers know the syntax and semantics of the language you chose to write, they will understand what you meant. But the computer must \"interpret\" what you wrote because the computer doesn't actually know JavaScript from Closure or Haskell. Our computers use interpreters that convert your programming language of choice to binary before it executes the program you built. Programming languages are similar to our human languages in that they were all created to represent and communicate our needs and intentions. It doesn't matter what language you are speaking...as long as you are speaking to someone who understands the language they will know what you're saying. This goes for computers as well. When we're building websites and web app we're talking to web browsers who know three languages: HTML, JS, and CSS. If we are building iOS apps we're talking to an operating system that understands Swift and if we're build apps for Android we're talking to a system that understands Java. All languages are built in similar ways because they all have to accomplish the same goals: store data, move data, and render data. In this way, you can feel confident that once you now how to program in JavaScript, learning to program with Python, Swift, Java, Go, or C# will come much easier! This layer of \"abstraction\" is not so important for us to learn, so much, as it is helpful for us to understand that programming languages like JavaScript are just languages with nouns, verbs, sentence structure, actions, and objects that all represent to the computer our programming needs and intention of how to we would like to move, manipulate, and display the objects our computers know about. In Summary: Our Three Jobs, Object Modeling & Code as Communication Now that we've learned our three jobs as web developers are to store, move, and render data inside an invisible world with 10 levels of abstractions with a computer that see only objects with properties, methods, & events and interprets only code it recognizes we have our work cut out for us. How do we do it? We first have to remember that our three jobs as web developers is to store data, move data, and render data. The next is to always draw out our objects on paper, whiteboard and in our mind so we don't forget that everything is an object. Third, we have to practice gratitude for the languages we get to learn and be happy that we get to create stories and books with these programming languages instead of new words for every thought. After that, we must always reference our docs. Docs are how to learn and remember object, properties, methods, and events . And lastly, we have to keep learning and trusting that we can do this!","title":"LESSON TITLE"},{"location":"module-1/lessonOutlineTemplate/#pre-class-lesson-1-the-internetweb-our-job-as-developers-and-ways-to-think-about-it","text":"","title":"Pre-Class Lesson 1: The Internet/Web, Our Job as Developers, and Ways to Think About It"},{"location":"module-1/lessonOutlineTemplate/#how-the-internet-works","text":"In this course we'll be learning how to build websites. No, not apps yet but trust that the technology used for apps is the same technology used to build website and anything you'll ever want to build in the future, is also built on the foundations we'll learn in this course.....","title":"How The Internet Works"},{"location":"module-1/lessonOutlineTemplate/#what-is-the-internet","text":"The internet is a continuous connection of various computer and devices that includes your phone, computer, watch, and doorbell. More here...","title":"What is the Internet?"},{"location":"module-1/lessonOutlineTemplate/#how-does-it-work","text":"In order for these devices to talk to one another they must rely on a series of steps that detail how, when, and what data transfers look like. More here...","title":"How Does it Work?"},{"location":"module-1/lessonOutlineTemplate/#three-jobs-of-a-web-developer","text":"At any given point of a web developer's typical work day they are doing one these three jobs: 1 - Storing Data 2 - Moving & Manipulating Data 3 - Rendering Data","title":"Three Jobs of a Web Developer"},{"location":"module-1/lessonOutlineTemplate/#ways-of-thinking","text":"The way computers work does seem like magic. more here...","title":"Ways of Thinking"},{"location":"module-1/lessonOutlineTemplate/#what-layer-of-abstraction-are-we","text":"Now that we've know about electrons passing through our phone screen and binary representing red actions, where are we actually developing? What level of abstraction are we working in if not in electrons or binary? In this course and the entire program, we'll be building websites and web apps that depend on the pre-determined structure of a computer and the protocol we've just learned about earlier. That structure and protocol are just two of the many layers of abstracted tools that we get to use to build! To answer the question, in web development we are working at the 10th layer of abstraction. 1st - Electrons and Transistors 2nd - DRAM memory and a CPU using binary(1s & 0s) 3rd - Bits & Bytes 4th - Logic Gates - AND, NOT, NAND, OR, XOR, ADDER 5th - Functions - small packets of instructions 6th - Operating System - computing the memory with functions 7th - Service Workers - small but massively important programs that keep your computer running smoothly 8th - Interpreters - programs used to interpret instructions from other apps into binary 9th - Browser App - an app that interprets your HTML, CSS, and JavaScript into visual elements with executable actions. 10th - HTTP, HTML, CSS, JS IT IS MOST IMPORTANT THAT YOU REALIZE YOU DON'T NEED TO UNDERSTAND THE FIRST 9 LAYERS OF ABSTRACTION! Use this list to appreciate the work many scientists and engineers have done to create the environment we are lucky to inherit and develop within AND to know that this layers of abstraction create the fundamentals of how computers operate and communicate with one another. This means that our HTML, CSS, and JS code is just following the same foundational principals of computer science. Now all that's left to do is learn to use these abstracted tools(layers) to build website and web apps! To learn and use these tools/abstractions doesn't require CS degrees or knowledge of bits, bytes, interpreters, or service workers. It only requires you to see this development world from two perspectives at the same time while keeping another idea in mind, Object Modeling.","title":"What Layer of Abstraction are We?"},{"location":"module-1/lessonOutlineTemplate/#the-two-perspectives-object-modeling","text":"Perspective One: Objects are how the computer keeps up with memory and interacts with the world and people around it? Perspective Two: We use code to organize our thoughts about how to access that memory and give instructions on what to do with that memory to both the computer and other human-beings(fellow developers). In the next session we'll explore the following questions: 1 2 * How do we accomplish the invisible task of seeing the memory of computers? * How does code represent our programming intentions to the computer? To do this we'll break them down in three parts: Objects, Object Modeling, Code as Communication.","title":"The Two Perspectives + Object Modeling"},{"location":"module-1/lessonOutlineTemplate/#part-one-objects","text":"Computers don't have eyes or ears...yet.","title":"Part One: Objects"},{"location":"module-1/lessonOutlineTemplate/#part-two-object-modeling","text":"Object Modeling... try it! Draw a large box nearly the size of a sheet of notebook paper. At the top label it window . Inside draw another box nearly 3/4 the size of the first box. Label this one document . > Inside the window box create two lists titled: \"Properties\" & \"Methods\" > Under the \"Properties\" list write down the first five properties you find at this website: W3S Window Object NOTICE: The 2nd property is \"Console\" and the 4th is \"Document\" These are two objects you've already come across; the \"Console\" is the one you opened in your Inspect > Developer Tools earlier and typed \"window\". And the \"Document\" is the other box on your page!! > In the \"Methods\" list write the first 5 methods you see on that same website: W3S Window Object > Repeat these steps for the smaller box, the \"Document\" object, but with this page instead: W3S Document Object NOTE: the ones with parenthesis() following them are methods and the ones without are properties. What you see on your paper is a simple model of two objects, Window and Document, and shorts lists of each of their properties and methods. This is Object Modeling. And this is how we will talk about EVERYTHING we learn. Everything is an object with properties, methods, and events. To continue on this Object Modeling exploration we'll need to cover some new terms: Properties , Methods , and Events . These three new terms are called the members of an object.","title":"Part Two: Object Modeling."},{"location":"module-1/lessonOutlineTemplate/#properties","text":"All objects have properties . Properties are descriptions of the object. If you were an object you would have properties that might include: name: , gender: , height: , weight: , age: , DOB: , job: . The same goes for our web page objects. All visible objects have color: , height: , width: , z-index: , font-size: , etc... Properties are things that describe what something is, what it contains, and what it looks like when rendered. You'll also see properties referred to as attributes and keys while the value that is assigned to each of them (the part after the colon and before comma) is called a value leading to the common expression: key/value pairs , i.e. name: \"Rebecca\", , age: 33, or width: 500px,","title":"Properties"},{"location":"module-1/lessonOutlineTemplate/#methods","text":"Most objects have methods . Methods are like special properties in that they don't describe the object but instead they describe actions the object can do! You might have methods like eat() , sleep() , run() , and beStill() . However, as you saw in your exercise, objects on our web pages might have methods like: confirm() , clearInterval() , createElement() , execCommand() and open() because they are computer object-things and not human-being things with needs like food, water, and shelter. Methods are also called built-in functions because they work like functions. They're small sets of instructions that can be executed just like other functions. Now, we haven't fully covered functions yet but suffice it to say that if you just learned how to mix cocktails you would now have two new functions written into your system that are maybe called: mixIngredients() and shakeVigoursly() . So every time you need to make a cocktail for your party you would first call mixIngredients() then shakeVigoursly() . Not everyone needs or want to learn how to make cocktails but everyone needs to eat, sleep, and drink. So the good Lord gave us all built-in functions/ methods called: sleep() , eat() , and drink() . In web development, the reason we have methods is because some functions need to be called regularly, by all developers for most apps and don't need to be special or customized. So the engineers of HTML created \"built-in functions\" that are readily available to be used by us. The \"built-in\" functions are methods .","title":"Methods"},{"location":"module-1/lessonOutlineTemplate/#events","text":"Most objects also have a third category of members : Events . You can think of events as interactions. Interactions that happen between objects and other objects or objects and humans. See, we can move our mouse, place our icon on an element on our screen, and click on that icon. In that single move there are three distinct events/interactions that happen: 1) onmousemove , onmouseenter , and onmousedown . The events are built into object so that they can be interacted with. We have event like: lookedAt , smiledAt , handShaked , poked , hugged , shoved , greeted . All of these are ways in which our bodies are interacted with the world around them. In web development terms, these Events are used to \"capture\" an interaction and then do something because of it. For the most part all of these built-in events are attached to a \"blank\"; in that, they fire every time the event happens but nothing is triggered. It's up to us, the developer to create reactions and then attach them to the the events. So we might say something like: onmouseenter=\"openGreetingWindow()\" . This could be equivalent to our bodies being programmed with: smiledAt=\"smileBack()\" . At this point you may be a bit confused on the difference between methods and events so for now separate them by this distinctions: 1 2 3 * Events capture interactions with the object from the outside world, in order for us to attach instructions to be carried out when the event happens. * Methods are actions the the object can take to outwardly interact with the world. * And properties are bits information that describe the object. While object modeling is a great way to understand how a computer interacts with the world it is not how we communicate to the computer our programming intentions. The computer, frankly doesn't know anything about this Object Modeling stuff. It just knows about objects because what we interpret as a \"model\" is the complete and total reality of a computer. It knows nothing else. Because of this, we have to use a language that communicates to the computer our intentions with its objects their subsequent properties, methods, and events. This language is what generally call code . The great thing about learning code now is that you've already built-thing with three different coding languages and you've been reading code in all of these textual examples.","title":"Events"},{"location":"module-1/lessonOutlineTemplate/#part-three-code-as-communication","text":"In order for us to communicate our programming needs and intentions we need a language that can be interpreted by the computer and understood by humans. This is what we call code . Code comes in many different names and flavors that we call languages, or programming languages . We use programming languages to communicate to both humans and computers what our programming needs and intentions are. Notice earlier, we used the word \"interpret\" for computers and \"understand\" for humans. This is because, as long as your fellow developers know the syntax and semantics of the language you chose to write, they will understand what you meant. But the computer must \"interpret\" what you wrote because the computer doesn't actually know JavaScript from Closure or Haskell. Our computers use interpreters that convert your programming language of choice to binary before it executes the program you built. Programming languages are similar to our human languages in that they were all created to represent and communicate our needs and intentions. It doesn't matter what language you are speaking...as long as you are speaking to someone who understands the language they will know what you're saying. This goes for computers as well. When we're building websites and web app we're talking to web browsers who know three languages: HTML, JS, and CSS. If we are building iOS apps we're talking to an operating system that understands Swift and if we're build apps for Android we're talking to a system that understands Java. All languages are built in similar ways because they all have to accomplish the same goals: store data, move data, and render data. In this way, you can feel confident that once you now how to program in JavaScript, learning to program with Python, Swift, Java, Go, or C# will come much easier! This layer of \"abstraction\" is not so important for us to learn, so much, as it is helpful for us to understand that programming languages like JavaScript are just languages with nouns, verbs, sentence structure, actions, and objects that all represent to the computer our programming needs and intention of how to we would like to move, manipulate, and display the objects our computers know about.","title":"Part Three: Code as Communication."},{"location":"module-1/lessonOutlineTemplate/#in-summary-our-three-jobs-object-modeling-code-as-communication","text":"Now that we've learned our three jobs as web developers are to store, move, and render data inside an invisible world with 10 levels of abstractions with a computer that see only objects with properties, methods, & events and interprets only code it recognizes we have our work cut out for us. How do we do it? We first have to remember that our three jobs as web developers is to store data, move data, and render data. The next is to always draw out our objects on paper, whiteboard and in our mind so we don't forget that everything is an object. Third, we have to practice gratitude for the languages we get to learn and be happy that we get to create stories and books with these programming languages instead of new words for every thought. After that, we must always reference our docs. Docs are how to learn and remember object, properties, methods, and events . And lastly, we have to keep learning and trusting that we can do this!","title":"In Summary: Our Three Jobs, Object Modeling &amp; Code as Communication"}]}