{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Web 101: Intro to the Web Objective Statement Students who have completed this course will be able to navigate and understand the DOM, use HTML elements and their attributes to style them using CSS rules, and handle DOM events with JavaScript functions. By the end of the course, students will have built multiple static web pages and practiced the skills to build a functional static web page. These skills will transfer directly to the students\u2019 graduation app, completed in their 400 level course. In the students\u2019 200 level course, they will learn to program small applications before learning to structure data and serve it over the internet in their 300 level course. Class Structure and Expectations This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements. To Pass This Class (and all others) To pass Web 101 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Pitch to the class your idea of an app to build for your Capstone Project. Path to Success Students are expected to spend their weekends preparing for the next week of class by watching videos, reading tutorials, and working through examples. Additionally, there is a \"Career Readiness\" reading, video, or activity each week. Thus each week you will learn important skills that will help you secure employment upon completion of the course. Failure to complete the work outside of class will lead to failure in the class. Our philosophy is \"learn by doing\". We engage our students in the problem solving process as opposed to relying heavily on lectures. Our instructors, who are real developers, facilitate learning through guiding your progress as you work through projects in class. In these short eight weeks we have with you, we cannot possibly teach you everything there is to know about web development. You will not even learn it all in a career of web development. But we can hope to teach you to become an active learner, an engaged participant, an avid problem solver, and an enthusiastic entrepreneur in your learning journey which will soon become your career. We will lay out for you content that, if read, watched, practiced, and absorbed, will give you a strong foundation in learning every other skill needed to be a successful developer. We will give you challenges that if you face now will give you the know-how, the confidence and skills to tackle any challenge in the workplace. To be successful in this course, you must spend 10-15 hours outside of class completing every \"Pre-Homework\" assignment before class and continue to reference the assignment during and after class. Our class structure follows the flipped classroom model where students learn on their own and bring their questions to class. Class begins by reviewing the \"Questions for Discussion\" of the \"Pre-Homework\", and the majority of class time is spent working on projects. Much of learning to code means understanding what is possible. You are not expected to memorize anything. The important thing is that you are able to ask the right questions to find answers and solve problems. Remember to use this book and every resource you come across, including your classmates, as you progress as a developer here and after school. How To Use This Textbook Video For more information see Additional Resources","title":"Home"},{"location":"#welcome-to-web-101-intro-to-the-web","text":"","title":"Welcome to Web 101: Intro to the Web"},{"location":"#objective-statement","text":"Students who have completed this course will be able to navigate and understand the DOM, use HTML elements and their attributes to style them using CSS rules, and handle DOM events with JavaScript functions. By the end of the course, students will have built multiple static web pages and practiced the skills to build a functional static web page. These skills will transfer directly to the students\u2019 graduation app, completed in their 400 level course. In the students\u2019 200 level course, they will learn to program small applications before learning to structure data and serve it over the internet in their 300 level course.","title":"Objective Statement"},{"location":"#class-structure-and-expectations","text":"This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements.","title":"Class Structure and Expectations"},{"location":"#to-pass-this-class-and-all-others","text":"To pass Web 101 you will need to: Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Pitch to the class your idea of an app to build for your Capstone Project.","title":"To Pass This Class (and all others)"},{"location":"#path-to-success","text":"Students are expected to spend their weekends preparing for the next week of class by watching videos, reading tutorials, and working through examples. Additionally, there is a \"Career Readiness\" reading, video, or activity each week. Thus each week you will learn important skills that will help you secure employment upon completion of the course. Failure to complete the work outside of class will lead to failure in the class. Our philosophy is \"learn by doing\". We engage our students in the problem solving process as opposed to relying heavily on lectures. Our instructors, who are real developers, facilitate learning through guiding your progress as you work through projects in class. In these short eight weeks we have with you, we cannot possibly teach you everything there is to know about web development. You will not even learn it all in a career of web development. But we can hope to teach you to become an active learner, an engaged participant, an avid problem solver, and an enthusiastic entrepreneur in your learning journey which will soon become your career. We will lay out for you content that, if read, watched, practiced, and absorbed, will give you a strong foundation in learning every other skill needed to be a successful developer. We will give you challenges that if you face now will give you the know-how, the confidence and skills to tackle any challenge in the workplace. To be successful in this course, you must spend 10-15 hours outside of class completing every \"Pre-Homework\" assignment before class and continue to reference the assignment during and after class. Our class structure follows the flipped classroom model where students learn on their own and bring their questions to class. Class begins by reviewing the \"Questions for Discussion\" of the \"Pre-Homework\", and the majority of class time is spent working on projects. Much of learning to code means understanding what is possible. You are not expected to memorize anything. The important thing is that you are able to ask the right questions to find answers and solve problems. Remember to use this book and every resource you come across, including your classmates, as you progress as a developer here and after school.","title":"Path to Success"},{"location":"#how-to-use-this-textbook-video","text":"For more information see Additional Resources","title":"How To Use This Textbook Video"},{"location":"additionalResources/blogPrompts/","text":"Blog Prompts Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story. Class 1 What excites you about coding? How do you think it can change the world? What does doctype do at the top of your html file do? Why does this need to be specified? Explain how a browser determines what HTML Elements match a CSS selector. What's the difference between and HTML Element and and HTML Tag? In your own words, explain the Cascade of CSS? Explain, to someone you know, the 3 ways to link/use CSS in an HTML file to style a web page. Create a clever title for your blog so that it isn't \"BlogPost_100\". Instead, name it something personal, something that matches your current experience like: \"Dazed & Confused\", \"Wonderful Fun in Code Land\", \"We're Not in Kansas Anymore\", etc. Class 2 Describe one thing you learned in class today. Describe 2 (your choice) pseudo-selectors and discuss what they are used for. What are some of the \"gotchas\"/epiphanies you've had for writing efficient CSS? However your heart tells you to. Class 4 NOTE: Title your blog something other than \"Class 4\". Give it a fitting and fun name for the concepts you're learning or your experience with code. What has your experience learning to code been like so far? What would you change about it? How do you describe the DOM, as you know it so far? Can you explain the difference between coding a website to be responsive and using a mobile-first strategy? What does coding look like to you in your mind? Where do you see yourself working in 365 days from today? What do you want to be working on? Class 6 How is JavaScript different from CSS? In what ways? How are they similar? How do you map the many different DOM methods and properties in your mind? How would you describe them to a non-developer? What do you find surprising about coding so far? Do you find anything easy? What? Why? What's difficult about coding for you? Why? What's cool about Event Listeners? Why are they useful and what more would you like to learn about them? Why are you motivate? Why are you in this class? Class 8 NONE Class 10 How do you describe the feeling of Imposter Syndrome? When does it affect you the most? Why? What have you learned about the tech world that you are happy to know? Why is the way we talk to ourselves in our inner mind so important? What effect can it have on our well-being? What about this course is challenging you the most? How do you think you are growing through it? How has podcast listening influenced the way you think? What has your spare time looked like in-comparison to what it looked like a year ago? Class 12 How has this course changed your outlook on learning? What's changed? Why? When frustration comes up how do you be with it? What's your course of action? Why should we teach to the whole person rather than to just a skill set? What benefits are there to this method? How do you feel about your upcoming project? What do you anticipate while working with a classmate? What benefits will there be to work with someone else? What challenges could come with this partnership? Class 14 None . Focus on your Portfolio Project. Class 16 Think back on your first day of class. How did you think website were built? Now how do you think they're built? What's the difference in your thinking? What have you gained through this course beyond code? Beyond technical savvy? Where do you think you're headed? Why? How? What are you going to do to encourage that? What kinds of projects do you see yourself working on in 10 months? Why is it generally a good idea to position CSS <link> s between <head></head> and JS <script> s, just before </body> ? Do you know of any exceptions? Consider HTML5 as an open web platform. What are the building blocks of HTML5? What's the difference between the :nth-of-type() and :nth-child() selectors? What is CSS-selector specificity, and how does it work? What resources do you use to learn about the latest in front-end development and design?","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#blog-prompts","text":"Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story.","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#class-1","text":"What excites you about coding? How do you think it can change the world? What does doctype do at the top of your html file do? Why does this need to be specified? Explain how a browser determines what HTML Elements match a CSS selector. What's the difference between and HTML Element and and HTML Tag? In your own words, explain the Cascade of CSS? Explain, to someone you know, the 3 ways to link/use CSS in an HTML file to style a web page. Create a clever title for your blog so that it isn't \"BlogPost_100\". Instead, name it something personal, something that matches your current experience like: \"Dazed & Confused\", \"Wonderful Fun in Code Land\", \"We're Not in Kansas Anymore\", etc.","title":"Class 1"},{"location":"additionalResources/blogPrompts/#class-2","text":"Describe one thing you learned in class today. Describe 2 (your choice) pseudo-selectors and discuss what they are used for. What are some of the \"gotchas\"/epiphanies you've had for writing efficient CSS? However your heart tells you to.","title":"Class 2"},{"location":"additionalResources/blogPrompts/#class-4","text":"NOTE: Title your blog something other than \"Class 4\". Give it a fitting and fun name for the concepts you're learning or your experience with code. What has your experience learning to code been like so far? What would you change about it? How do you describe the DOM, as you know it so far? Can you explain the difference between coding a website to be responsive and using a mobile-first strategy? What does coding look like to you in your mind? Where do you see yourself working in 365 days from today? What do you want to be working on?","title":"Class 4"},{"location":"additionalResources/blogPrompts/#class-6","text":"How is JavaScript different from CSS? In what ways? How are they similar? How do you map the many different DOM methods and properties in your mind? How would you describe them to a non-developer? What do you find surprising about coding so far? Do you find anything easy? What? Why? What's difficult about coding for you? Why? What's cool about Event Listeners? Why are they useful and what more would you like to learn about them? Why are you motivate? Why are you in this class?","title":"Class 6"},{"location":"additionalResources/blogPrompts/#class-8","text":"NONE","title":"Class 8"},{"location":"additionalResources/blogPrompts/#class-10","text":"How do you describe the feeling of Imposter Syndrome? When does it affect you the most? Why? What have you learned about the tech world that you are happy to know? Why is the way we talk to ourselves in our inner mind so important? What effect can it have on our well-being? What about this course is challenging you the most? How do you think you are growing through it? How has podcast listening influenced the way you think? What has your spare time looked like in-comparison to what it looked like a year ago?","title":"Class 10"},{"location":"additionalResources/blogPrompts/#class-12","text":"How has this course changed your outlook on learning? What's changed? Why? When frustration comes up how do you be with it? What's your course of action? Why should we teach to the whole person rather than to just a skill set? What benefits are there to this method? How do you feel about your upcoming project? What do you anticipate while working with a classmate? What benefits will there be to work with someone else? What challenges could come with this partnership?","title":"Class 12"},{"location":"additionalResources/blogPrompts/#class-14","text":"None . Focus on your Portfolio Project.","title":"Class 14"},{"location":"additionalResources/blogPrompts/#class-16","text":"Think back on your first day of class. How did you think website were built? Now how do you think they're built? What's the difference in your thinking? What have you gained through this course beyond code? Beyond technical savvy? Where do you think you're headed? Why? How? What are you going to do to encourage that? What kinds of projects do you see yourself working on in 10 months? Why is it generally a good idea to position CSS <link> s between <head></head> and JS <script> s, just before </body> ? Do you know of any exceptions? Consider HTML5 as an open web platform. What are the building blocks of HTML5? What's the difference between the :nth-of-type() and :nth-child() selectors? What is CSS-selector specificity, and how does it work? What resources do you use to learn about the latest in front-end development and design?","title":"Class 16"},{"location":"additionalResources/developSeries/","text":"Develop Series Class 1 - Growth Mindset vs Fixed Mindset Class 2 - The Psychology of Self-Motivation Class 3 - Mindfulness, All It Takes is 10 Minutes Class 7 - 7 Modern Life Habits That Can Be Incredibly Bad For Your Brain Health Class 9: Change Your Mindset, Change the Game The Surprising Solution to Imposter Syndrome Class 10 - Feelings: Handle Them Before They Handle You Class 11 - Craving Attention Makes You Less Creative","title":"Develop Series Collection"},{"location":"additionalResources/developSeries/#develop-series","text":"Class 1 - Growth Mindset vs Fixed Mindset Class 2 - The Psychology of Self-Motivation Class 3 - Mindfulness, All It Takes is 10 Minutes Class 7 - 7 Modern Life Habits That Can Be Incredibly Bad For Your Brain Health Class 9: Change Your Mindset, Change the Game The Surprising Solution to Imposter Syndrome Class 10 - Feelings: Handle Them Before They Handle You Class 11 - Craving Attention Makes You Less Creative","title":"Develop Series"},{"location":"additionalResources/gitCommands/","text":"Git & CLI Commands Useful Git Commands git init >> initialize a local folder as a git repo to be tracked and push to the cloud git branch feature-1-berger >> Create the branch on your local machine called \"feature-1-berger\". git checkout -b feature-1-berger >> Create the branch on your local machine and switch into this branch. git checkout feature-1-berger >> Switch into this branch. git branch >> return the current branch you are working in. git status >> Check the status of tracked/untracked changed files git add fileName.js >> Add the file \"fileName.js\" to be tracked for the next commit. git add -A >> Add all changed files to be tracked. git commit -m \"message\" >> Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name >> Push the commit to the branch \"branch_name\" git pull >> Pulls down changes from the repo to bring your local codebase up-to-date git push \u2014set-upstream origin resume >> set the initial push to know where all future pushes need to go in the gitHub cloud. cd => // change directories cd workspace => // will change to a new folder/directory called workspace ls => // list out the files in that directory List CLI Commands mkdir jsDev >> will make a folder(aka, directory) called \"jsDev\" cd >> change directories cd workspace >> will change to a new folder(aka, directory) called \"workspace\" pwd >> Print Working Directory, will return the name of the current directory you are in. ls >> list out the files in that directory code . >> open the current directory in VS Code (Macs have to install the PATH) touch index.html >> will create a file inside the current directory called \"index.html\" echo \"USERNAME=meathead\" >> .env >> create a file called .env and writes \"USERNAME=meathead\" inside of it. Other useful commands to research mv >> move directory cp >> copy file rm >> remove file or directory tree >> Must install with brew or bash, but is a very useful command to see your entire working directory's tree.","title":"Git & CLI Commands"},{"location":"additionalResources/gitCommands/#git-cli-commands","text":"","title":"Git &amp; CLI Commands"},{"location":"additionalResources/gitCommands/#useful-git-commands","text":"git init >> initialize a local folder as a git repo to be tracked and push to the cloud git branch feature-1-berger >> Create the branch on your local machine called \"feature-1-berger\". git checkout -b feature-1-berger >> Create the branch on your local machine and switch into this branch. git checkout feature-1-berger >> Switch into this branch. git branch >> return the current branch you are working in. git status >> Check the status of tracked/untracked changed files git add fileName.js >> Add the file \"fileName.js\" to be tracked for the next commit. git add -A >> Add all changed files to be tracked. git commit -m \"message\" >> Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name >> Push the commit to the branch \"branch_name\" git pull >> Pulls down changes from the repo to bring your local codebase up-to-date git push \u2014set-upstream origin resume >> set the initial push to know where all future pushes need to go in the gitHub cloud. cd => // change directories cd workspace => // will change to a new folder/directory called workspace ls => // list out the files in that directory","title":"Useful Git Commands"},{"location":"additionalResources/gitCommands/#list-cli-commands","text":"mkdir jsDev >> will make a folder(aka, directory) called \"jsDev\" cd >> change directories cd workspace >> will change to a new folder(aka, directory) called \"workspace\" pwd >> Print Working Directory, will return the name of the current directory you are in. ls >> list out the files in that directory code . >> open the current directory in VS Code (Macs have to install the PATH) touch index.html >> will create a file inside the current directory called \"index.html\" echo \"USERNAME=meathead\" >> .env >> create a file called .env and writes \"USERNAME=meathead\" inside of it.","title":"List CLI Commands"},{"location":"additionalResources/gitCommands/#other-useful-commands-to-research","text":"mv >> move directory cp >> copy file rm >> remove file or directory tree >> Must install with brew or bash, but is a very useful command to see your entire working directory's tree.","title":"Other useful commands to research"},{"location":"additionalResources/graduationPrerequisites/","text":"Graduation Prerequisites A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/graduationPrerequisites/#graduation-prerequisites","text":"A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/interviewChallenges/","text":"Interview Challenges Why Train for Interviews? Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor): How to Solve Your Challenge Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home. The Prompts Class 1 NONE Class 2 Wireframe & Plan - What is wireframing? How do we plan the construction of a web page? How can we use paper and pencil to guide us while coding? As a class, talk through and develop a plan to build the NASA Contact Page. Class 3 Title - Two students, at-a-time, will come up to the board at a time to work with their instructor to wireframe the following website mockups: NOTE: please use the time to create meaningful wireframes with semantic elements and maybe useful CSS pseudo code that can guide your coding for today's project. Resume Challenge Landing Page Challenge Class 4 Title - Two students at a time will come up to the board to work with their instructor to wireframe each of the the three website mockups below. 3 views = 6 students total. Mobile View Tablet View Desktop View Class 5 Title - Two students(6 total) will come up to the board at a time to work with their instructor to wireframe each of the the three mockups from the Scientific American . While the students work at the board, the rest of the class should be following along with pencil and paper at their own desks. Mobile View Tablet View Laptop View Class 6 Title - Wireframe the Image Gallery Mockup below. How do you get the text to appear when the user's cursor is over the top of it? Class 7 Code Plan - As a class, what problem do we need to solve in the Calculator App? How do we solve it? Let's create a list of actions we need to take to complete it. Class 8 Using one of the website examples below, the instructor will lead a discussion and demonstration about breaking down this large project into smaller manageable pieces so you can finish it before the due date next week. https://freewebsitetemplates.com/preview/hairstylesalon/index.html https://freewebsitetemplates.com/preview/mustacheenthusiast/contact.html Remember, this is your first BIG project. You're now learning how to break big problems in to smaller pieces: websites into web pages, web pages into web elements, web elements into element properties. This is how you develop a plan. Class 9 Prompt 1: Fizz Buzz - Today we'll switch our interview training to something a little different, programming. This will take a slightly different form than what we've seen before but it a very nice introduction to what some of your future interviews will look like. Your instructor will lead this exercise, writing on the board only what you tell them to write. Before you begin you might need to know a few things: FizzBuzz is a right-of-passage in the software development world. It's like the \"Hello World\" of programming. It goes like this: Create a function that lists all numbers between 1 - 1000; but instead of printing the numbers that are evenly divisible by 3, print \"fizz\" ; and instead of printing the numbers that are evenly divisible by 5, print \"buzz\" ; also, if the number is evenly divisible by both 3 and 5, print \"fizzBuzz\" . You'll need a few things from your past pre-lessons: % modulus while loop ++ incrementor And something you have covered in depth yet: if(){} if else(){} else {} NOTE: Take some time to think about the logic of the solution before you begin, but begin soon! Test it by putting it into a computer. Any questions? Class 10 Prompt 1: Rotate - Write a function named rotateArray that rotates the elements of an array. All elements should be moved one position to the left. The 0th element should be placed at the end of the array. The rotated array should be returned. Example: rotate(['a', 'b', 'c']) should return ['b', 'c', 'a'] . Class 11 Prompt 1: isGreaterThanFifty - Write a JavaScript program to check two given numbers and return true if one of the numbers is 50 or if their sum is 50. 1 2 3 4 5 6 // Example input and expected output checkSum ( 50 , 12 ) // => true checkSum ( 10 , 11 ) // => false checkSum ( 26 , 24 ) // => true checkSum ( 49 , 2 ) // => false Class 12 Prompt 1: withinLimits - Given two numbers, say x and y , write a program that determines if the numbers are between the ranges of 0-20 or 80-100 , which includes the edges of the limit: 0 , 20 , 80 , and 100 . 1 2 withinLimits ( 10 , 99 ) // => true withinLimits ( 21 , 81 ) // => false Class 13 Prompt 1: Trello Training - 30 mins - Splitting up into groups(breakout rooms) of three students, each group will build a Trello board and layout the task required to build a website the following mockups describe. Afterward, groups will discuss what steps they found and what order. The purpose of this challenge is practice breaking down large projects into smaller steps. Laptop Tablet Mobile Class 14 Prompt 1: None - Focus on your Final Portfolio Project Class 15 Prompt 1: None - Focus on your Final Portfolio Project Class 16 Prompt 1: Title - description","title":"Interview Training"},{"location":"additionalResources/interviewChallenges/#interview-challenges","text":"","title":"Interview Challenges"},{"location":"additionalResources/interviewChallenges/#why-train-for-interviews","text":"Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor):","title":"Why Train for Interviews?"},{"location":"additionalResources/interviewChallenges/#how-to-solve-your-challenge","text":"Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home.","title":"How to Solve Your Challenge"},{"location":"additionalResources/interviewChallenges/#the-prompts","text":"","title":"The Prompts"},{"location":"additionalResources/interviewChallenges/#class-1","text":"NONE","title":"Class 1"},{"location":"additionalResources/interviewChallenges/#class-2","text":"Wireframe & Plan - What is wireframing? How do we plan the construction of a web page? How can we use paper and pencil to guide us while coding? As a class, talk through and develop a plan to build the NASA Contact Page.","title":"Class 2"},{"location":"additionalResources/interviewChallenges/#class-3","text":"Title - Two students, at-a-time, will come up to the board at a time to work with their instructor to wireframe the following website mockups: NOTE: please use the time to create meaningful wireframes with semantic elements and maybe useful CSS pseudo code that can guide your coding for today's project. Resume Challenge Landing Page Challenge","title":"Class 3"},{"location":"additionalResources/interviewChallenges/#class-4","text":"Title - Two students at a time will come up to the board to work with their instructor to wireframe each of the the three website mockups below. 3 views = 6 students total. Mobile View Tablet View Desktop View","title":"Class 4"},{"location":"additionalResources/interviewChallenges/#class-5","text":"Title - Two students(6 total) will come up to the board at a time to work with their instructor to wireframe each of the the three mockups from the Scientific American . While the students work at the board, the rest of the class should be following along with pencil and paper at their own desks. Mobile View Tablet View Laptop View","title":"Class 5"},{"location":"additionalResources/interviewChallenges/#class-6","text":"Title - Wireframe the Image Gallery Mockup below. How do you get the text to appear when the user's cursor is over the top of it?","title":"Class 6"},{"location":"additionalResources/interviewChallenges/#class-7","text":"Code Plan - As a class, what problem do we need to solve in the Calculator App? How do we solve it? Let's create a list of actions we need to take to complete it.","title":"Class 7"},{"location":"additionalResources/interviewChallenges/#class-8","text":"Using one of the website examples below, the instructor will lead a discussion and demonstration about breaking down this large project into smaller manageable pieces so you can finish it before the due date next week. https://freewebsitetemplates.com/preview/hairstylesalon/index.html https://freewebsitetemplates.com/preview/mustacheenthusiast/contact.html Remember, this is your first BIG project. You're now learning how to break big problems in to smaller pieces: websites into web pages, web pages into web elements, web elements into element properties. This is how you develop a plan.","title":"Class 8"},{"location":"additionalResources/interviewChallenges/#class-9","text":"Prompt 1: Fizz Buzz - Today we'll switch our interview training to something a little different, programming. This will take a slightly different form than what we've seen before but it a very nice introduction to what some of your future interviews will look like. Your instructor will lead this exercise, writing on the board only what you tell them to write. Before you begin you might need to know a few things: FizzBuzz is a right-of-passage in the software development world. It's like the \"Hello World\" of programming. It goes like this: Create a function that lists all numbers between 1 - 1000; but instead of printing the numbers that are evenly divisible by 3, print \"fizz\" ; and instead of printing the numbers that are evenly divisible by 5, print \"buzz\" ; also, if the number is evenly divisible by both 3 and 5, print \"fizzBuzz\" . You'll need a few things from your past pre-lessons: % modulus while loop ++ incrementor And something you have covered in depth yet: if(){} if else(){} else {} NOTE: Take some time to think about the logic of the solution before you begin, but begin soon! Test it by putting it into a computer. Any questions?","title":"Class 9"},{"location":"additionalResources/interviewChallenges/#class-10","text":"Prompt 1: Rotate - Write a function named rotateArray that rotates the elements of an array. All elements should be moved one position to the left. The 0th element should be placed at the end of the array. The rotated array should be returned. Example: rotate(['a', 'b', 'c']) should return ['b', 'c', 'a'] .","title":"Class 10"},{"location":"additionalResources/interviewChallenges/#class-11","text":"Prompt 1: isGreaterThanFifty - Write a JavaScript program to check two given numbers and return true if one of the numbers is 50 or if their sum is 50. 1 2 3 4 5 6 // Example input and expected output checkSum ( 50 , 12 ) // => true checkSum ( 10 , 11 ) // => false checkSum ( 26 , 24 ) // => true checkSum ( 49 , 2 ) // => false","title":"Class 11"},{"location":"additionalResources/interviewChallenges/#class-12","text":"Prompt 1: withinLimits - Given two numbers, say x and y , write a program that determines if the numbers are between the ranges of 0-20 or 80-100 , which includes the edges of the limit: 0 , 20 , 80 , and 100 . 1 2 withinLimits ( 10 , 99 ) // => true withinLimits ( 21 , 81 ) // => false","title":"Class 12"},{"location":"additionalResources/interviewChallenges/#class-13","text":"Prompt 1: Trello Training - 30 mins - Splitting up into groups(breakout rooms) of three students, each group will build a Trello board and layout the task required to build a website the following mockups describe. Afterward, groups will discuss what steps they found and what order. The purpose of this challenge is practice breaking down large projects into smaller steps. Laptop Tablet Mobile","title":"Class 13"},{"location":"additionalResources/interviewChallenges/#class-14","text":"Prompt 1: None - Focus on your Final Portfolio Project","title":"Class 14"},{"location":"additionalResources/interviewChallenges/#class-15","text":"Prompt 1: None - Focus on your Final Portfolio Project","title":"Class 15"},{"location":"additionalResources/interviewChallenges/#class-16","text":"Prompt 1: Title - description","title":"Class 16"},{"location":"additionalResources/keyboardShortcuts/","text":"Keyboard Shortcuts Short-cuts macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#keyboard-shortcuts","text":"","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#short-cuts","text":"macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Short-cuts"},{"location":"additionalResources/presentationsQualifications/","text":"Presentations Qualifications To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director. Capstone Project Presentation Guidelines The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Presentations Qualifications"},{"location":"additionalResources/presentationsQualifications/#presentations-qualifications","text":"To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director.","title":"Presentations Qualifications"},{"location":"additionalResources/presentationsQualifications/#capstone-project-presentation-guidelines","text":"The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Capstone Project Presentation Guidelines"},{"location":"additionalResources/studentPresentations/","text":"Daily Student Presentations In order to develop our students' communication skills around software development, each student will plan, practice, and teach to the class on a subject listed here and in the home page of this textbook. The subject may be a little obscure or only slightly related to the current topic. But the second objective for these presentations is to open the minds of all the students to things we don't have enough time to cover in these short weeks together. Students should prepare in advance and take their responsibility to the class and themselves seriously. Take this time now to decide and record who will present starting next class, Day 2, through Day 16, 15 classes total. It is suggested the instructor use GoogleSheets to organize and share the information with students. Feel empowered to write blogs, make a video, create a diagram(s), and develop code bases for your presentations effectiveness. Class 1 Teach purpose of presentations and mentally prepare the class. Class 2 Organize and Coordinate who and when students are presenting. Class 3, 4, and 5 Each of these class days, 33% of the class will properly teach the class about themselves in less than 3 minutes. Include the following as guidelines: Who you are (How do you describe your history, experience, and character... what's the story that brought you to this class?) Your current understanding of life, your work, your hobbies, and your family... What it is you want to do with the skills you're learning... What is important to you outside of school, work, family, and hobbies... And lastly, a problem you currently have/see that you'd like to solve with technology. Class 6, 7, 8 Each of these class days, 33% of the class will teach the class about something they know well in less than 3 minutes. i.e. A special skill, talent or task, not coding/programming related. Class 9, 10, 11 Each of these class days, 33% of the class will pitch your graduation app idea to the class in less than 3 minutes. What\u2019s the problem? How does this app solve it? By the end of this Full-Stack Program you will have the tools to build a mobile app with a server, database, and a front-end app. To prove this to you, your family, and your future employers you will build an app of your design as a Capstone Project upon graduation. Think of it as your thesis for web development. You have enough experience now to start understanding what can be done and what you'd like to build as your Capstone Project. To get you started think of some task(s) you do often or a current hiccup in your daily routine or a wrinkle in some process you'd like smoothed out. Now start thinking of how this technology could solve those things. This is what you'll build. Make it personal to you so you build it with passion to get you through the tough times and the frustrations that will inevitably come as you build it. Next class you'll deliver your first pitch of this solution. Think of it as a practice in story-telling to people that are consciously-unaware of the problem knowing that once you present it to them, they will want the solution in their life! Your prompt is as follows.. In less than three mins: Present the problem to the class : \"Have you ever....\" present the problem to the class Offer a solution to the problem : \"But what if we had ....\" offer a solution to the problem Commit yourself to the solution: : \"I am building this very ....\" commit yourself to the solution Then be prepared for questions from your classmates and instructor. Organize it!! The instructor will take a few minutes now to divide students up similarly to the way your last round of presentations have been with 3 students presenting each class for the next 6 classes, starting next class. Class 12 With each of these Demonstrations the presenter should: Explain the reason/need for such a technique. Discuss the workings of the code and how it's actually happening. Lead the class to ask where & why could this technique be used? Learn, Master, Teach & Demo how to: Image Slideshow with JS Learn, Master, Teach & Demo how to: Animated Menu Icon Learn, Master, Teach & Demo how to: Build an Accordion Learn, Master, Teach & Demo how to: Build Tabs for a Single Page Class 13 With each of these Demonstrations the presenter should: Explain the reason/need for such a technique. Discuss the workings of the code and how it's actually happening. Lead the class to ask where & why could this technique be used? Learn, Master, Teach & Demo how to: Build a Search Menu Learn, Master, Teach & Demo how to: Create an Off-Canvas Menu Learn, Master, Teach & Demo how to: Create a Fixed Menu Learn, Master, Teach & Demo how to: NavBar Slide Down Where could you use these techniques? Class 14 With each of these Demonstrations the presenter should: Explain the reason/need for such a technique. Discuss the workings of the code and how it's actually happening. Lead the class to ask where & why could this technique be used? Learn, Master, Teach & Demo how to: Shrink NavBar on Scroll Learn, Master, Teach & Demo how to: Make a Sticky NavBar Learn, Master, Teach & Demo how to: Make a Return to Top Button Learn, Master, Teach & Demo how to: Create a Login Modal Class 15 With each of these Demonstrations the presenter should: Explain the reason/need for such a technique. Discuss the workings of the code and how it's actually happening. Lead the class to ask where & why could this technique be used? Learn, Master, Teach & Demo how to: Multi-step Form Learn, Master, Teach & Demo how to: Detect Caps Lock & Toggle Password Visibility Learn, Master, Teach & Demo how to: Maintain Aspect Ratio & Show Tree View Learn, Master, Teach & Demo how to: Copy Text to Clipboard & Create a Download Link Class 16 With each of these Demonstrations the presenter should: Explain the reason/need for such a technique. Discuss the workings of the code and how it's actually happening. Lead the class to ask where & why could this technique be used? Learn, Master, Teach & Demo how to: Create a Snackbar/Toast & Create a Gradient Scrolling Background Learn, Master, Teach & Demo how to: Toggle Dark Mode & How to Create the TypeWriter effect Learn, Master, Teach & Demo how to: Make a Syntax Highlighter Learn, Master, Teach & Demo how to Use Window Properties like: Get Current Window Size Get Current URL Find Hidden Element Detect Offline","title":"Student Presentations"},{"location":"additionalResources/studentPresentations/#daily-student-presentations","text":"In order to develop our students' communication skills around software development, each student will plan, practice, and teach to the class on a subject listed here and in the home page of this textbook. The subject may be a little obscure or only slightly related to the current topic. But the second objective for these presentations is to open the minds of all the students to things we don't have enough time to cover in these short weeks together. Students should prepare in advance and take their responsibility to the class and themselves seriously. Take this time now to decide and record who will present starting next class, Day 2, through Day 16, 15 classes total. It is suggested the instructor use GoogleSheets to organize and share the information with students. Feel empowered to write blogs, make a video, create a diagram(s), and develop code bases for your presentations effectiveness.","title":"Daily Student Presentations"},{"location":"additionalResources/studentPresentations/#class-1","text":"Teach purpose of presentations and mentally prepare the class.","title":"Class 1"},{"location":"additionalResources/studentPresentations/#class-2","text":"Organize and Coordinate who and when students are presenting.","title":"Class 2"},{"location":"additionalResources/studentPresentations/#class-3-4-and-5","text":"Each of these class days, 33% of the class will properly teach the class about themselves in less than 3 minutes. Include the following as guidelines: Who you are (How do you describe your history, experience, and character... what's the story that brought you to this class?) Your current understanding of life, your work, your hobbies, and your family... What it is you want to do with the skills you're learning... What is important to you outside of school, work, family, and hobbies... And lastly, a problem you currently have/see that you'd like to solve with technology.","title":"Class 3, 4, and 5"},{"location":"additionalResources/studentPresentations/#class-6-7-8","text":"Each of these class days, 33% of the class will teach the class about something they know well in less than 3 minutes. i.e. A special skill, talent or task, not coding/programming related.","title":"Class 6, 7, 8"},{"location":"additionalResources/studentPresentations/#class-9-10-11","text":"Each of these class days, 33% of the class will pitch your graduation app idea to the class in less than 3 minutes. What\u2019s the problem? How does this app solve it? By the end of this Full-Stack Program you will have the tools to build a mobile app with a server, database, and a front-end app. To prove this to you, your family, and your future employers you will build an app of your design as a Capstone Project upon graduation. Think of it as your thesis for web development. You have enough experience now to start understanding what can be done and what you'd like to build as your Capstone Project. To get you started think of some task(s) you do often or a current hiccup in your daily routine or a wrinkle in some process you'd like smoothed out. Now start thinking of how this technology could solve those things. This is what you'll build. Make it personal to you so you build it with passion to get you through the tough times and the frustrations that will inevitably come as you build it. Next class you'll deliver your first pitch of this solution. Think of it as a practice in story-telling to people that are consciously-unaware of the problem knowing that once you present it to them, they will want the solution in their life! Your prompt is as follows.. In less than three mins: Present the problem to the class : \"Have you ever....\" present the problem to the class Offer a solution to the problem : \"But what if we had ....\" offer a solution to the problem Commit yourself to the solution: : \"I am building this very ....\" commit yourself to the solution Then be prepared for questions from your classmates and instructor. Organize it!! The instructor will take a few minutes now to divide students up similarly to the way your last round of presentations have been with 3 students presenting each class for the next 6 classes, starting next class.","title":"Class 9, 10, 11"},{"location":"additionalResources/studentPresentations/#class-12","text":"With each of these Demonstrations the presenter should: Explain the reason/need for such a technique. Discuss the workings of the code and how it's actually happening. Lead the class to ask where & why could this technique be used? Learn, Master, Teach & Demo how to: Image Slideshow with JS Learn, Master, Teach & Demo how to: Animated Menu Icon Learn, Master, Teach & Demo how to: Build an Accordion Learn, Master, Teach & Demo how to: Build Tabs for a Single Page","title":"Class 12"},{"location":"additionalResources/studentPresentations/#class-13","text":"With each of these Demonstrations the presenter should: Explain the reason/need for such a technique. Discuss the workings of the code and how it's actually happening. Lead the class to ask where & why could this technique be used? Learn, Master, Teach & Demo how to: Build a Search Menu Learn, Master, Teach & Demo how to: Create an Off-Canvas Menu Learn, Master, Teach & Demo how to: Create a Fixed Menu Learn, Master, Teach & Demo how to: NavBar Slide Down Where could you use these techniques?","title":"Class 13"},{"location":"additionalResources/studentPresentations/#class-14","text":"With each of these Demonstrations the presenter should: Explain the reason/need for such a technique. Discuss the workings of the code and how it's actually happening. Lead the class to ask where & why could this technique be used? Learn, Master, Teach & Demo how to: Shrink NavBar on Scroll Learn, Master, Teach & Demo how to: Make a Sticky NavBar Learn, Master, Teach & Demo how to: Make a Return to Top Button Learn, Master, Teach & Demo how to: Create a Login Modal","title":"Class 14"},{"location":"additionalResources/studentPresentations/#class-15","text":"With each of these Demonstrations the presenter should: Explain the reason/need for such a technique. Discuss the workings of the code and how it's actually happening. Lead the class to ask where & why could this technique be used? Learn, Master, Teach & Demo how to: Multi-step Form Learn, Master, Teach & Demo how to: Detect Caps Lock & Toggle Password Visibility Learn, Master, Teach & Demo how to: Maintain Aspect Ratio & Show Tree View Learn, Master, Teach & Demo how to: Copy Text to Clipboard & Create a Download Link","title":"Class 15"},{"location":"additionalResources/studentPresentations/#class-16","text":"With each of these Demonstrations the presenter should: Explain the reason/need for such a technique. Discuss the workings of the code and how it's actually happening. Lead the class to ask where & why could this technique be used? Learn, Master, Teach & Demo how to: Create a Snackbar/Toast & Create a Gradient Scrolling Background Learn, Master, Teach & Demo how to: Toggle Dark Mode & How to Create the TypeWriter effect Learn, Master, Teach & Demo how to: Make a Syntax Highlighter Learn, Master, Teach & Demo how to Use Window Properties like: Get Current Window Size Get Current URL Find Hidden Element Detect Offline","title":"Class 16"},{"location":"additionalResources/bonusMaterial/evenOddFollowAlong/","text":"Even/Odd List Follow-Along In your terminal you can run these commands one at a time: 1 2 3 4 cd devFolder cd evenOdd-lists touch index.html code . NOTE: You can also just use finder and VS code to do the same thing if it's more comfortable to you. In the index.html file create the boilerplate HTML code and inside the Body Element create a Form with an Input for text and a Submit button. 1 2 3 4 5 6 7 8 9 10 11 12 < h1 > Even Odd Lists </ h1 > < hr /> < form id = \"even-odd-form\" autocomplete = \"off\" target = \"_blank\" > < div > < label for = \"word\" > word </ label > < input type = \"text\" name = \"word\" id = \"word\" placeholder = \"what's your word?\" onkeyup = \"\" > </ div > < div > < input type = \"button\" value = \"Even or Odd?\" onclick = \"\" > </ div > </ form > Introducing OL & UL Elements Now let's add some elements we can show users their inputs. Below the form create two Section elements titled \"Even\" and \"Odd\" Inside those sections create to Unordered Lists (UL) : 1 2 3 4 5 6 7 8 < section > < h2 > Even </ h2 > < ul ></ ul > </ section > < section > < h2 > Odd </ h2 > < ul ></ ul > </ section > NOTE: In these Unordered List elements is where we'll add our words as List Items (LI) . You could change these out for Ordered Lists if you'd like numbers instead of bullets. MDN Docs - UL Element Now let's create some temporary storage to keep up with our user's input. Create a variable called: usersWord . NOTE: For simplicity sakes we'll put our JS in a Script element but feel free to keep it in a separate .js file you like. 1 2 3 < script > let usersWord = \"\" </ script > Then let's create a function that will update this variable when the user types in. 1 2 3 4 5 6 7 8 9 < script > let usersWord = \"\" function updateWord ( element ) { usersWord = element . value console . log ( usersWord ) } </ script > NOTE: the console.log call is there to prove you're changing the variable as expected. This is a good practice as you're learning but you don't want these statements in Production Code . Now you'll need attach this function to the onkeyup= event on the Input Element and pass itself to it as this : 1 2 3 <!-- ...more code above --> < input type = \"text\" name = \"word\" id = \"word\" placeholder = \"what's your word?\" onkeyup = \"updateWord(this)\" > <!-- ...more code below --> NOTE: Test it. If it ain't workin' don't move on yet. Our next step is to get the word to appear in just one of the lists. Let's, for now, put them all in the Odd list. To do that we'll need to start by creating a reference to our Odd List. First, give the UL Elements id= properties with appropriate values and create a variable to hold a reference to them in: 1 2 3 4 5 6 7 8 < section > < h2 > Even </ h2 > < ul id = \"even\" ></ ul > </ section > < section > < h2 > Odd </ h2 > < ul id = \"odd\" ></ ul > </ section > 1 2 let usersWord = \"\" let oddList = document . getElementById ( \"odd\" ) Now create function that will create a new element ( <li> ), put the input as its innerText and append it to the Odd List: 1 2 3 4 5 6 function handleSubmit () { let newListItem = document . createElement ( 'LI' ) newListItem . innerText = usersWord oddList . appendChild ( newListItem ) } NOTE: We could have created the oddList variable at the top of this function but because we'll run this function every time we submit a new word there's no reason to make the computer work hard to re-create a reference every time we re-run the function. Don't forget to reset the form and clear the userWord variable: 1 2 3 4 5 6 7 8 9 function handleSubmit () { let newListItem = document . createElement ( 'LI' ) newListItem . innerText = usersWord oddList . appendChild ( newListItem ) usersWord = \"\" document . getElementById ( \"even-odd-form\" ). reset () } Introducing If/Else Now the trick is to figure out where to change the logic so the program FIRST counts the letters of the word then decides whether it should be in the Even list or the Odd list. To do this let's look at the code line-by-line: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 function handleSubmit () { // this line creates a new LI Element. We'll do this every time a word is submitted so this should stay the same let newListItem = document . createElement ( 'LI' ) // this line sticks the user's word into the newly create LI Element so we'll keep this the same, as well. newListItem . innerText = usersWord // this line attaches/appends the element to the Odd List !!!THIS IS WHERE THE PROGRAM SHOULD DECIDE IF IT'S EVEN OR ODD!!! oddList . appendChild ( newListItem ) // these two lines will be the same usersWord = \"\" document . getElementById ( \"even-odd-form\" ). reset () } Okay so here's the line we're looking at: 1 2 // this line attaches/appends the element to the Odd List !!!THIS IS WHERE THE PROGRAM SHOULD DECIDE IF IT'S EVEN OR ODD!!! oddList . appendChild ( newListItem ) At this point we're going to need to learn a bit of new JavaScript - If/Else Statements! If/Else statements do exactly what they sound like. \"If this statement is true then do this thing. Else, so that thing.\" Syntactically they look like this: 1 2 3 4 5 if ( 1 === 1 ) { return true } else { return false } This statement will return \"true\" every time because 1 will always equal 1! However, we don't have to compare just 1 to 1 we can compare word lengths and even do mathematics in an if/else statement. Add an If/Else Statement to our function: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // ...more code above... function handleSubmit () { let newListItem = document . createElement ( 'LI' ) newListItem . innerText = usersWord if ( /*word length is even*/ ) { /*put word in even lists*/ } else { /*put word in odd list*/ oddList . appendChild ( newListItem ) } usersWord = \"\" document . getElementById ( \"even-odd-form\" ). reset () } NOTE: This code isn't going to work because it doesn't have values but make sure you understand what's being told to the computer. Next we're going to have to have a reference to the Even List the same way we do with the Odd List. Just copy/paste the last variable and change the values: 1 2 3 4 5 let usersWord = \"\" let oddList = document . getElementById ( \"odd\" ) let evenList = document . getElementById ( \"even\" ) // ...more code below Introducing The Modulus and Data Types: String and Boolean Our next challenge is to figure out how to count the length of the word and decided if it's even or odd. For this step we'll learn two new JS techniques but let you work through some ideas on your own before moving on: String Data Types like the word stored in usersWord have a property on them called .length > Try It. Type in an input and in the Browser's Console type usersWord.length + ENTER. The Modulus , % , is a mathematical operator that returns the remainder of a division, i.e. 20/5 would equal 4 but 20 % 5 would equal 0 . > Try it. Go to your Browser's Console and type each of those in + ENTER. STOP! Before moving on spend some time on your own to think about how you could use these two concepts inside the If/Else statement to determine if the word is odd or even. After You've Tried it Yourself Putting It All Together Let's identify all the pieces we have available to use to solve this problem: the word: usersWord the length of the word: usersWord.length % operator An argument give to the if() function to do something if it's true Truth 1: even numbers are evenly divided by 2, aka they have a remainder of 0 Truth 2: odd numbers are not evenly divided by 2, aka they have a remainder of not 0 What if we divided the length of the word and compared the remainder to 0? 1 usersWord . length % 2 === 0 This comparison will resolve to true or false . If the word's length is even it will resolve to true if not then it will resolve to false . This is a good thing because the if( ) function works on these Boolean Values of true and false . If we give this comparison to the if( ) function we are telling the computer to run ask a few questions: * \"What's the length of the word?\" * \"What's the remainder when divided by 2?\" * \"Is that remainder equal to 0?\" Now our If/Else Statement should look like this: 1 2 3 4 5 6 7 8 9 10 // ...more code above... if ( usersWord . length % 2 === 0 ) { /*put word in even lists*/ } else { /*put word in odd list*/ oddList . appendChild ( newListItem ) } // ...more code below... Now tell the program to insert the word in the even list inside the { } before the else { 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 let usersWord = \"\" let oddList = document . getElementById ( \"odd\" ) let evenList = document . getElementById ( \"even\" ) // ...more code here...updateWord() function handleSubmit () { let newListItem = document . createElement ( 'LI' ) newListItem . innerText = usersWord /* compare remainder to 0 to see if even or not */ if ( usersWord . length % 2 === 0 ) { /*put word in even lists*/ evenList . appendChild ( newListItem ) } else { /*put word in odd list*/ oddList . appendChild ( newListItem ) } usersWord = \"\" document . getElementById ( \"even-odd-form\" ). reset () } Push Yourself Further If you'd like to prevent the the Form from reload the page if you hit Enter try to implement this solution . Look for the Big Green Check mark for the best answers on StackOverflow.","title":"Even/Odd List Follow-Along"},{"location":"additionalResources/bonusMaterial/evenOddFollowAlong/#evenodd-list-follow-along","text":"In your terminal you can run these commands one at a time: 1 2 3 4 cd devFolder cd evenOdd-lists touch index.html code . NOTE: You can also just use finder and VS code to do the same thing if it's more comfortable to you. In the index.html file create the boilerplate HTML code and inside the Body Element create a Form with an Input for text and a Submit button. 1 2 3 4 5 6 7 8 9 10 11 12 < h1 > Even Odd Lists </ h1 > < hr /> < form id = \"even-odd-form\" autocomplete = \"off\" target = \"_blank\" > < div > < label for = \"word\" > word </ label > < input type = \"text\" name = \"word\" id = \"word\" placeholder = \"what's your word?\" onkeyup = \"\" > </ div > < div > < input type = \"button\" value = \"Even or Odd?\" onclick = \"\" > </ div > </ form >","title":"Even/Odd List Follow-Along"},{"location":"additionalResources/bonusMaterial/evenOddFollowAlong/#introducing-ol-ul-elements","text":"Now let's add some elements we can show users their inputs. Below the form create two Section elements titled \"Even\" and \"Odd\" Inside those sections create to Unordered Lists (UL) : 1 2 3 4 5 6 7 8 < section > < h2 > Even </ h2 > < ul ></ ul > </ section > < section > < h2 > Odd </ h2 > < ul ></ ul > </ section > NOTE: In these Unordered List elements is where we'll add our words as List Items (LI) . You could change these out for Ordered Lists if you'd like numbers instead of bullets. MDN Docs - UL Element Now let's create some temporary storage to keep up with our user's input. Create a variable called: usersWord . NOTE: For simplicity sakes we'll put our JS in a Script element but feel free to keep it in a separate .js file you like. 1 2 3 < script > let usersWord = \"\" </ script > Then let's create a function that will update this variable when the user types in. 1 2 3 4 5 6 7 8 9 < script > let usersWord = \"\" function updateWord ( element ) { usersWord = element . value console . log ( usersWord ) } </ script > NOTE: the console.log call is there to prove you're changing the variable as expected. This is a good practice as you're learning but you don't want these statements in Production Code . Now you'll need attach this function to the onkeyup= event on the Input Element and pass itself to it as this : 1 2 3 <!-- ...more code above --> < input type = \"text\" name = \"word\" id = \"word\" placeholder = \"what's your word?\" onkeyup = \"updateWord(this)\" > <!-- ...more code below --> NOTE: Test it. If it ain't workin' don't move on yet. Our next step is to get the word to appear in just one of the lists. Let's, for now, put them all in the Odd list. To do that we'll need to start by creating a reference to our Odd List. First, give the UL Elements id= properties with appropriate values and create a variable to hold a reference to them in: 1 2 3 4 5 6 7 8 < section > < h2 > Even </ h2 > < ul id = \"even\" ></ ul > </ section > < section > < h2 > Odd </ h2 > < ul id = \"odd\" ></ ul > </ section > 1 2 let usersWord = \"\" let oddList = document . getElementById ( \"odd\" ) Now create function that will create a new element ( <li> ), put the input as its innerText and append it to the Odd List: 1 2 3 4 5 6 function handleSubmit () { let newListItem = document . createElement ( 'LI' ) newListItem . innerText = usersWord oddList . appendChild ( newListItem ) } NOTE: We could have created the oddList variable at the top of this function but because we'll run this function every time we submit a new word there's no reason to make the computer work hard to re-create a reference every time we re-run the function. Don't forget to reset the form and clear the userWord variable: 1 2 3 4 5 6 7 8 9 function handleSubmit () { let newListItem = document . createElement ( 'LI' ) newListItem . innerText = usersWord oddList . appendChild ( newListItem ) usersWord = \"\" document . getElementById ( \"even-odd-form\" ). reset () }","title":"Introducing OL &amp; UL Elements"},{"location":"additionalResources/bonusMaterial/evenOddFollowAlong/#introducing-ifelse","text":"Now the trick is to figure out where to change the logic so the program FIRST counts the letters of the word then decides whether it should be in the Even list or the Odd list. To do this let's look at the code line-by-line: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 function handleSubmit () { // this line creates a new LI Element. We'll do this every time a word is submitted so this should stay the same let newListItem = document . createElement ( 'LI' ) // this line sticks the user's word into the newly create LI Element so we'll keep this the same, as well. newListItem . innerText = usersWord // this line attaches/appends the element to the Odd List !!!THIS IS WHERE THE PROGRAM SHOULD DECIDE IF IT'S EVEN OR ODD!!! oddList . appendChild ( newListItem ) // these two lines will be the same usersWord = \"\" document . getElementById ( \"even-odd-form\" ). reset () } Okay so here's the line we're looking at: 1 2 // this line attaches/appends the element to the Odd List !!!THIS IS WHERE THE PROGRAM SHOULD DECIDE IF IT'S EVEN OR ODD!!! oddList . appendChild ( newListItem ) At this point we're going to need to learn a bit of new JavaScript - If/Else Statements! If/Else statements do exactly what they sound like. \"If this statement is true then do this thing. Else, so that thing.\" Syntactically they look like this: 1 2 3 4 5 if ( 1 === 1 ) { return true } else { return false } This statement will return \"true\" every time because 1 will always equal 1! However, we don't have to compare just 1 to 1 we can compare word lengths and even do mathematics in an if/else statement. Add an If/Else Statement to our function: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // ...more code above... function handleSubmit () { let newListItem = document . createElement ( 'LI' ) newListItem . innerText = usersWord if ( /*word length is even*/ ) { /*put word in even lists*/ } else { /*put word in odd list*/ oddList . appendChild ( newListItem ) } usersWord = \"\" document . getElementById ( \"even-odd-form\" ). reset () } NOTE: This code isn't going to work because it doesn't have values but make sure you understand what's being told to the computer. Next we're going to have to have a reference to the Even List the same way we do with the Odd List. Just copy/paste the last variable and change the values: 1 2 3 4 5 let usersWord = \"\" let oddList = document . getElementById ( \"odd\" ) let evenList = document . getElementById ( \"even\" ) // ...more code below","title":"Introducing If/Else"},{"location":"additionalResources/bonusMaterial/evenOddFollowAlong/#introducing-the-modulus-and-data-types-string-and-boolean","text":"Our next challenge is to figure out how to count the length of the word and decided if it's even or odd. For this step we'll learn two new JS techniques but let you work through some ideas on your own before moving on: String Data Types like the word stored in usersWord have a property on them called .length > Try It. Type in an input and in the Browser's Console type usersWord.length + ENTER. The Modulus , % , is a mathematical operator that returns the remainder of a division, i.e. 20/5 would equal 4 but 20 % 5 would equal 0 . > Try it. Go to your Browser's Console and type each of those in + ENTER. STOP! Before moving on spend some time on your own to think about how you could use these two concepts inside the If/Else statement to determine if the word is odd or even.","title":"Introducing The Modulus and Data Types: String and Boolean"},{"location":"additionalResources/bonusMaterial/evenOddFollowAlong/#after-youve-tried-it-yourself","text":"","title":"After You've Tried it Yourself"},{"location":"additionalResources/bonusMaterial/evenOddFollowAlong/#putting-it-all-together","text":"Let's identify all the pieces we have available to use to solve this problem: the word: usersWord the length of the word: usersWord.length % operator An argument give to the if() function to do something if it's true Truth 1: even numbers are evenly divided by 2, aka they have a remainder of 0 Truth 2: odd numbers are not evenly divided by 2, aka they have a remainder of not 0 What if we divided the length of the word and compared the remainder to 0? 1 usersWord . length % 2 === 0 This comparison will resolve to true or false . If the word's length is even it will resolve to true if not then it will resolve to false . This is a good thing because the if( ) function works on these Boolean Values of true and false . If we give this comparison to the if( ) function we are telling the computer to run ask a few questions: * \"What's the length of the word?\" * \"What's the remainder when divided by 2?\" * \"Is that remainder equal to 0?\" Now our If/Else Statement should look like this: 1 2 3 4 5 6 7 8 9 10 // ...more code above... if ( usersWord . length % 2 === 0 ) { /*put word in even lists*/ } else { /*put word in odd list*/ oddList . appendChild ( newListItem ) } // ...more code below... Now tell the program to insert the word in the even list inside the { } before the else { 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 let usersWord = \"\" let oddList = document . getElementById ( \"odd\" ) let evenList = document . getElementById ( \"even\" ) // ...more code here...updateWord() function handleSubmit () { let newListItem = document . createElement ( 'LI' ) newListItem . innerText = usersWord /* compare remainder to 0 to see if even or not */ if ( usersWord . length % 2 === 0 ) { /*put word in even lists*/ evenList . appendChild ( newListItem ) } else { /*put word in odd list*/ oddList . appendChild ( newListItem ) } usersWord = \"\" document . getElementById ( \"even-odd-form\" ). reset () }","title":"Putting It All Together"},{"location":"additionalResources/bonusMaterial/evenOddFollowAlong/#push-yourself-further","text":"If you'd like to prevent the the Form from reload the page if you hit Enter try to implement this solution . Look for the Big Green Check mark for the best answers on StackOverflow.","title":"Push Yourself Further"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/","text":"Class One: Questions for Discussion Supported by browsers Points view-height view-width Child element Parent element CSS properties CSS values Box model Block element CSS class selector Shorthand code CSS length units (as values) Server API Front-End/Client-Side Back-End/Server-Side URL Data Database Browser Internet Local Hosting Local Machine CD-ROM Flash Drive Website vs Web page Web App Web Development Software vs Hardware Mobile App - React-Native DOM 508 Accessibility Element Selectors Git software sandbox file structure","title":"Day 1 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/#class-one-questions-for-discussion","text":"Supported by browsers Points view-height view-width Child element Parent element CSS properties CSS values Box model Block element CSS class selector Shorthand code CSS length units (as values) Server API Front-End/Client-Side Back-End/Server-Side URL Data Database Browser Internet Local Hosting Local Machine CD-ROM Flash Drive Website vs Web page Web App Web Development Software vs Hardware Mobile App - React-Native DOM 508 Accessibility Element Selectors Git software sandbox file structure","title":"Class One: Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-10/","text":"Class 10 - Questions for Discussion Git Branching Merge Pull Request git pull git branch git checkout -b flag --set-upstream origin Branching Merge Conflict \"Off of\" git branch -d git branch -D Why do we need branches? How are they useful? Describe branches to a non-coder. Why do you think your team lead would delete your branch after merging it into master? How are merge conflicts avoided? Can a merge conflict happen between two different branches? Multi-Dimensional Arrays Nested Array Multi-Dimensional Array Data Structure What is a data structure? Why do we need dependable data structures? Why do you think we would choose a nested array as a data structure rather than multiple arrays? Develop - Feelings As you've worked through the class lesson and pre-homeworks you've most certainly felt some sort of frustration. How would you describe the feelings that are flowing underneath? What did you do to be with them? In relation to the speech, why do you think we're talking about feelings here?","title":"Day 10 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-10/#class-10-questions-for-discussion","text":"","title":"Class 10 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-10/#git-branching","text":"Merge Pull Request git pull git branch git checkout -b flag --set-upstream origin Branching Merge Conflict \"Off of\" git branch -d git branch -D Why do we need branches? How are they useful? Describe branches to a non-coder. Why do you think your team lead would delete your branch after merging it into master? How are merge conflicts avoided? Can a merge conflict happen between two different branches?","title":"Git Branching"},{"location":"additionalResources/questionsForDiscussion/qfd-class-10/#multi-dimensional-arrays","text":"Nested Array Multi-Dimensional Array Data Structure What is a data structure? Why do we need dependable data structures? Why do you think we would choose a nested array as a data structure rather than multiple arrays?","title":"Multi-Dimensional Arrays"},{"location":"additionalResources/questionsForDiscussion/qfd-class-10/#develop-feelings","text":"As you've worked through the class lesson and pre-homeworks you've most certainly felt some sort of frustration. How would you describe the feelings that are flowing underneath? What did you do to be with them? In relation to the speech, why do you think we're talking about feelings here?","title":"Develop - Feelings"},{"location":"additionalResources/questionsForDiscussion/qfd-class-11/","text":"Class 11 - Questions for Discussion Develop - Collaboration What are some potential benefits of Attention Giving to creative processes? What are some ways Attention Seeking can impact your life? When have you experienced Attention Seeking? Why do you think it comes up? When do you experience Attention Giving? How do you think you got there? APIs API UI Fetch API HTML APIs vs Server APIs? How would you describe an API in your own words? What are the two different APIs we'll be using in class? How do you think they interact? The Fetch API Asynchronous Code Synchronous Code Promise Response Stream URL Anonymous Function Response .json() Resolve Why do you think Asynchronous code is needed? Why do you think we have to change the stream to JSON instead of just having JSON come to us? Why would we use an Anonymous Function instead of just naming it? What is a API? What does it look like in your mind? How many APIs do imagine you interact with everyday? Which ones? Can you find documentation on them? Object-Literal What's an Object-Literal? Why's it called a \"literal\"? What do we mean when we say everything is an object? How can you relate this to JSON? Why do you think we need all of these data structures? What are the benefits of an object and an array?","title":"Day 11 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-11/#class-11-questions-for-discussion","text":"","title":"Class 11 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-11/#develop-collaboration","text":"What are some potential benefits of Attention Giving to creative processes? What are some ways Attention Seeking can impact your life? When have you experienced Attention Seeking? Why do you think it comes up? When do you experience Attention Giving? How do you think you got there?","title":"Develop - Collaboration"},{"location":"additionalResources/questionsForDiscussion/qfd-class-11/#apis","text":"API UI Fetch API HTML APIs vs Server APIs? How would you describe an API in your own words? What are the two different APIs we'll be using in class? How do you think they interact?","title":"APIs"},{"location":"additionalResources/questionsForDiscussion/qfd-class-11/#the-fetch-api","text":"Asynchronous Code Synchronous Code Promise Response Stream URL Anonymous Function Response .json() Resolve Why do you think Asynchronous code is needed? Why do you think we have to change the stream to JSON instead of just having JSON come to us? Why would we use an Anonymous Function instead of just naming it? What is a API? What does it look like in your mind? How many APIs do imagine you interact with everyday? Which ones? Can you find documentation on them?","title":"The Fetch API"},{"location":"additionalResources/questionsForDiscussion/qfd-class-11/#object-literal","text":"What's an Object-Literal? Why's it called a \"literal\"? What do we mean when we say everything is an object? How can you relate this to JSON? Why do you think we need all of these data structures? What are the benefits of an object and an array?","title":"Object-Literal"},{"location":"additionalResources/questionsForDiscussion/qfd-class-12/","text":"Class 12 - Questions for Discussion Develop - Build Your Network Why do you think \"networking\" is scary for some people? How do you feel about \"networking\"? How does \"building a network\" change your feelings about it? What can you do to be with those nervous feelings? Website Planning Why do you think planning is so foreign to some of us? How do you improve your planning abilities? What emotions do you feel when you approach massive tasks like building a website? How do you manage those feelings? What feelings do you anticipate when building these pages, components, and website? Using Trello Swim Lane AGILE Icebox How do you create a new card? How do you add a person to a card? How do you make a checklist on a card? What language can be written inside of the \"Description\" section of a card? How to you add stickers to cards? What's the keyboard short-cut to creating a new card? What's the keyboard short-cut to search for a card? Filtering What are the four questions we should ask about any method(or function we ever build in the future)? Anonymous function Callback function .filter() Why is it important read your documentation? What other methods have you found that you didn't learn in this course? Can you explain how the .filter() method works to a noob? What does .filter() return? What are the three arguments of .filter()? Does .filter() change the original data? What does .filter() do?","title":"Day 12 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-12/#class-12-questions-for-discussion","text":"","title":"Class 12 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-12/#develop-build-your-network","text":"Why do you think \"networking\" is scary for some people? How do you feel about \"networking\"? How does \"building a network\" change your feelings about it? What can you do to be with those nervous feelings?","title":"Develop - Build Your Network"},{"location":"additionalResources/questionsForDiscussion/qfd-class-12/#website-planning","text":"Why do you think planning is so foreign to some of us? How do you improve your planning abilities? What emotions do you feel when you approach massive tasks like building a website? How do you manage those feelings? What feelings do you anticipate when building these pages, components, and website?","title":"Website Planning"},{"location":"additionalResources/questionsForDiscussion/qfd-class-12/#using-trello","text":"Swim Lane AGILE Icebox How do you create a new card? How do you add a person to a card? How do you make a checklist on a card? What language can be written inside of the \"Description\" section of a card? How to you add stickers to cards? What's the keyboard short-cut to creating a new card? What's the keyboard short-cut to search for a card?","title":"Using Trello"},{"location":"additionalResources/questionsForDiscussion/qfd-class-12/#filtering","text":"What are the four questions we should ask about any method(or function we ever build in the future)? Anonymous function Callback function .filter() Why is it important read your documentation? What other methods have you found that you didn't learn in this course? Can you explain how the .filter() method works to a noob? What does .filter() return? What are the three arguments of .filter()? Does .filter() change the original data? What does .filter() do?","title":"Filtering"},{"location":"additionalResources/questionsForDiscussion/qfd-class-13/","text":"Class 13 - Questions for Discussion Develop - Feelings vs Emotions What does objectifying our emotions mean? Why is being with our emotions better than distracting ourselves from our emotions? Approximately how many emotions have researches identified? CSS Reset [ ]Third-Party [ ]The Cascade [ ]Parsed [ ]Why do we need to use a CSS reset? [ ]How do you think you'll organize multiple CSS files? Merge Conflicts Pull Request Branch Merge Code Review Current Changes Incoming Changes Merge Conflict What strategies can you use to avoid merge conflicts? What are the steps to resolving a merge conflict in GitHub? What are the steps to resolving a merge conflict with VS Code? CSS Animations at-rule @ in CSS animation-iteration-count animation-fill-mode animation-play-state Explicit vs Implicit code What happens to the !important rule if placed in a keyframe? Why is it important to know how to manually change animations? Transforms :active (pseudo-class) :focus (pseudo-class) Parent Selector Using these transform properties answer the questions the follow: translate() scale() rotate() skew() What do they do? What are their alternatives? What are their arguments? Why is it important to keep animations and transformations simple and subtle? Transitions Vendor Prefix What does the transition property do? When is it used? What are the possible values for the transition-timing function property? If you want to use the transition short-hand instead of all of the long-hand properties, what is the order of values?","title":"Day 13 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-13/#class-13-questions-for-discussion","text":"","title":"Class 13 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-13/#develop-feelings-vs-emotions","text":"What does objectifying our emotions mean? Why is being with our emotions better than distracting ourselves from our emotions? Approximately how many emotions have researches identified?","title":"Develop - Feelings vs Emotions"},{"location":"additionalResources/questionsForDiscussion/qfd-class-13/#css-reset","text":"[ ]Third-Party [ ]The Cascade [ ]Parsed [ ]Why do we need to use a CSS reset? [ ]How do you think you'll organize multiple CSS files?","title":"CSS Reset"},{"location":"additionalResources/questionsForDiscussion/qfd-class-13/#merge-conflicts","text":"Pull Request Branch Merge Code Review Current Changes Incoming Changes Merge Conflict What strategies can you use to avoid merge conflicts? What are the steps to resolving a merge conflict in GitHub? What are the steps to resolving a merge conflict with VS Code?","title":"Merge Conflicts"},{"location":"additionalResources/questionsForDiscussion/qfd-class-13/#css-animations","text":"at-rule @ in CSS animation-iteration-count animation-fill-mode animation-play-state Explicit vs Implicit code What happens to the !important rule if placed in a keyframe? Why is it important to know how to manually change animations?","title":"CSS Animations"},{"location":"additionalResources/questionsForDiscussion/qfd-class-13/#transforms","text":":active (pseudo-class) :focus (pseudo-class) Parent Selector Using these transform properties answer the questions the follow: translate() scale() rotate() skew() What do they do? What are their alternatives? What are their arguments? Why is it important to keep animations and transformations simple and subtle?","title":"Transforms"},{"location":"additionalResources/questionsForDiscussion/qfd-class-13/#transitions","text":"Vendor Prefix What does the transition property do? When is it used? What are the possible values for the transition-timing function property? If you want to use the transition short-hand instead of all of the long-hand properties, what is the order of values?","title":"Transitions"},{"location":"additionalResources/questionsForDiscussion/qfd-class-14/","text":"Class 14 - Questions for Discussion Parallax What is meant by \"container\" element? Why do you think it's important to practice learning from other sites? How code reading other's code be beneficial to your learning and growing? Where would you use parallax? What other tricks do you want to learn how to do? Where can you find demos to learn from? Bootstrap What does bootstrapping mean? Why would we use Bootstrap? What advantages do you see working with Bootstrap? Why is responsive so important? What's the first step to building a website? What's after that? When does Bootstrap come in that sequence? What does \"out-of-the-box\" mean? What and why Modals? How would you describe the building of a modal to a non-coder? What did you learn in the \"gotchas\" section of the Bootstrap modal docs? How is this style of learning useful to you and your career? How can you can your approach to learn more and faster? What do you like about reading code? What don't you like about reading code? How can you improve your code reading abilities? Canvas What use is the canvas? What do you understand about it? What don't you understand about it? What needs to be cleared up?","title":"Day 14 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-14/#class-14-questions-for-discussion","text":"","title":"Class 14 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-14/#parallax","text":"What is meant by \"container\" element? Why do you think it's important to practice learning from other sites? How code reading other's code be beneficial to your learning and growing? Where would you use parallax? What other tricks do you want to learn how to do? Where can you find demos to learn from?","title":"Parallax"},{"location":"additionalResources/questionsForDiscussion/qfd-class-14/#bootstrap","text":"What does bootstrapping mean? Why would we use Bootstrap? What advantages do you see working with Bootstrap? Why is responsive so important? What's the first step to building a website? What's after that? When does Bootstrap come in that sequence? What does \"out-of-the-box\" mean? What and why Modals? How would you describe the building of a modal to a non-coder? What did you learn in the \"gotchas\" section of the Bootstrap modal docs? How is this style of learning useful to you and your career? How can you can your approach to learn more and faster? What do you like about reading code? What don't you like about reading code? How can you improve your code reading abilities?","title":"Bootstrap"},{"location":"additionalResources/questionsForDiscussion/qfd-class-14/#canvas","text":"What use is the canvas? What do you understand about it? What don't you understand about it? What needs to be cleared up?","title":"Canvas"},{"location":"additionalResources/questionsForDiscussion/qfd-class-15/","text":"Class 15 - Questions for Discussion Develop Goals What does the Golden Circle demonstrate? How can you use your Why to determine your How and What? Why do you think it's so hard to build motivation for things we \"really\" want? What holds you back? What goals do you want to achieve? What tiny habits can you incorporate to make them come to fruition? How does this shape your thinking of goal setting? HTML5 APIs Root Object Global Object Window Object Navigator Object Document Object DOM HTML5 HTML5 APIs/Web APIs How would you explain HTML5 APIs to a non-coder? How do you envision all of these objects and their properties? What is the relationship between the Window object and the Document object? How can you use these new APIs in your projects? Which of these APIs sound useful or exciting to you? Why? How would you like to use them? Are there any you'd like to use in your final portfolio project? Geolocation API Why do you think these lessons are asking more of you now? What's the point of reading code? Why do we need Geolocation? Where do you see it used in your life? How do you set a timeout function for your location request? What is the watchPosition method used for? Drag and Drop API Event Handler Function Draggable Element Drop Zone/Target Event What is an Event? How does it happen? Where is it stored? What's the order of events when a draggable object is dragged? What exactly does calling .preventDefault() do? What are the steps to create draggable elements and droppable zones? Can an element be draggable and droppable? How do you think practicing this skill will help you in the future? How do you imagine the DnD API to look like? Can you draw a map of it?","title":"Day 15 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-15/#class-15-questions-for-discussion","text":"","title":"Class 15 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-15/#develop-goals","text":"What does the Golden Circle demonstrate? How can you use your Why to determine your How and What? Why do you think it's so hard to build motivation for things we \"really\" want? What holds you back? What goals do you want to achieve? What tiny habits can you incorporate to make them come to fruition? How does this shape your thinking of goal setting?","title":"Develop Goals"},{"location":"additionalResources/questionsForDiscussion/qfd-class-15/#html5-apis","text":"Root Object Global Object Window Object Navigator Object Document Object DOM HTML5 HTML5 APIs/Web APIs How would you explain HTML5 APIs to a non-coder? How do you envision all of these objects and their properties? What is the relationship between the Window object and the Document object? How can you use these new APIs in your projects? Which of these APIs sound useful or exciting to you? Why? How would you like to use them? Are there any you'd like to use in your final portfolio project?","title":"HTML5 APIs"},{"location":"additionalResources/questionsForDiscussion/qfd-class-15/#geolocation-api","text":"Why do you think these lessons are asking more of you now? What's the point of reading code? Why do we need Geolocation? Where do you see it used in your life? How do you set a timeout function for your location request? What is the watchPosition method used for?","title":"Geolocation API"},{"location":"additionalResources/questionsForDiscussion/qfd-class-15/#drag-and-drop-api","text":"Event Handler Function Draggable Element Drop Zone/Target Event What is an Event? How does it happen? Where is it stored? What's the order of events when a draggable object is dragged? What exactly does calling .preventDefault() do? What are the steps to create draggable elements and droppable zones? Can an element be draggable and droppable? How do you think practicing this skill will help you in the future? How do you imagine the DnD API to look like? Can you draw a map of it?","title":"Drag and Drop API"},{"location":"additionalResources/questionsForDiscussion/qfd-class-16/","text":"Class 16 - Questions for Discussion Develop - Teaching Yourself What benefits do you see in teaching yourself beyond learning a new skill? Why do you think we are teaching you to learn this behavior? What about learning by yourself do you find challenging? Canvas API pt. 2 Hard-coded Recursion Callback Function How does this program look in your mind? How would you describe it? What are object-things to you? What do they look like? Do these numbers make sense to you to change the placement of a newly draw circle? How or how not? What would you say you like most about canvas? Talking Code Agile Approach Waterfall Approach Scrum Scrum Master Stand-up Blocker Code Planning Sprint Retrospective Pitch How have you planned your website? Did you foresee potential issues? What techniques did you use to D.R.Y up your code ? What do you see as your own most imposing \"blockers\" to delivering great presentations to groups of people? What strategies, other than those above, can you you think of that might help overcome these? Does the number of people you're presenting to make a difference? If so, why?","title":"Day 16 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-16/#class-16-questions-for-discussion","text":"","title":"Class 16 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-16/#develop-teaching-yourself","text":"What benefits do you see in teaching yourself beyond learning a new skill? Why do you think we are teaching you to learn this behavior? What about learning by yourself do you find challenging?","title":"Develop - Teaching Yourself"},{"location":"additionalResources/questionsForDiscussion/qfd-class-16/#canvas-api-pt-2","text":"Hard-coded Recursion Callback Function How does this program look in your mind? How would you describe it? What are object-things to you? What do they look like? Do these numbers make sense to you to change the placement of a newly draw circle? How or how not? What would you say you like most about canvas?","title":"Canvas API pt. 2"},{"location":"additionalResources/questionsForDiscussion/qfd-class-16/#talking-code","text":"Agile Approach Waterfall Approach Scrum Scrum Master Stand-up Blocker Code Planning Sprint Retrospective Pitch How have you planned your website? Did you foresee potential issues? What techniques did you use to D.R.Y up your code ? What do you see as your own most imposing \"blockers\" to delivering great presentations to groups of people? What strategies, other than those above, can you you think of that might help overcome these? Does the number of people you're presenting to make a difference? If so, why?","title":"Talking Code"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/","text":"Class Two: Questions for Discussion What advantages does flex provide? Explain some of the key flex properties along with their functionality. Describe a use case for order on a flex item. Why is code readability preferred over shorthand in some cases? How do we use: flex-direction? How do we use: flex-wrap? How do we use: flex-flow? How do we use: justify-content? How do we use: align-items? How do we use: align-content? Box Model How does border affect the total width of an element? What is the default margin of a block element? What is the shape of the border? As in, if your bottom border was significantly thicker than your left and right border, what would it look like? Why do we need to concern ourselves with browser support? How does understanding the DOM tree help us with accessing child/parent/sibling relationships? What values should we use with our elements to size them best? How do we find the answers to these questions? Self Motivation What are the 4 Cs of self-motivation? Why are you motivated? Why are you in this class? Why do you need a LinkedIn? And what are some good practices you found in your readings? Have you shared your LinkedIn account with the class on rocketChat? Do it NOW! What does it mean to network? What are you really doing? Why is this important? How do you go about networking? How do you approach people? What do you say? What do you struggle with when talking with people?","title":"Day 2 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/#class-two-questions-for-discussion","text":"What advantages does flex provide? Explain some of the key flex properties along with their functionality. Describe a use case for order on a flex item. Why is code readability preferred over shorthand in some cases? How do we use: flex-direction? How do we use: flex-wrap? How do we use: flex-flow? How do we use: justify-content? How do we use: align-items? How do we use: align-content? Box Model How does border affect the total width of an element? What is the default margin of a block element? What is the shape of the border? As in, if your bottom border was significantly thicker than your left and right border, what would it look like? Why do we need to concern ourselves with browser support? How does understanding the DOM tree help us with accessing child/parent/sibling relationships? What values should we use with our elements to size them best? How do we find the answers to these questions?","title":"Class Two: Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/#self-motivation","text":"What are the 4 Cs of self-motivation? Why are you motivated? Why are you in this class? Why do you need a LinkedIn? And what are some good practices you found in your readings? Have you shared your LinkedIn account with the class on rocketChat? Do it NOW! What does it mean to network? What are you really doing? Why is this important? How do you go about networking? How do you approach people? What do you say? What do you struggle with when talking with people?","title":"Self Motivation"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/","text":"Class 3 - Question for Discussion Mindfulness What does mindfulness mean to you? Does anyone practice now? Why do you think we're talking about this alongside coding? This type of education is \"needed\" in the traditional setting. You're not learning in the \"traditional\" setting. Why do you think we choose to offer this in your program? Why is it part of your education as your transition into the tech world? Can you practice mindfulness outside of meditation? How? Where? When? How would you describe the look of mindfulness during a business meeting? Sitting in traffic? Walking a nature trail? While eating? While exchanging with your family? How do you think your workplace would change if you and everyone there embraced mindful living and communication? How do you think you would change if you brought in this practice? Wireframing and Mockups Why is it useful to construct a wireframe before you start coding? Why would it be useful to lay out a sitemap before you start coding? What is the difference between UI and UX? What is the difference between a wireframe and a mockup? Soon you will be building an online resume \u2014 not yours, though! You'll create one for someone else. For whom will it be? Grid Why would one choose to use grid-template-area ? How do you use it? Explain, aloud to someone that doesn't know programming, how to use CSS Grid. How do you use the box model and css grid together? When would you use flex box and when would you use grid? What are the properties we need to know and remember when working with CSS Grid?","title":"Day 3 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/#class-3-question-for-discussion","text":"","title":"Class 3 - Question for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/#mindfulness","text":"What does mindfulness mean to you? Does anyone practice now? Why do you think we're talking about this alongside coding? This type of education is \"needed\" in the traditional setting. You're not learning in the \"traditional\" setting. Why do you think we choose to offer this in your program? Why is it part of your education as your transition into the tech world? Can you practice mindfulness outside of meditation? How? Where? When? How would you describe the look of mindfulness during a business meeting? Sitting in traffic? Walking a nature trail? While eating? While exchanging with your family? How do you think your workplace would change if you and everyone there embraced mindful living and communication? How do you think you would change if you brought in this practice?","title":"Mindfulness"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/#wireframing-and-mockups","text":"Why is it useful to construct a wireframe before you start coding? Why would it be useful to lay out a sitemap before you start coding? What is the difference between UI and UX? What is the difference between a wireframe and a mockup? Soon you will be building an online resume \u2014 not yours, though! You'll create one for someone else. For whom will it be?","title":"Wireframing and Mockups"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/#grid","text":"Why would one choose to use grid-template-area ? How do you use it? Explain, aloud to someone that doesn't know programming, how to use CSS Grid. How do you use the box model and css grid together? When would you use flex box and when would you use grid? What are the properties we need to know and remember when working with CSS Grid?","title":"Grid"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/","text":"Class 4 - Questions for Discussion Develop - Letting Go of Self-Importance and Shame What three things can you do right now to pull yourself out from boredom or from boredom of yourself? What does the painting, \"Altogether, And All At Once\" mean to you? How do you describe its meaning? What good is it to understand how large the world is and how small we are? Grid Area Define the following: CSS Rule grid-template-areas How are the \"names\" of elements, i.e. grid-area: header; determined? Keeping your knowledge of the DOM and how HTML Elements are structured in mind, how do you think grid-area and grid-template-areas works under-the-hood? How does the repeat() value work in -columns or -rows ? What ways can you foresee this technology helping you build websites? Why do we design in grids in the first place? Media Queries Define the following: Media Query Fluid Grid Flexible Images Viewport em (in font sizing) Break-Point How many devices do you use on a daily basis that would require a different CSS rule? What size is an iPhone? A Pixel? An iPad? A Chromebook? Can you explain how media queries work to a non-developer? What size screen do we design/develop for first? Selectors and Specificity Define the following: Class Name Element Property Pseudo Selector Type Selector ID Inheritance The Cascade HTML Element Attribute CSS Rule Combinator Descendent Selector Direct Child Selector How does inheritance work in CSS? Is is possible to override inheritance? How? What is a [Pseudo-Class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes? What are block, inline and inline-block ? What does !important do? What do we mean by Media Query? Anyone know what a Flexible Images is? Fluid Grid? What do we mean by Viewport? How many devices did you count in your daily use? What sizes did you find for: iPhone, Pixel, iPad, Chromebook? What size screen do we design/develop for first? Why? How do we feel about grid-template-areas?","title":"Day 4 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/#class-4-questions-for-discussion","text":"","title":"Class 4 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/#develop-letting-go-of-self-importance-and-shame","text":"What three things can you do right now to pull yourself out from boredom or from boredom of yourself? What does the painting, \"Altogether, And All At Once\" mean to you? How do you describe its meaning? What good is it to understand how large the world is and how small we are?","title":"Develop - Letting Go of Self-Importance and Shame"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/#grid-area","text":"Define the following: CSS Rule grid-template-areas How are the \"names\" of elements, i.e. grid-area: header; determined? Keeping your knowledge of the DOM and how HTML Elements are structured in mind, how do you think grid-area and grid-template-areas works under-the-hood? How does the repeat() value work in -columns or -rows ? What ways can you foresee this technology helping you build websites? Why do we design in grids in the first place?","title":"Grid Area"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/#media-queries","text":"Define the following: Media Query Fluid Grid Flexible Images Viewport em (in font sizing) Break-Point How many devices do you use on a daily basis that would require a different CSS rule? What size is an iPhone? A Pixel? An iPad? A Chromebook? Can you explain how media queries work to a non-developer? What size screen do we design/develop for first?","title":"Media Queries"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/#selectors-and-specificity","text":"Define the following: Class Name Element Property Pseudo Selector Type Selector ID Inheritance The Cascade HTML Element Attribute CSS Rule Combinator Descendent Selector Direct Child Selector How does inheritance work in CSS? Is is possible to override inheritance? How? What is a [Pseudo-Class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes? What are block, inline and inline-block ? What does !important do? What do we mean by Media Query? Anyone know what a Flexible Images is? Fluid Grid? What do we mean by Viewport? How many devices did you count in your daily use? What sizes did you find for: iPhone, Pixel, iPad, Chromebook? What size screen do we design/develop for first? Why? How do we feel about grid-template-areas?","title":"Selectors and Specificity"},{"location":"additionalResources/questionsForDiscussion/qfd-class-5/","text":"Class 5 - Questions for Discussion JavaScript Basics Dot-Notation Function Signature Function Declaration Function Invocation Event Listeners DOM Events DOM Methods DOM Properties onclick=\"\" .getElementById() What is the difference between a function declaration and function invocation? When do we use let vs const ? How would you describe the difference between a property and a method? How do you describe the DOM to a non-developer? What is the new/preferred syntax for a function declaration? What is the syntax for a function invocation? What is meant when we say \"Object Thing(s)\"? What does the DOM Tree look like to you? What are Nodes and Child Nodes? How can you start learning each of the properties and methods in the DOM? Table and nth-Child Selector rowspan colspan <caption> :nth-child() What are the dedicated child elements of the table element? What do we use a <th> element for? What values can you pass into the () of the :nth-child() selector? How would you describe the way the :nth-child() work to a 5 year old? Ways Of Thinking Can you name 3 properties, 3 methods, 3 events of each of those objects? How do they look to you in your mind? What does your Object Model look like? What questions do you have? Is code starting to mean something to you yet?","title":"Day 5 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-5/#class-5-questions-for-discussion","text":"","title":"Class 5 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-5/#javascript-basics","text":"Dot-Notation Function Signature Function Declaration Function Invocation Event Listeners DOM Events DOM Methods DOM Properties onclick=\"\" .getElementById() What is the difference between a function declaration and function invocation? When do we use let vs const ? How would you describe the difference between a property and a method? How do you describe the DOM to a non-developer? What is the new/preferred syntax for a function declaration? What is the syntax for a function invocation? What is meant when we say \"Object Thing(s)\"? What does the DOM Tree look like to you? What are Nodes and Child Nodes? How can you start learning each of the properties and methods in the DOM?","title":"JavaScript Basics"},{"location":"additionalResources/questionsForDiscussion/qfd-class-5/#table-and-nth-child-selector","text":"rowspan colspan <caption> :nth-child() What are the dedicated child elements of the table element? What do we use a <th> element for? What values can you pass into the () of the :nth-child() selector? How would you describe the way the :nth-child() work to a 5 year old?","title":"Table and nth-Child Selector"},{"location":"additionalResources/questionsForDiscussion/qfd-class-5/#ways-of-thinking","text":"Can you name 3 properties, 3 methods, 3 events of each of those objects? How do they look to you in your mind? What does your Object Model look like? What questions do you have? Is code starting to mean something to you yet?","title":"Ways Of Thinking"},{"location":"additionalResources/questionsForDiscussion/qfd-class-6/","text":"Class 6 - Questions for Discussion HTTP and The Building Blocks of a Web Page What's a Request? A Response? What are the parts of each of these objects? What's so important about the index.html file? Why is it important to understand these technologies from a higher perspective as well as a low-level perspective? HTML Elements/Objects What are the major objects/Elements your remember learning? Let's categorize those objects into three groups: Browser Objects Document Objects JavaScript Objects What is the DOM? How would you describe it? Why do we need this Model? Can you draw the DOM of that simple code example from the HTML Elements lesson? Form Element Attribute Form Validation Data Validation Client-side Validation What makes the form element special? How does it store data? How do we use the Input Element? The Label Element? Can you describe the way the input attribute: name creates a place for data to be stored on the form element-object-thing? What is a object property? How is it similar to an element attribute? Why do we need to validate our data? What does it mean to say: \"the default value of the the Form element's method= attribute is post \"? Button Element What are you confused about? What's an Event Listener? Which ones can you remember off the top of your head? Where do we find the others? How do you picture them in your mind? What might we want to do with the following events: - [ ] window.onload - [ ] window.resize - [ ] window.unload - [ ] When might you use onfocus or onblur ? JavaScript What does \"inline\" means? Why don't we prefer this method? What does the Script Element allow us to do? Where should it go? Why is separating our JS into another file the preferred method? How do we do it? What's the defer keyword about? Why do we need a variable? How do we declare and define a variable? Why do we need a function? How do we declare and define a function? Do we need to go over that Button Element follow-along together? Can anyone show their code and explain?","title":"Day 6 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-6/#class-6-questions-for-discussion","text":"","title":"Class 6 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-6/#http-and-the-building-blocks-of-a-web-page","text":"What's a Request? A Response? What are the parts of each of these objects? What's so important about the index.html file? Why is it important to understand these technologies from a higher perspective as well as a low-level perspective?","title":"HTTP and The Building Blocks of a Web Page"},{"location":"additionalResources/questionsForDiscussion/qfd-class-6/#html-elementsobjects","text":"What are the major objects/Elements your remember learning? Let's categorize those objects into three groups: Browser Objects Document Objects JavaScript Objects What is the DOM? How would you describe it? Why do we need this Model? Can you draw the DOM of that simple code example from the HTML Elements lesson?","title":"HTML Elements/Objects"},{"location":"additionalResources/questionsForDiscussion/qfd-class-6/#form-element","text":"Attribute Form Validation Data Validation Client-side Validation What makes the form element special? How does it store data? How do we use the Input Element? The Label Element? Can you describe the way the input attribute: name creates a place for data to be stored on the form element-object-thing? What is a object property? How is it similar to an element attribute? Why do we need to validate our data? What does it mean to say: \"the default value of the the Form element's method= attribute is post \"?","title":"Form Element"},{"location":"additionalResources/questionsForDiscussion/qfd-class-6/#button-element","text":"What are you confused about? What's an Event Listener? Which ones can you remember off the top of your head? Where do we find the others? How do you picture them in your mind? What might we want to do with the following events: - [ ] window.onload - [ ] window.resize - [ ] window.unload - [ ] When might you use onfocus or onblur ?","title":"Button Element"},{"location":"additionalResources/questionsForDiscussion/qfd-class-6/#javascript","text":"What does \"inline\" means? Why don't we prefer this method? What does the Script Element allow us to do? Where should it go? Why is separating our JS into another file the preferred method? How do we do it? What's the defer keyword about? Why do we need a variable? How do we declare and define a variable? Why do we need a function? How do we declare and define a function? Do we need to go over that Button Element follow-along together? Can anyone show their code and explain?","title":"JavaScript"},{"location":"additionalResources/questionsForDiscussion/qfd-class-7/","text":"Class 7 - Questions for Discussion Replace Elements and Image Element What is the difference between an HTML element and an HTML tag? Can you think of accessibility issues other than visual impairment that should be considered while inserting images, and how they might be addressed? What is Hyper Text Transfer Protocol? What's the difference between a Pathname and a URL? Syntactically and procedurally? What are HTML Global Attributes? Can you name a few? What does Void Element mean? Pathname vs URL URL HTML Global Attributes Void Element Screen Reader What is a [CDN](https://www.webopedia.com/TERM/C/CDN.html#:~:text=A%20content%20delivery%20network%20(CDN,and%20the%20content%20delivery%20server.)? Why would this be a better way for us to manage images? When use the Div & Background Technique, why do we need to use these other properties? background-repeat , background-image , background-size , background-position What do we mean by semantic ? What does minified code mean? Brain, Music, & Gravatars What music stimulates you for concentration? Why is Nature so beneficial to mental and emotional health? How do you think you can practice more Nature? If overstimulation is toxic to your IQ, how can you limit your exposure to overstimulation? Why is loud music linked to Dementia? If sleeping is so important, how can you get better sleep? Why do you think mental and emotional health goes unspoken so often? Open-Source What is Minified Code? Why do we need it? What is its purpose? What does Open-Source mean? How is it used? Where do you see it in the wild? Why is documentation so important? How do you use documentation? What are your strategies for approaching documentation? Why is open-source important to the development of human-centered technology? How do you think open-source played a role in the fast and vast expansion of the web? How do you think you can use Open-source code to facilitate the building of your Capstone Project? Where do you find open-source code? Does anyone have some interesting open-code they'd like to share with the class? Various Object Methods & Event Listeners Can you name 3 properties, 3 methods, 3 events of each of these objects: Window Document Console Body How do they look to you in your mind? What does your Object Model look like? What questions do you have? Is code starting to mean something to you yet? What is inheritance?","title":"Day 7 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-7/#class-7-questions-for-discussion","text":"","title":"Class 7 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-7/#replace-elements-and-image-element","text":"What is the difference between an HTML element and an HTML tag? Can you think of accessibility issues other than visual impairment that should be considered while inserting images, and how they might be addressed? What is Hyper Text Transfer Protocol? What's the difference between a Pathname and a URL? Syntactically and procedurally? What are HTML Global Attributes? Can you name a few? What does Void Element mean? Pathname vs URL URL HTML Global Attributes Void Element Screen Reader What is a [CDN](https://www.webopedia.com/TERM/C/CDN.html#:~:text=A%20content%20delivery%20network%20(CDN,and%20the%20content%20delivery%20server.)? Why would this be a better way for us to manage images? When use the Div & Background Technique, why do we need to use these other properties? background-repeat , background-image , background-size , background-position What do we mean by semantic ? What does minified code mean?","title":"Replace Elements and Image Element"},{"location":"additionalResources/questionsForDiscussion/qfd-class-7/#brain-music-gravatars","text":"What music stimulates you for concentration? Why is Nature so beneficial to mental and emotional health? How do you think you can practice more Nature? If overstimulation is toxic to your IQ, how can you limit your exposure to overstimulation? Why is loud music linked to Dementia? If sleeping is so important, how can you get better sleep? Why do you think mental and emotional health goes unspoken so often?","title":"Brain, Music, &amp; Gravatars"},{"location":"additionalResources/questionsForDiscussion/qfd-class-7/#open-source","text":"What is Minified Code? Why do we need it? What is its purpose? What does Open-Source mean? How is it used? Where do you see it in the wild? Why is documentation so important? How do you use documentation? What are your strategies for approaching documentation? Why is open-source important to the development of human-centered technology? How do you think open-source played a role in the fast and vast expansion of the web? How do you think you can use Open-source code to facilitate the building of your Capstone Project? Where do you find open-source code? Does anyone have some interesting open-code they'd like to share with the class?","title":"Open-Source"},{"location":"additionalResources/questionsForDiscussion/qfd-class-7/#various-object-methods-event-listeners","text":"Can you name 3 properties, 3 methods, 3 events of each of these objects: Window Document Console Body How do they look to you in your mind? What does your Object Model look like? What questions do you have? Is code starting to mean something to you yet? What is inheritance?","title":"Various Object Methods &amp; Event Listeners"},{"location":"additionalResources/questionsForDiscussion/qfd-class-8/","text":"Class 8 - Questions for Discussion poster autoplay controls .webm format Why would we use .webm formatted videos? What does it mean to have your video content on your server? What is a server? What are the security risks of iframe? Are there work-arounds? When/why would you use <source> tags within a <video> element?","title":"Day 8 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-8/#class-8-questions-for-discussion","text":"poster autoplay controls .webm format Why would we use .webm formatted videos? What does it mean to have your video content on your server? What is a server? What are the security risks of iframe? Are there work-arounds? When/why would you use <source> tags within a <video> element?","title":"Class 8 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-9/","text":"Class 9 - Questions for Discussion The Console Why is it important for us to use the console? What do you find difficult about the console in Chrome? Console Terminal Debug Operating System JavaScript Syntax Function Keyword/Reserved Words Name a Function/Declare a Function Call/Invoke/Execute a Function Token Variable Parameter Method Function Body Syntax What's a Data Type? Types: String vs Number Synchronous What is a function? Why do we need them? What's the difference between declaring a function and calling a function? Type Array 0-indexed Number Type - Syntax? Use? Methods? String Type - Syntax? Use? Methods? Function Type - Syntax? Use? Methods? Array Type - Syntax? Use? Methods? Bracket-notation vs Dot-Notation? When? Why? Syntax? Why would we use an array over a String or Number data type? How do you describe data type? What can be stored in an Array? What are two ways to access the last value of an array? What is the syntax to create an array? Loops Initial Expression Condition/Conditional Statement Increment Expression Action Statement Iterate Length Property What is the syntax of a for loop? Explain the syntax of a while loop. When would we use a while loop over a for loop? How does the following code work? 1 2 3 4 5 6 7 8 9 10 11 let alphabet = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' ] let digits = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] const logCharacters = ( arr ) => { for ( i = 0 ; i < arr . length ; i ++ ){ console . log ( \"current character is \" + arr [ i ]); } } logCharacters ( alphabet ) logCharacters ( digits ) Use this code to create another function called getEvenNumbers : a function that returns only even numbers as an array.","title":"Day 9 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-9/#class-9-questions-for-discussion","text":"","title":"Class 9 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-9/#the-console","text":"Why is it important for us to use the console? What do you find difficult about the console in Chrome? Console Terminal Debug Operating System","title":"The Console"},{"location":"additionalResources/questionsForDiscussion/qfd-class-9/#javascript-syntax","text":"Function Keyword/Reserved Words Name a Function/Declare a Function Call/Invoke/Execute a Function Token Variable Parameter Method Function Body Syntax What's a Data Type? Types: String vs Number Synchronous What is a function? Why do we need them? What's the difference between declaring a function and calling a function?","title":"JavaScript Syntax"},{"location":"additionalResources/questionsForDiscussion/qfd-class-9/#type-array","text":"0-indexed Number Type - Syntax? Use? Methods? String Type - Syntax? Use? Methods? Function Type - Syntax? Use? Methods? Array Type - Syntax? Use? Methods? Bracket-notation vs Dot-Notation? When? Why? Syntax? Why would we use an array over a String or Number data type? How do you describe data type? What can be stored in an Array? What are two ways to access the last value of an array? What is the syntax to create an array?","title":"Type Array"},{"location":"additionalResources/questionsForDiscussion/qfd-class-9/#loops","text":"Initial Expression Condition/Conditional Statement Increment Expression Action Statement Iterate Length Property What is the syntax of a for loop? Explain the syntax of a while loop. When would we use a while loop over a for loop? How does the following code work? 1 2 3 4 5 6 7 8 9 10 11 let alphabet = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' ] let digits = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] const logCharacters = ( arr ) => { for ( i = 0 ; i < arr . length ; i ++ ){ console . log ( \"current character is \" + arr [ i ]); } } logCharacters ( alphabet ) logCharacters ( digits ) Use this code to create another function called getEvenNumbers : a function that returns only even numbers as an array.","title":"Loops"},{"location":"module-1/boxModel-border/","text":"Box Model: Border The border of an element sits just outside the padding and before the margin, usually invisible. In fact, all HTML Elements have a border but have a default value of null , meaning you won't see them (See, Default CSS Values Reference ). To make a border visible you need to set three values: border-style , border-width , and border-color . Try it ! 1 < p > Hello World </ p > 1 2 3 4 5 p { border-style : groove ; border-width : 12 pt ; border-color : #FF9633 ; } Just like padding (and margin) there is a short-hand, border : 1 2 3 p { border : groove 12 pt #AA9933 ; } NOTE: Again, this short-hand comes with a warning: it is less readable than the long-hand form. More Long-Hand To complicate things a little more there are properties that allow us to style each side of the border differently. This isn't all that common but it becomes VERY useful when you're creating strange and interesting shapes on the screen. Try it ! 1 2 3 4 5 6 7 8 9 10 11 12 13 p { border-style : groove ; border-top-color : blue ; border-top-width : 75 pt ; border-right-color : green ; border-right-width : 40 pt ; border-right-style : dotted ; border-bottom-color : purple ; border-bottom-width : 100 pt ; border-left-color : red ; border-left-width : 60 pt ; border-left-style : dotted ; } Above you can see there are properties for each side so you are able to control -style , -color , and -width of each side as you please!! Border Counts for Total Width There's a small \"gotcha\" with borders. Because borders are often invisible they don't have a value on the screen which means that count in the total amount of \"available space\". But, when you start add value to the border-width , it will start to push outward affecting the element's neighbor(s). The docs will say: \"Although an element's border is bound to the element itself, border settings will affect neighboring elements.\" NOTE: Check out the docs ahead to see all the values these properties can take. Additional Resources W3S Docs - Border s CodePen - Box Model Visualizer W3S Docs - Default CSS Values Reference","title":"Border"},{"location":"module-1/boxModel-border/#box-model-border","text":"The border of an element sits just outside the padding and before the margin, usually invisible. In fact, all HTML Elements have a border but have a default value of null , meaning you won't see them (See, Default CSS Values Reference ). To make a border visible you need to set three values: border-style , border-width , and border-color . Try it ! 1 < p > Hello World </ p > 1 2 3 4 5 p { border-style : groove ; border-width : 12 pt ; border-color : #FF9633 ; } Just like padding (and margin) there is a short-hand, border : 1 2 3 p { border : groove 12 pt #AA9933 ; } NOTE: Again, this short-hand comes with a warning: it is less readable than the long-hand form.","title":"Box Model: Border"},{"location":"module-1/boxModel-border/#more-long-hand","text":"To complicate things a little more there are properties that allow us to style each side of the border differently. This isn't all that common but it becomes VERY useful when you're creating strange and interesting shapes on the screen. Try it ! 1 2 3 4 5 6 7 8 9 10 11 12 13 p { border-style : groove ; border-top-color : blue ; border-top-width : 75 pt ; border-right-color : green ; border-right-width : 40 pt ; border-right-style : dotted ; border-bottom-color : purple ; border-bottom-width : 100 pt ; border-left-color : red ; border-left-width : 60 pt ; border-left-style : dotted ; } Above you can see there are properties for each side so you are able to control -style , -color , and -width of each side as you please!!","title":"More Long-Hand"},{"location":"module-1/boxModel-border/#border-counts-for-total-width","text":"There's a small \"gotcha\" with borders. Because borders are often invisible they don't have a value on the screen which means that count in the total amount of \"available space\". But, when you start add value to the border-width , it will start to push outward affecting the element's neighbor(s). The docs will say: \"Although an element's border is bound to the element itself, border settings will affect neighboring elements.\" NOTE: Check out the docs ahead to see all the values these properties can take.","title":"Border Counts for Total Width"},{"location":"module-1/boxModel-border/#additional-resources","text":"W3S Docs - Border s CodePen - Box Model Visualizer W3S Docs - Default CSS Values Reference","title":"Additional Resources"},{"location":"module-1/boxModel-margin/","text":"Box Model: Margin Continuing on with our Box Model properties, we arrive now at margin . Beyond the edge of the border lies the margin . If you add margin to any side of an element, it will push against other elements near it and create an invisible barrier between the elements. If you were looking at an image gallery, the margins would create the gutter between each column and row of images. Just like padding and border we can set the values of all four margins like the following: 1 2 3 4 5 6 p { margin-top : 10 % ; margin-right : 15 % ; margin-bottom : 1 % ; margin-left : 15 % } The Margin Short-Hand Again, like padding and border there are short-hands versions that are harder to read. However, if you have uniform margin on all for side it maybe be easier to just write something like this: 1 2 3 4 /* In this example, 15pt of margin will be applied to all four sides of the element */ . margin-on-all-sides { margin : 15 pt ; } And if you have equal margins on the left and right and equal margins on the top & bottom you could right it like this: 1 2 3 4 /* In this example, 15pt will be applied to the TOP and BOTTOM margins, 30pt to the LEFT and RIGHT margins*/ . TopBottom-LeftRight { margin : 15 pt 30 pt ; } This is a very common form of the short-hand to center an element: 1 2 3 . topBottom-leftRight-centered { margin : 15 pt auto ; } The Worst Short-Hand The last two short-hands are so confusing they're not really worth mentioning but just so you have them as a reference here they are: 1 2 3 4 5 6 7 8 9 10 11 12 13 /* the TOP margin will be 15pt, the RIGHT 30pt, the BOTTOM 25pt, the LEFT 20pt (clockwise)*/ . T-R-B-L { margin : 15 pt 30 pt 25 pt 20 pt ; } /* :yuck: */ /* In this example, 15pt on the TOP margin, 30pt on LEFT and RIGHT margins, 45pt on BOTTOM margin*/ . Top-LeftRight-Bottom { margin : 15 pt 30 pt 45 pt ; /* :barf: */ } You can do the same thing but with a little more typing that results in far more readable code ! 1 2 3 4 5 6 7 8 . T-R-B-L { margin-top : 15 pt ; margin-right : 30 pt ; margin-bottom : 25 pt ; margin-left : 20 pt ; } /* YAY, MUCH MORE READABLE CODE WE'LL GET HIRED FOR!!!!! */ Additional Resources W3S Docs - Margin CodePen - Box Model Visualizer W3S Docs - Default CSS Values Reference","title":"Margin"},{"location":"module-1/boxModel-margin/#box-model-margin","text":"Continuing on with our Box Model properties, we arrive now at margin . Beyond the edge of the border lies the margin . If you add margin to any side of an element, it will push against other elements near it and create an invisible barrier between the elements. If you were looking at an image gallery, the margins would create the gutter between each column and row of images. Just like padding and border we can set the values of all four margins like the following: 1 2 3 4 5 6 p { margin-top : 10 % ; margin-right : 15 % ; margin-bottom : 1 % ; margin-left : 15 % }","title":"Box Model: Margin"},{"location":"module-1/boxModel-margin/#the-margin-short-hand","text":"Again, like padding and border there are short-hands versions that are harder to read. However, if you have uniform margin on all for side it maybe be easier to just write something like this: 1 2 3 4 /* In this example, 15pt of margin will be applied to all four sides of the element */ . margin-on-all-sides { margin : 15 pt ; } And if you have equal margins on the left and right and equal margins on the top & bottom you could right it like this: 1 2 3 4 /* In this example, 15pt will be applied to the TOP and BOTTOM margins, 30pt to the LEFT and RIGHT margins*/ . TopBottom-LeftRight { margin : 15 pt 30 pt ; } This is a very common form of the short-hand to center an element: 1 2 3 . topBottom-leftRight-centered { margin : 15 pt auto ; }","title":"The Margin Short-Hand"},{"location":"module-1/boxModel-margin/#the-worst-short-hand","text":"The last two short-hands are so confusing they're not really worth mentioning but just so you have them as a reference here they are: 1 2 3 4 5 6 7 8 9 10 11 12 13 /* the TOP margin will be 15pt, the RIGHT 30pt, the BOTTOM 25pt, the LEFT 20pt (clockwise)*/ . T-R-B-L { margin : 15 pt 30 pt 25 pt 20 pt ; } /* :yuck: */ /* In this example, 15pt on the TOP margin, 30pt on LEFT and RIGHT margins, 45pt on BOTTOM margin*/ . Top-LeftRight-Bottom { margin : 15 pt 30 pt 45 pt ; /* :barf: */ } You can do the same thing but with a little more typing that results in far more readable code ! 1 2 3 4 5 6 7 8 . T-R-B-L { margin-top : 15 pt ; margin-right : 30 pt ; margin-bottom : 25 pt ; margin-left : 20 pt ; } /* YAY, MUCH MORE READABLE CODE WE'LL GET HIRED FOR!!!!! */","title":"The Worst Short-Hand"},{"location":"module-1/boxModel-margin/#additional-resources","text":"W3S Docs - Margin CodePen - Box Model Visualizer W3S Docs - Default CSS Values Reference","title":"Additional Resources"},{"location":"module-1/boxModel-padding/","text":"Box Model: Padding After we've decided how big an element's content should be using height: and width: we should starting thinking about the space between the content and the border, the padding . Padding is the space between the element's border and the content itself. If you had a bird's-eye-view of a pool table, you can think of the padding as the cushions or banks between the wooden outside border and the content inside, the billiard balls and green felt. As you saw before there are for properties that address the padding of an element: padding-top - holds the value of the padding at the top of the element padding-right - holds the value of the padding on the right side of the element padding-bottom - holds the value of the padding at the bottom of the element padding-left - holds the value of the padding on the left side of the element Each of these properties gives you control of the four different sides of the element. However, if you intend to have equal padding on either side and a different amount of padding for the top & bottom you might try the short-hand property: padding and write them with only two values: 1 2 3 4 /* The element(s) with the class name: my-other-element will have 20 points of padding on the top & bottom and 10 points of padding on the right & left */ . my-element { padding : 20 pt 10 pt ; } And if you wanted to have an equal amount of padding all the way around you could write it like this: 1 2 3 4 /* The element(s) with the class name: my-other-element will have an absolute padding of 20 points on all four sides*/ . my-other-element { padding : 20 pt ; } While you can use four values to specify the four sides in this short-hand it gets hard to read and remember the order : TOP, RIGHT, BOTTOM, LEFT (clockwise) 1 2 3 4 /* The element(s) with the class name: my-last-element will have 20 points of padding on the top, 5 points on the right, 10 points on the bottom and 1 point of padding on the left*/ . my-last-element { padding : 20 pt 5 pt 10 pt 1 pt ; } For code readability , you should use the long-hand form of the padding properties to specify 4 different values: 1 2 3 4 5 6 . my-readable-code { padding-top : 20 pt ; padding-right : 5 pt ; padding-bottom : 10 pt ; padding-left : 1 pt ; } Additional Resources W3S Docs - Padding CodePen - Box Model Visualizer W3S Docs - Default CSS Values Reference","title":"Padding"},{"location":"module-1/boxModel-padding/#box-model-padding","text":"After we've decided how big an element's content should be using height: and width: we should starting thinking about the space between the content and the border, the padding . Padding is the space between the element's border and the content itself. If you had a bird's-eye-view of a pool table, you can think of the padding as the cushions or banks between the wooden outside border and the content inside, the billiard balls and green felt. As you saw before there are for properties that address the padding of an element: padding-top - holds the value of the padding at the top of the element padding-right - holds the value of the padding on the right side of the element padding-bottom - holds the value of the padding at the bottom of the element padding-left - holds the value of the padding on the left side of the element Each of these properties gives you control of the four different sides of the element. However, if you intend to have equal padding on either side and a different amount of padding for the top & bottom you might try the short-hand property: padding and write them with only two values: 1 2 3 4 /* The element(s) with the class name: my-other-element will have 20 points of padding on the top & bottom and 10 points of padding on the right & left */ . my-element { padding : 20 pt 10 pt ; } And if you wanted to have an equal amount of padding all the way around you could write it like this: 1 2 3 4 /* The element(s) with the class name: my-other-element will have an absolute padding of 20 points on all four sides*/ . my-other-element { padding : 20 pt ; } While you can use four values to specify the four sides in this short-hand it gets hard to read and remember the order : TOP, RIGHT, BOTTOM, LEFT (clockwise) 1 2 3 4 /* The element(s) with the class name: my-last-element will have 20 points of padding on the top, 5 points on the right, 10 points on the bottom and 1 point of padding on the left*/ . my-last-element { padding : 20 pt 5 pt 10 pt 1 pt ; } For code readability , you should use the long-hand form of the padding properties to specify 4 different values: 1 2 3 4 5 6 . my-readable-code { padding-top : 20 pt ; padding-right : 5 pt ; padding-bottom : 10 pt ; padding-left : 1 pt ; }","title":"Box Model: Padding"},{"location":"module-1/boxModel-padding/#additional-resources","text":"W3S Docs - Padding CodePen - Box Model Visualizer W3S Docs - Default CSS Values Reference","title":"Additional Resources"},{"location":"module-1/boxModel-width%26height/","text":"Content Width & Height + New Length Units Since you already know these two values let's take some time to cover them quickly but also introduce to you some other useful values/ length units you can use for margin, padding, and border as well as height and width. New Length Units By default, the dimension of an element is the size of the content contained within the element. This means that when you create an <article> element it won't have a height that you can see on the screen because there is nothing inside of it. But as soon as you add content you'll be able to see it grow to fit the amount of content. We can, of course, make the element larger than the content by changing its width and height properties. The width and height properties take the traditional px (pixel) unit like the other properties you've read about so far, but now we'll throw a curve ball at you: All of the properties you've read about take far more length units than just the traditional px , including: in , cm , mm , em , rem , vh , vw , % , pt and many more. \"Why so many?\" That's a good question that doesn't really need to be answered right now. Suffice it to say that there have been many additions to the CSS language trying to accommodate for designers working on computers. The ones I'd like you to focus your attention on right now are % and pt . Percentage is Dynamic % , or percentage , tells the child element to be displayed at a specified percentage, or proportion, of its parent element. Check out the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!-- index.html file --> < article > < p > The red fox jumped over the green turtle. </ p > </ article > < style > /* style.css file */ article { width : 500 px ; height : 600 px ; } article > p { width : 90 % ; height : 50 % ; } </ style > In the example above, the <article> element, or parent element, will be 500px by 600px while the <p> element, or child element, will be rendered at 450px( 90% ) by 300px( 50% ) because it is set to be a percentage of its parent element. This is really useful when parent elements are set to be sized in proportion to their parent element like maybe . . . <body> . See the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <!-- index.html file --> < article > < p > The red fox jumped over the green turtle. </ p > </ article > < style > /* style.css file */ /* The <body> element will be automatically set to the height and width of the viewport, or display of the computer, tablet, or phone's window */ body { width : auto ; height : auto ; } /* Then the <article> element will be set to 50% as wide as the whole <body> and 100% as tall as the <body> */ article { width : 50 % ; height : 100 % ; } /* Can I assume you can guess what the paragraph element will do? */ article > p { width : 90 % ; height : 50 % ; } </ style > Using percentages is advantageous because you will never know all the sizes of screens that will view your web pages; this way you can tell elements to be a specific percentage of the available area instead of hard coded pixels! Follow It Up with Min- & Max- When using percentages as values it's important to include the min-width / max-width and min-height / max-height properties so as to avoid your elements being rendered in sizes that are unmanageable for the user. See below: 1 2 3 4 5 6 7 8 body { width : auto ; height : auto ; min-width : 100 pt ; /* <--- Notice the use of the pt unit */ max-width : 1000 pt ; min-height : 150 pt ; max-height : 1500 pt ; } Above you saw the use of pt or points . These are a little more reliable than px which are relative to the number of pixels in a user's display and other factors . The pt value is equal to 1/72nd of an inch so you can calculate a little more easily the size of your elements. View-height & View-Width The last units you should know about are vh and vw which stand for view-height and view-width , respectively. These are very useful units except for the fact that they are not supported on all previous versions of mobile browsers. Additional Resources W3S Docs - Height & Width CodePen - Box Model Visualizer W3S Docs - Default CSS Values Reference","title":"Width & Height"},{"location":"module-1/boxModel-width%26height/#content-width-height-new-length-units","text":"Since you already know these two values let's take some time to cover them quickly but also introduce to you some other useful values/ length units you can use for margin, padding, and border as well as height and width.","title":"Content Width &amp; Height + New Length Units"},{"location":"module-1/boxModel-width%26height/#new-length-units","text":"By default, the dimension of an element is the size of the content contained within the element. This means that when you create an <article> element it won't have a height that you can see on the screen because there is nothing inside of it. But as soon as you add content you'll be able to see it grow to fit the amount of content. We can, of course, make the element larger than the content by changing its width and height properties. The width and height properties take the traditional px (pixel) unit like the other properties you've read about so far, but now we'll throw a curve ball at you: All of the properties you've read about take far more length units than just the traditional px , including: in , cm , mm , em , rem , vh , vw , % , pt and many more. \"Why so many?\" That's a good question that doesn't really need to be answered right now. Suffice it to say that there have been many additions to the CSS language trying to accommodate for designers working on computers. The ones I'd like you to focus your attention on right now are % and pt .","title":"New Length Units"},{"location":"module-1/boxModel-width%26height/#percentage-is-dynamic","text":"% , or percentage , tells the child element to be displayed at a specified percentage, or proportion, of its parent element. Check out the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!-- index.html file --> < article > < p > The red fox jumped over the green turtle. </ p > </ article > < style > /* style.css file */ article { width : 500 px ; height : 600 px ; } article > p { width : 90 % ; height : 50 % ; } </ style > In the example above, the <article> element, or parent element, will be 500px by 600px while the <p> element, or child element, will be rendered at 450px( 90% ) by 300px( 50% ) because it is set to be a percentage of its parent element. This is really useful when parent elements are set to be sized in proportion to their parent element like maybe . . . <body> . See the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <!-- index.html file --> < article > < p > The red fox jumped over the green turtle. </ p > </ article > < style > /* style.css file */ /* The <body> element will be automatically set to the height and width of the viewport, or display of the computer, tablet, or phone's window */ body { width : auto ; height : auto ; } /* Then the <article> element will be set to 50% as wide as the whole <body> and 100% as tall as the <body> */ article { width : 50 % ; height : 100 % ; } /* Can I assume you can guess what the paragraph element will do? */ article > p { width : 90 % ; height : 50 % ; } </ style > Using percentages is advantageous because you will never know all the sizes of screens that will view your web pages; this way you can tell elements to be a specific percentage of the available area instead of hard coded pixels!","title":"Percentage is Dynamic"},{"location":"module-1/boxModel-width%26height/#follow-it-up-with-min-max-","text":"When using percentages as values it's important to include the min-width / max-width and min-height / max-height properties so as to avoid your elements being rendered in sizes that are unmanageable for the user. See below: 1 2 3 4 5 6 7 8 body { width : auto ; height : auto ; min-width : 100 pt ; /* <--- Notice the use of the pt unit */ max-width : 1000 pt ; min-height : 150 pt ; max-height : 1500 pt ; } Above you saw the use of pt or points . These are a little more reliable than px which are relative to the number of pixels in a user's display and other factors . The pt value is equal to 1/72nd of an inch so you can calculate a little more easily the size of your elements.","title":"Follow It Up with Min- &amp; Max-"},{"location":"module-1/boxModel-width%26height/#view-height-view-width","text":"The last units you should know about are vh and vw which stand for view-height and view-width , respectively. These are very useful units except for the fact that they are not supported on all previous versions of mobile browsers.","title":"View-height &amp; View-Width"},{"location":"module-1/boxModel-width%26height/#additional-resources","text":"W3S Docs - Height & Width CodePen - Box Model Visualizer W3S Docs - Default CSS Values Reference","title":"Additional Resources"},{"location":"module-1/class-1/","text":"Class One: Hosting Your Landing Page Greet, Outline, and Objectify Today we're going to: OBJECTIVE: Review previous knowledge and engage on a deeper level. Ask why do we need to do these things?. Intro of Instructor + Staff - 15 mins Student Intros - 30 mins Welcome to the class space with quick tour - 3 mins Questions for Student Led Discussion Account Setup/Check-In - 20 mins Downloads Review - 10 mins Creation Time Host Your Landing Page - 45 mins Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Learning Structure and Expectations - 10 mins What's next? - 2 mins Intros Intro of Instructor: Who you are? What you do for full-time employment? Why you teach? How you like to work within the class and the expectations you have for students? Intro to: the school, Why it was created? What we do? How we do it? the program and what you'll learn in it, Why - We teach to industry standards while meeting students where they are by ramping their learning curves What - Full-stack web development How - Flipped classroom, student owns their learning with the guidance on classroom facilitation as a small piece of everything they learn. this course and what we'll learn during it, Front-end web development Minimal programming but lots of interaction with websites the textbook and how to navigate it There are always Pre-Class Lessons (homework) to complete. Look ahead into each class and write down your questions to be asked during class. Intro of support staff: Campus Director and Tutor(s) + Tutor Page invitation to RocketChat or email anytime set up tutoring sessions important: come to tutoring sessions on the weekends Ice Breaker 3 mins - Look across the table and find a classmate, someone that is interested in the same career as you and ask them the following questions to get to know them: What's your name? What do you currently do? Why do you want to get into Web Development? What do you like to do to exercise your mind? 3 mins - Now turn to your left or right and find another aspiring developer. Ask them these questions: What's your name? Have you always lived in Austin? Where? What do you know about the tech world? Do you have any pets? Species? Names? 3 mins - Now turn the opposite way and find another collaborator. Ask them these questions: What's your name? Tell me about an interesting book or article you've read lately? What do you think about when you watch the stars? What is a dream of yours you are willing to work toward and figure out how to bring it to fruition? 3 mins - Last time, get up and walk to the other side of the classroom to find a different colleague to ask them these questions: What's your name? What's your Zodiac sign? What daily self-care methods do you practice to maintain good health? What is a fear you have about this course? How do you plan to overcome it? 15 mins - Show-And-Tell , Finally, stop where you are, turn toward the rest of the class, and as you feel the need, raise your hand to introduce your new (last/most recent) friend to the class. Example: \"Hello, my friend, James, is a Libra, born Oct 15th. He says that journaling, drinking water, and running help him sleep soundly and have bright useful days. He's nervous that he doesn't know computers well enough but he thinks if he keeps reading, breathing, and resting his mind he can stay focused on the marathon and not just the dash!\" Everyone should introduce their new friend. Now that we know each other let's sit down and get to work! Questions for Student Led Discussion, 35 mins Questions to prompt discussion Accounts, Downloads, and Git Software Check-In, 30 minutes In this section we'll take things step at a time with time to slow down and get help, we'll call them Pause and Partner where students that were successful in the steps will partner with students that weren't to help them through any troubles. This will help conserve class time so your instructor can teach thing everyone needs to learn. We'll be using these two programs tonight and for the rest of class. If you didn't get both of them downloaded and opened up, ask your new friends if they did so they can help you out. The IDE : Visual Studio Code Plus the extension: Live-Server The version control software: Git For Windows How To Install Git on Windows Install Git For Mac Install HomeBrew - /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Install Git - brew install git NOTE: There is no icon for this program, just go to your terminal/shell/commandPrompt/bash and type git + Enter Pause and Partner: > Did anyone NOT get these downloaded? Did anyone not get them opened? Partner up and help each other. Create a Repo on GitHub First, Sign-in to GitHub. At the top-right of the screen click on the \"+\" icon and select \"New Repository\" In the \"Repository Name\" field type: web101_firstName_lastName NOTE: remember to change firstName for your actual first name and lastName for your actual last name. In the \"Description field\" type: \"This is my portfolio website!\" Make it \"Public\" by clicking the radio button next to Public. So your instructor can view it. Check the box to \"Initialize this repository with a README.md\" NOTE: This is a file we'll use later on and you'll understand why it's important to use later on. Click \"Create Repository\". After this you should see a screen that looks like this: Find your Portfolio Folder in the terminal by either: dragging and dropping the folder in the terminal Use the command cd to change directories until you're inside the folder. Type pwd to confirm your in the correct folder. Then use these commands one after another. They're modified a little from the image above. git init - this will initialize the folder as a folder for the git software to watch. git add -A - this adds all the files you created for your Portfolio Landing Page. git commit -m \"first commit\" - This stages your new files to be added to the remote remote, you're \"committing\" to the changes. git branch -M main - GitHub recently changed the name of the \"main\" branch from master to main . This command ensure you're using main as your \"main\" branch. git remote add origin https://github.com/YOUR-USERNAME/web101-firstName_lastName.git - Attaches the remote repo to this local folder. NOTE: be sure you replace the link wit the link given to YOU from gitHub. git push -u origin main - pushes your committed files up to the remote repo. Watch the progress in your terminal then refresh the tab with your GitHub Repo to see if the files are there. In your terminal you're looking for feedback that looks like this: Pause and Partner: What problems have you encountered? Is there anyone that was rejected by GitHub? Password? Username? Let's partner up according to our problems and help each other get through them! Who's successful and who is struggling? Follow-Up Video: Creating a Repo and Using Git Is anyone having a trouble push ing? Maybe your configurations aren't set correctly. See next section: Git Configurations NOTE: Mac users can learn to setup the code . path for VS Code in this video. Git Configurations When you're pushing code to a repo, Git needs to know who you are so it can sign-in to GitHub. It uses your username/email and password to do this. If you don't setup this configuration, git will populate your email with an address assigned to your computer that doesn't match your account on GitHub. NOTE: if while doing these steps you'll see a strange looking screen pop up, it might be your computer's default text editor, VIM or VI . Just follow the instructions below and/or watch the video to use it. Set up Git Config(urations) All Machine Users Set your git username. In your terminal, copy/paste this code and replace YOUR-USERNAME with your GitHub username: git config --global user.name \"YOUR-USERNAME\" + ENTER Now, set your email. In your terminal, copy/paste this code and replace YOUR EMAIL with the email you used to create your GitHub account: git config --global user.email \"YOURemail@address.com\" + ENTER Note: If it asks you for a password this is your GitHub account password VIM/VI - How to Use It When doing your git config you may see a more unusual window in your terminal. it will have a bunch of ~ or # along the left side. This is a built-in text editor like VS Code but very stripped down. It allows you to change files and write code. For this step you'll be changing your .gitconfig file to contain your username and email. VIM has two modes: Insert (input text) and Command (move around and do stuff). For now, we really only need to insert text, but you'll need to know how to get in and out of the two different modes. To start the Insert Mode : Press i to enter Insert mode and press esc to begin Command mode . You'll know which one you're in because \"insert\" will appear at the bottom of the screen when you enter insert mode. While Command Mode is active you navigate around the page with your arrow keys (d-pad). When you need to type in your email or anything else, press i . You're then free to type in whatever you need. In this .gitconfig file all lines that begin with # are read as \"comments\" meaning the computer doesn't read them. Make sure you remove them from the important lines. Ask your instructor. When you're finished inserting, press esc to move back to Command mode . Then to exit and save the file type :wq + ENTER. This simply says to the computer: \"I'm about to give you a command( : ), write the file( w ) then quit the program( q ).\" NOTE: If you're lost, it's totally fine. VIM is an old relic that's stuck around and become a hipster text editor but really it's there so you can always change files, no matter what! If you're having trouble: Git Config How-To Video Pause and Partner: How we doing? Try git push ing again. Who hasn't been able to push? Practice It Again: Add A file and Push It Now that you've configured your git software and learned the status , add , commit , push process, let's practice using git again. Create another file in the same directory called: .gitignore . Then copy/paste this code into that file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 ### macOS ### # General .DS_Store .AppleDouble .LSOverride # Icon must end with two \\r Icon # Thumbnails ._* # Files that might appear in the root of a volume .DocumentRevisions-V100 .fseventsd .Spotlight-V100 .TemporaryItems .Trashes .VolumeIcon.icns .com.apple.timemachine.donotpresent # Directories potentially created on remote AFP share .AppleDB .AppleDesktop Network Trash Folder Temporary Items .apdisk ### Windows ### # Windows thumbnail cache files Thumbs.db Thumbs.db:encryptable ehthumbs.db ehthumbs_vista.db # Dump file *.stackdump # Folder config file [Dd]esktop.ini # Recycle Bin used on file shares $RECYCLE.BIN/ # Windows Installer files *.cab *.msi *.msix *.msm *.msp # Windows shortcuts *.lnk # Sensitive Environment Variables .env # VS CODE .vscode/settings.json # End of https://www.toptal.com/developers/gitignore/api/macos,windows NOTE: This step is mainly for Mac users but really all users should know how to use .gitignore which is a file that git software looks for and will ignore whatever you write inside of it. Its good practice to include this file with all projects you do in the future. To move this file up to your remote repo by running these commands in order: git status - check to see what files you've changed and that you hit \"SAVE\" git add .gitignore - Adds the changed file to the staging area. git commit -m \"to git to ignore certain files\" - Commits the file changes with a descriptive message about the changes made. git push - pushes the change from the staging area to the remote repo. Make a note for yourself!! Every time you make substantial changes to your code bases you'll run these commands in this order EVERYTIME! Pause & Partner : How we doing? Any questions about these four commands? Who didn't get this .gitignore file into their repo? Serve Your Landing Page Now that your web page is hosted on a publicly available computer, GitHub's server, you can change the permissions and allow for it to seen by the world! Go back to the repo you just created on GitHub then go to the \"Settings Tab\". Under the Settings, scroll down almost to the bottom of the page until you see \"GitHub Pages\". Click the None dropdown and select main branch and then click \"Save\". Now, scroll back down to the \"GitHub Pages\" section and you'll see a section that says \"Your site is ready to be published at https://yourusername.github.io/ .\" - This is the ROOT of your live site. In order to see your live site, you need to put in the rest of the URL's path . Use your browser to navigate to: https://YOUR-GITHUB-USERNAME.github.io/ACA_web101_FIRSTNAME_LASTNAME/myPortfolio/index.html NOTE: Do you see how the forward-slashes / in the URL look the exact same as the path names in our <link/> tags? That's because server-computers hold files the same way your personal computer does and the structure of the directories are the same, i.e. the current path to your portfolio looks like: documents/DevFolder/myPortfolio/index.html . All computers are built the same way and talk the same way. Pause & Partner * Where are we? Is anyone able to see their site live? It can take a few minutes to populate. * Who's lost? Turning in Your Assignments Your instructor will show you where and how to turn your assignments in using this live GitHub link as an example. Important Notes About Git and GitHub DON'T make changes to your code using the tools on GitHub like editing, deleting, creating, or uploading any files. Only make changes in your editor (VS Code) and push them up EVERY TIME. No exceptions. If you don't it may cause you some headaches. Git software is powerful but confusing for beginners. If something goes wrong while using git follow these steps: PLEASE DON'T delete your local folder with work in it that is not on GitHub. That is your precious time you are deleting! THIS IS WHY WE KEEP OUR CODE IN A REPO IN THE FIRST PLACE!! Check the branch you're on: git branch Change branches to see if the code you're looking for is on that branch: git checkout <NameOfBranch> Replace the \"broken\" folder with a new folder: Rename your folder on your computer web101_firstName_lastName to web101_firstName_lastName-broken Re-clone your repository from GitHub git clone https://github.com/username/ACA_web101_firstName_lastName.git Copy over all changed files from ACA_web101_firstName_lastName-broken folder into the new ACA_web101_firstName_lastName git add -A - Add all new files git status - See green git commit -m \"fixed my mess-up\" - to commit the changes git push origin main or master - push your code up to GitHub. ONLY AFTER you've confirmed that all changes are on GitHub, delete the broken repo folder. Student Presentation Organization Knowledge is best when it's learned not taught. In this program instructors and the learning portal guide the student's learning journey but our students own their learning experience. You'll be assigned to teach your classmates specific topics that are related to concepts and techniques being taught throughout the course and program. This process has been proven to deepen student's understanding, boost retention, and strengthen community and interpersonal communication skills. Let's take some time look over the topics and get prepared for them. Next class we'll organized who and when each person is going for each topic. List of Student Daily Presentations Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Class One Blog assignment Review Class Structure & Expectations of Students Answer the following questions: How would you describe programming? How would you describe coding? What does Clone mean? What's a Local Machine? What's a Repo? Mentally prepare for your presentations . Next class we'll be adding an image gallery to your website so make sure you study CSS Grid & Box Model tonight and tomorrow. We'll see you then!","title":"Class 1 Hosting Your Page"},{"location":"module-1/class-1/#class-one-hosting-your-landing-page","text":"","title":"Class One: Hosting Your Landing Page"},{"location":"module-1/class-1/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: Review previous knowledge and engage on a deeper level. Ask why do we need to do these things?. Intro of Instructor + Staff - 15 mins Student Intros - 30 mins Welcome to the class space with quick tour - 3 mins Questions for Student Led Discussion Account Setup/Check-In - 20 mins Downloads Review - 10 mins Creation Time Host Your Landing Page - 45 mins Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Learning Structure and Expectations - 10 mins What's next? - 2 mins","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-1/#intros","text":"Intro of Instructor: Who you are? What you do for full-time employment? Why you teach? How you like to work within the class and the expectations you have for students? Intro to: the school, Why it was created? What we do? How we do it? the program and what you'll learn in it, Why - We teach to industry standards while meeting students where they are by ramping their learning curves What - Full-stack web development How - Flipped classroom, student owns their learning with the guidance on classroom facilitation as a small piece of everything they learn. this course and what we'll learn during it, Front-end web development Minimal programming but lots of interaction with websites the textbook and how to navigate it There are always Pre-Class Lessons (homework) to complete. Look ahead into each class and write down your questions to be asked during class. Intro of support staff: Campus Director and Tutor(s) + Tutor Page invitation to RocketChat or email anytime set up tutoring sessions important: come to tutoring sessions on the weekends","title":"Intros"},{"location":"module-1/class-1/#ice-breaker","text":"3 mins - Look across the table and find a classmate, someone that is interested in the same career as you and ask them the following questions to get to know them: What's your name? What do you currently do? Why do you want to get into Web Development? What do you like to do to exercise your mind? 3 mins - Now turn to your left or right and find another aspiring developer. Ask them these questions: What's your name? Have you always lived in Austin? Where? What do you know about the tech world? Do you have any pets? Species? Names? 3 mins - Now turn the opposite way and find another collaborator. Ask them these questions: What's your name? Tell me about an interesting book or article you've read lately? What do you think about when you watch the stars? What is a dream of yours you are willing to work toward and figure out how to bring it to fruition? 3 mins - Last time, get up and walk to the other side of the classroom to find a different colleague to ask them these questions: What's your name? What's your Zodiac sign? What daily self-care methods do you practice to maintain good health? What is a fear you have about this course? How do you plan to overcome it? 15 mins - Show-And-Tell , Finally, stop where you are, turn toward the rest of the class, and as you feel the need, raise your hand to introduce your new (last/most recent) friend to the class. Example: \"Hello, my friend, James, is a Libra, born Oct 15th. He says that journaling, drinking water, and running help him sleep soundly and have bright useful days. He's nervous that he doesn't know computers well enough but he thinks if he keeps reading, breathing, and resting his mind he can stay focused on the marathon and not just the dash!\" Everyone should introduce their new friend. Now that we know each other let's sit down and get to work!","title":"Ice Breaker"},{"location":"module-1/class-1/#questions-for-student-led-discussion-35-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 35 mins"},{"location":"module-1/class-1/#accounts-downloads-and-git-software-check-in-30-minutes","text":"In this section we'll take things step at a time with time to slow down and get help, we'll call them Pause and Partner where students that were successful in the steps will partner with students that weren't to help them through any troubles. This will help conserve class time so your instructor can teach thing everyone needs to learn. We'll be using these two programs tonight and for the rest of class. If you didn't get both of them downloaded and opened up, ask your new friends if they did so they can help you out. The IDE : Visual Studio Code Plus the extension: Live-Server The version control software: Git For Windows How To Install Git on Windows Install Git For Mac Install HomeBrew - /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Install Git - brew install git NOTE: There is no icon for this program, just go to your terminal/shell/commandPrompt/bash and type git + Enter Pause and Partner: > Did anyone NOT get these downloaded? Did anyone not get them opened? Partner up and help each other.","title":"Accounts, Downloads, and Git Software Check-In, 30 minutes"},{"location":"module-1/class-1/#create-a-repo-on-github","text":"First, Sign-in to GitHub. At the top-right of the screen click on the \"+\" icon and select \"New Repository\" In the \"Repository Name\" field type: web101_firstName_lastName NOTE: remember to change firstName for your actual first name and lastName for your actual last name. In the \"Description field\" type: \"This is my portfolio website!\" Make it \"Public\" by clicking the radio button next to Public. So your instructor can view it. Check the box to \"Initialize this repository with a README.md\" NOTE: This is a file we'll use later on and you'll understand why it's important to use later on. Click \"Create Repository\". After this you should see a screen that looks like this: Find your Portfolio Folder in the terminal by either: dragging and dropping the folder in the terminal Use the command cd to change directories until you're inside the folder. Type pwd to confirm your in the correct folder. Then use these commands one after another. They're modified a little from the image above. git init - this will initialize the folder as a folder for the git software to watch. git add -A - this adds all the files you created for your Portfolio Landing Page. git commit -m \"first commit\" - This stages your new files to be added to the remote remote, you're \"committing\" to the changes. git branch -M main - GitHub recently changed the name of the \"main\" branch from master to main . This command ensure you're using main as your \"main\" branch. git remote add origin https://github.com/YOUR-USERNAME/web101-firstName_lastName.git - Attaches the remote repo to this local folder. NOTE: be sure you replace the link wit the link given to YOU from gitHub. git push -u origin main - pushes your committed files up to the remote repo. Watch the progress in your terminal then refresh the tab with your GitHub Repo to see if the files are there. In your terminal you're looking for feedback that looks like this: Pause and Partner: What problems have you encountered? Is there anyone that was rejected by GitHub? Password? Username? Let's partner up according to our problems and help each other get through them! Who's successful and who is struggling? Follow-Up Video: Creating a Repo and Using Git Is anyone having a trouble push ing? Maybe your configurations aren't set correctly. See next section: Git Configurations NOTE: Mac users can learn to setup the code . path for VS Code in this video.","title":"Create a Repo on GitHub"},{"location":"module-1/class-1/#git-configurations","text":"When you're pushing code to a repo, Git needs to know who you are so it can sign-in to GitHub. It uses your username/email and password to do this. If you don't setup this configuration, git will populate your email with an address assigned to your computer that doesn't match your account on GitHub. NOTE: if while doing these steps you'll see a strange looking screen pop up, it might be your computer's default text editor, VIM or VI . Just follow the instructions below and/or watch the video to use it.","title":"Git Configurations"},{"location":"module-1/class-1/#set-up-git-configurations-all-machine-users","text":"Set your git username. In your terminal, copy/paste this code and replace YOUR-USERNAME with your GitHub username: git config --global user.name \"YOUR-USERNAME\" + ENTER Now, set your email. In your terminal, copy/paste this code and replace YOUR EMAIL with the email you used to create your GitHub account: git config --global user.email \"YOURemail@address.com\" + ENTER Note: If it asks you for a password this is your GitHub account password","title":"Set up Git Config(urations) All Machine Users"},{"location":"module-1/class-1/#vimvi-how-to-use-it","text":"When doing your git config you may see a more unusual window in your terminal. it will have a bunch of ~ or # along the left side. This is a built-in text editor like VS Code but very stripped down. It allows you to change files and write code. For this step you'll be changing your .gitconfig file to contain your username and email. VIM has two modes: Insert (input text) and Command (move around and do stuff). For now, we really only need to insert text, but you'll need to know how to get in and out of the two different modes. To start the Insert Mode : Press i to enter Insert mode and press esc to begin Command mode . You'll know which one you're in because \"insert\" will appear at the bottom of the screen when you enter insert mode. While Command Mode is active you navigate around the page with your arrow keys (d-pad). When you need to type in your email or anything else, press i . You're then free to type in whatever you need. In this .gitconfig file all lines that begin with # are read as \"comments\" meaning the computer doesn't read them. Make sure you remove them from the important lines. Ask your instructor. When you're finished inserting, press esc to move back to Command mode . Then to exit and save the file type :wq + ENTER. This simply says to the computer: \"I'm about to give you a command( : ), write the file( w ) then quit the program( q ).\" NOTE: If you're lost, it's totally fine. VIM is an old relic that's stuck around and become a hipster text editor but really it's there so you can always change files, no matter what! If you're having trouble: Git Config How-To Video Pause and Partner: How we doing? Try git push ing again. Who hasn't been able to push?","title":"VIM/VI - How to Use It"},{"location":"module-1/class-1/#practice-it-again-add-a-file-and-push-it","text":"Now that you've configured your git software and learned the status , add , commit , push process, let's practice using git again. Create another file in the same directory called: .gitignore . Then copy/paste this code into that file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 ### macOS ### # General .DS_Store .AppleDouble .LSOverride # Icon must end with two \\r Icon # Thumbnails ._* # Files that might appear in the root of a volume .DocumentRevisions-V100 .fseventsd .Spotlight-V100 .TemporaryItems .Trashes .VolumeIcon.icns .com.apple.timemachine.donotpresent # Directories potentially created on remote AFP share .AppleDB .AppleDesktop Network Trash Folder Temporary Items .apdisk ### Windows ### # Windows thumbnail cache files Thumbs.db Thumbs.db:encryptable ehthumbs.db ehthumbs_vista.db # Dump file *.stackdump # Folder config file [Dd]esktop.ini # Recycle Bin used on file shares $RECYCLE.BIN/ # Windows Installer files *.cab *.msi *.msix *.msm *.msp # Windows shortcuts *.lnk # Sensitive Environment Variables .env # VS CODE .vscode/settings.json # End of https://www.toptal.com/developers/gitignore/api/macos,windows NOTE: This step is mainly for Mac users but really all users should know how to use .gitignore which is a file that git software looks for and will ignore whatever you write inside of it. Its good practice to include this file with all projects you do in the future. To move this file up to your remote repo by running these commands in order: git status - check to see what files you've changed and that you hit \"SAVE\" git add .gitignore - Adds the changed file to the staging area. git commit -m \"to git to ignore certain files\" - Commits the file changes with a descriptive message about the changes made. git push - pushes the change from the staging area to the remote repo. Make a note for yourself!! Every time you make substantial changes to your code bases you'll run these commands in this order EVERYTIME! Pause & Partner : How we doing? Any questions about these four commands? Who didn't get this .gitignore file into their repo?","title":"Practice It Again: Add A file and Push It"},{"location":"module-1/class-1/#serve-your-landing-page","text":"Now that your web page is hosted on a publicly available computer, GitHub's server, you can change the permissions and allow for it to seen by the world! Go back to the repo you just created on GitHub then go to the \"Settings Tab\". Under the Settings, scroll down almost to the bottom of the page until you see \"GitHub Pages\". Click the None dropdown and select main branch and then click \"Save\". Now, scroll back down to the \"GitHub Pages\" section and you'll see a section that says \"Your site is ready to be published at https://yourusername.github.io/ .\" - This is the ROOT of your live site. In order to see your live site, you need to put in the rest of the URL's path . Use your browser to navigate to: https://YOUR-GITHUB-USERNAME.github.io/ACA_web101_FIRSTNAME_LASTNAME/myPortfolio/index.html NOTE: Do you see how the forward-slashes / in the URL look the exact same as the path names in our <link/> tags? That's because server-computers hold files the same way your personal computer does and the structure of the directories are the same, i.e. the current path to your portfolio looks like: documents/DevFolder/myPortfolio/index.html . All computers are built the same way and talk the same way. Pause & Partner * Where are we? Is anyone able to see their site live? It can take a few minutes to populate. * Who's lost?","title":"Serve Your Landing Page"},{"location":"module-1/class-1/#turning-in-your-assignments","text":"Your instructor will show you where and how to turn your assignments in using this live GitHub link as an example.","title":"Turning in Your Assignments"},{"location":"module-1/class-1/#important-notes-about-git-and-github","text":"DON'T make changes to your code using the tools on GitHub like editing, deleting, creating, or uploading any files. Only make changes in your editor (VS Code) and push them up EVERY TIME. No exceptions. If you don't it may cause you some headaches. Git software is powerful but confusing for beginners. If something goes wrong while using git follow these steps: PLEASE DON'T delete your local folder with work in it that is not on GitHub. That is your precious time you are deleting! THIS IS WHY WE KEEP OUR CODE IN A REPO IN THE FIRST PLACE!! Check the branch you're on: git branch Change branches to see if the code you're looking for is on that branch: git checkout <NameOfBranch> Replace the \"broken\" folder with a new folder: Rename your folder on your computer web101_firstName_lastName to web101_firstName_lastName-broken Re-clone your repository from GitHub git clone https://github.com/username/ACA_web101_firstName_lastName.git Copy over all changed files from ACA_web101_firstName_lastName-broken folder into the new ACA_web101_firstName_lastName git add -A - Add all new files git status - See green git commit -m \"fixed my mess-up\" - to commit the changes git push origin main or master - push your code up to GitHub. ONLY AFTER you've confirmed that all changes are on GitHub, delete the broken repo folder.","title":"Important Notes About Git and GitHub"},{"location":"module-1/class-1/#student-presentation-organization","text":"Knowledge is best when it's learned not taught. In this program instructors and the learning portal guide the student's learning journey but our students own their learning experience. You'll be assigned to teach your classmates specific topics that are related to concepts and techniques being taught throughout the course and program. This process has been proven to deepen student's understanding, boost retention, and strengthen community and interpersonal communication skills. Let's take some time look over the topics and get prepared for them. Next class we'll organized who and when each person is going for each topic. List of Student Daily Presentations","title":"Student Presentation Organization"},{"location":"module-1/class-1/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-1/class-1/#exit-recap-attendance-and-reminders-5-mins","text":"Create Class One Blog assignment Review Class Structure & Expectations of Students Answer the following questions: How would you describe programming? How would you describe coding? What does Clone mean? What's a Local Machine? What's a Repo? Mentally prepare for your presentations . Next class we'll be adding an image gallery to your website so make sure you study CSS Grid & Box Model tonight and tomorrow. We'll see you then!","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-2/","text":"Class 2: NASA Contact Page Share your ideas and gratefully listen to others. Greet, Outline, and Objectify Today we're going to: OBJECTIVE: Applying recently learned concepts to real world challenges, let's learn to use what we learn immediately. Questions for Student Led Discussion Interview Challenge: Wireframe the NASA Web Page together - 25 mins Organize Student Presentations - 15 mins Creation Time NASA Contact Page - 75 mins use CSS Flex & Box Model create a new repo, host it, and turn it in Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 25 mins See Your Challenge Here Student Presentations, 15 mins Let's take some time to assign & document individual students and groups of students to present the coming topics. List of Student Daily Presentations Creation Time, 60-90 mins Instructor to Demonstrate with Examples, Explain and Set Expectations Group Students in pairs plan and implements Partner with other groups for elaboration Share with the class for evaluation (potentially carry into the next class) Draw a wireframe with HTML tags denoting each element Create a repo on GitHub with a README.md git clone it to your local machine. Create an index.html and style.css file and link them together. Using display: flex; and the box model, follow the mock-up below to build the NASA landing page. Use PixaBay to download an image that is similar to the one on your mockup. Use GoogleFonts to find the font closest to the font on the mockup. Use ColorPick Eyedropper to get the right colors. Push your local changes up to your remote repo: git status , git add . , git status , git commit -m \"your meaningful message\" , git push , git status Go to the settings of this repo and host it with GitHub Pages. Copy/Paste the URL into Zollege.com. In case you need it, here's a Follow-Up Video for the NASA Page . Push Yourself Further Use a Form & Input elements to create the form in the mockup. Link your new NASA Page to your Portfolio website by creating a portfolio page in your Portfolio website folder that has a list of links with one of them as: \"NASA Contact Page\". This way you have 2 hosted pages and one of them links to the other. Go do it! You have the skills now. Get messy and play!! Remember to link your portfolio.html file to your index.html file in your Portfolio folder and push your changes again. Add a slide show of images to your NASA Contact Page. Add an Overlay Zoom to the page. Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create NASA Contact Page Assignment Create Class 2 Assignment Prepare for next class by completing all of your pre-class lessons Over the next few days you'll learn about CSS Grid and how to wireframe so that you can build more efficiently and confidently!","title":"Class 2 NASA Page"},{"location":"module-1/class-2/#class-2-nasa-contact-page","text":"Share your ideas and gratefully listen to others.","title":"Class 2: NASA Contact Page"},{"location":"module-1/class-2/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: Applying recently learned concepts to real world challenges, let's learn to use what we learn immediately. Questions for Student Led Discussion Interview Challenge: Wireframe the NASA Web Page together - 25 mins Organize Student Presentations - 15 mins Creation Time NASA Contact Page - 75 mins use CSS Flex & Box Model create a new repo, host it, and turn it in Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-2/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-1/class-2/#interview-challenge-25-mins","text":"See Your Challenge Here","title":"Interview Challenge, 25 mins"},{"location":"module-1/class-2/#student-presentations-15-mins","text":"Let's take some time to assign & document individual students and groups of students to present the coming topics. List of Student Daily Presentations","title":"Student Presentations, 15 mins"},{"location":"module-1/class-2/#creation-time-60-90-mins","text":"Instructor to Demonstrate with Examples, Explain and Set Expectations Group Students in pairs plan and implements Partner with other groups for elaboration Share with the class for evaluation (potentially carry into the next class) Draw a wireframe with HTML tags denoting each element Create a repo on GitHub with a README.md git clone it to your local machine. Create an index.html and style.css file and link them together. Using display: flex; and the box model, follow the mock-up below to build the NASA landing page. Use PixaBay to download an image that is similar to the one on your mockup. Use GoogleFonts to find the font closest to the font on the mockup. Use ColorPick Eyedropper to get the right colors. Push your local changes up to your remote repo: git status , git add . , git status , git commit -m \"your meaningful message\" , git push , git status Go to the settings of this repo and host it with GitHub Pages. Copy/Paste the URL into Zollege.com. In case you need it, here's a Follow-Up Video for the NASA Page .","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-2/#push-yourself-further","text":"Use a Form & Input elements to create the form in the mockup. Link your new NASA Page to your Portfolio website by creating a portfolio page in your Portfolio website folder that has a list of links with one of them as: \"NASA Contact Page\". This way you have 2 hosted pages and one of them links to the other. Go do it! You have the skills now. Get messy and play!! Remember to link your portfolio.html file to your index.html file in your Portfolio folder and push your changes again. Add a slide show of images to your NASA Contact Page. Add an Overlay Zoom to the page.","title":"Push Yourself Further"},{"location":"module-1/class-2/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-1/class-2/#exit-recap-attendance-and-reminders-5-mins","text":"Create NASA Contact Page Assignment Create Class 2 Assignment Prepare for next class by completing all of your pre-class lessons Over the next few days you'll learn about CSS Grid and how to wireframe so that you can build more efficiently and confidently!","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-3/","text":"Class 3: Resume Interesting people want to work with interesting people. Greet, Outline, and Objectify Today we're going to: OBJECTIVE: After this class students will have a firm understanding of: The application and use of CSS Grid as it is used in professional web development Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Choose and build a resume for your Portfolio project - 75 mins Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today you're going to first wireframe then build an online resume. It will not be your resume, but for someone else besides you; the point is that you shouldn't feel personally connected to the content so you don't struggle to come up with the content but instead focus on the structure so that it can hold anyone's content. Later on, we'll convert this resume to represent you and have your content but for now, just build the structure. First plan, then code. Trust this process; it will save you so much time! Choose one of the mockups below or the one in the Daily Interview Training section to build. Draw out your wireframe into detail to help you plan your code. Remember, the code is just a tool, you are the thinker. How to you think up the plan before you execute with the tool? You're going to build this online resume into your ACA_web101_firstName_lastName folder and link it to the Landing Page so users can access your resume. Using your terminal, navigate to ACA_web101_firstName_lastName O bviously switching out firstName & lastName with your real name... Open the folder in VS Code Create a new file called resume.html and another called resume-style.css Generate your boilerplate HTML in that file and link the stylesheet to it. ( html:5 + Enter ) Then go to the index.html and link your resume.html file to the \"Resume\" a tag at the top of the page by changing the href= value to the pathname that points to the new resume.html you just created. From there, test your link by Live-Serving your page and clicking on the \"Resume\" link. From here, you can start building! Once you're finished, git status , add , commit , push your changes then turn in the url to the resume page, NOT the url to the landing page. So the url you turn in should have something like /resume.html at the end of it. Tips Build a resume for Kobe Bryant (RIP), Barack Obama, Michelle Williams, Jeff Bezos, Elon Musk, Ryan Holiday or some other figure you can find on wikipedia. This will be easier building one for yourself! If you don't want to type content, then copy/paste Lorem Ipsum to get words into your page. Lorem Ipsum is a tried & true industry practice to get word spacing and aesthetics across without the wait time of copy to be created. Example Mockups Mockup One Mockup Two Mockup Three Canva Resume Templates Other One Other Two Follow-Up Video Vimeo, Clayton@ACA - Building a Resume Page YT, Clayton@ACA - Whiteboarding Push Yourself Further Add an image to the resume. Link the resume to actual social media platforms. Comment your code. Go through, and write in comments to help yourself or other developers later. Use the <span> tag to make text pop on :hovers . Look ahead to next class's material, and see if you can make the resume responsive. Learn how to read documentation . Exit Recap, Attendance, and Reminders, 5 mins Create Resume Assignment Prepare for next class by completing all of your pre-class lessons Remind students to bring paper and pencils to all future classes. Wireframes are required for all future projects ! You'll turn these in via pictures that are added to your code base so they get turned in with your code. Complete the feedback survey(if applicable) Exit Questions: What does Boilerplate Code mean? What does copy mean? Next class we'll be making our webpages responsive to mobile devices to read up, practice and get ready!!","title":"Class 3 Resume"},{"location":"module-1/class-3/#class-3-resume","text":"Interesting people want to work with interesting people.","title":"Class 3: Resume"},{"location":"module-1/class-3/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: After this class students will have a firm understanding of: The application and use of CSS Grid as it is used in professional web development Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Choose and build a resume for your Portfolio project - 75 mins Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-3/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-1/class-3/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-3/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-3/#creation-time-60-90-mins","text":"Today you're going to first wireframe then build an online resume. It will not be your resume, but for someone else besides you; the point is that you shouldn't feel personally connected to the content so you don't struggle to come up with the content but instead focus on the structure so that it can hold anyone's content. Later on, we'll convert this resume to represent you and have your content but for now, just build the structure. First plan, then code. Trust this process; it will save you so much time! Choose one of the mockups below or the one in the Daily Interview Training section to build. Draw out your wireframe into detail to help you plan your code. Remember, the code is just a tool, you are the thinker. How to you think up the plan before you execute with the tool? You're going to build this online resume into your ACA_web101_firstName_lastName folder and link it to the Landing Page so users can access your resume. Using your terminal, navigate to ACA_web101_firstName_lastName O bviously switching out firstName & lastName with your real name... Open the folder in VS Code Create a new file called resume.html and another called resume-style.css Generate your boilerplate HTML in that file and link the stylesheet to it. ( html:5 + Enter ) Then go to the index.html and link your resume.html file to the \"Resume\" a tag at the top of the page by changing the href= value to the pathname that points to the new resume.html you just created. From there, test your link by Live-Serving your page and clicking on the \"Resume\" link. From here, you can start building! Once you're finished, git status , add , commit , push your changes then turn in the url to the resume page, NOT the url to the landing page. So the url you turn in should have something like /resume.html at the end of it.","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-3/#tips","text":"Build a resume for Kobe Bryant (RIP), Barack Obama, Michelle Williams, Jeff Bezos, Elon Musk, Ryan Holiday or some other figure you can find on wikipedia. This will be easier building one for yourself! If you don't want to type content, then copy/paste Lorem Ipsum to get words into your page. Lorem Ipsum is a tried & true industry practice to get word spacing and aesthetics across without the wait time of copy to be created.","title":"Tips"},{"location":"module-1/class-3/#example-mockups","text":"Mockup One Mockup Two Mockup Three Canva Resume Templates Other One Other Two","title":"Example Mockups"},{"location":"module-1/class-3/#follow-up-video","text":"Vimeo, Clayton@ACA - Building a Resume Page YT, Clayton@ACA - Whiteboarding","title":"Follow-Up Video"},{"location":"module-1/class-3/#push-yourself-further","text":"Add an image to the resume. Link the resume to actual social media platforms. Comment your code. Go through, and write in comments to help yourself or other developers later. Use the <span> tag to make text pop on :hovers . Look ahead to next class's material, and see if you can make the resume responsive. Learn how to read documentation .","title":"Push Yourself Further"},{"location":"module-1/class-3/#exit-recap-attendance-and-reminders-5-mins","text":"Create Resume Assignment Prepare for next class by completing all of your pre-class lessons Remind students to bring paper and pencils to all future classes. Wireframes are required for all future projects ! You'll turn these in via pictures that are added to your code base so they get turned in with your code. Complete the feedback survey(if applicable) Exit Questions: What does Boilerplate Code mean? What does copy mean? Next class we'll be making our webpages responsive to mobile devices to read up, practice and get ready!!","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-4/","text":"Class 4: Responsive Website Teach someone something new. And today you shall learn something new! Greet, Outline, and Objectify Today we're going to: OBJECTIVE: After this class students will have a firm understanding of: The application and use of CSS Grid-Template-Areas & Media Queries to design responsive websites for professional web development Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time: Responsive Website Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Bringing together all the skills you've learned you're now asked to build a website for a small company. Make sure you practice good file structure, use css grid, flex, media queries, and the box model to build a well-built and responsive website. Our company needs this website up really soon, please make judgments about colors and layout that we haven't specifically laid out. Don't worry about content, use the lorem ipsum we provided for now or find your own. Remember to work from outside to in, commit often, plan your code, and comment your CSS code so our next developers know what you built. Use the Mockups & Specs below to draw your wireframes and plan your code, FIRST. Make a new repo called First-Responsive-Website and initialize it with README.md git clone it to your local machine and get to working. Once you're finished, git status , add , commit , push . Host your website with GitHub pages. Then turn in the url for your instructor to grade it. Laptop View Mobile View Break Points Target Media Query Phone @media (min-width: 576px) { ... } Desktop @media (min-width: 992px) { ... } Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Responsive Website Assignment Create Class 4 Blog Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) Next week we'll be digging into the surface of JavaScript to make our web pages interactive. We'll start by building a calculator but we'll soon be fetching data from remote sources and rendering it on our pages with the CSS and HTML we've learned so far. Keep reading, watching, and practicing all of the concepts you learn about.","title":"Class 4"},{"location":"module-1/class-4/#class-4-responsive-website","text":"Teach someone something new. And today you shall learn something new!","title":"Class 4: Responsive Website"},{"location":"module-1/class-4/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: After this class students will have a firm understanding of: The application and use of CSS Grid-Template-Areas & Media Queries to design responsive websites for professional web development Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time: Responsive Website Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-4/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-1/class-4/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-4/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-4/#creation-time-60-90-mins","text":"Bringing together all the skills you've learned you're now asked to build a website for a small company. Make sure you practice good file structure, use css grid, flex, media queries, and the box model to build a well-built and responsive website. Our company needs this website up really soon, please make judgments about colors and layout that we haven't specifically laid out. Don't worry about content, use the lorem ipsum we provided for now or find your own. Remember to work from outside to in, commit often, plan your code, and comment your CSS code so our next developers know what you built. Use the Mockups & Specs below to draw your wireframes and plan your code, FIRST. Make a new repo called First-Responsive-Website and initialize it with README.md git clone it to your local machine and get to working. Once you're finished, git status , add , commit , push . Host your website with GitHub pages. Then turn in the url for your instructor to grade it. Laptop View Mobile View Break Points Target Media Query Phone @media (min-width: 576px) { ... } Desktop @media (min-width: 992px) { ... }","title":"Creation Time, 60-90 mins"},{"location":"module-1/class-4/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-1/class-4/#exit-recap-attendance-and-reminders-5-mins","text":"Create Responsive Website Assignment Create Class 4 Blog Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) Next week we'll be digging into the surface of JavaScript to make our web pages interactive. We'll start by building a calculator but we'll soon be fetching data from remote sources and rendering it on our pages with the CSS and HTML we've learned so far. Keep reading, watching, and practicing all of the concepts you learn about.","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/developSeries-lettingGoOfShame/","text":"Letting Go Of Self-Importance and Shame Beyond our inner emotions it's important to understand how interconnected we are to each other. COVID-19 is/has painted a picture right of how physically connected we are from air particles, virus and bacteria exchange, to financial vulnerabilities across the globe. And with this sudden crisis it's opening us up to understanding how mentally, socially, spiritually, and emotionally connected we are. We are one. We are one people, not separate sovereign countries. From San Francisco to New Delhi and Cape Town to St. Petersburg, we are all human, connected by our air, water, ground, food, birth, and death. Now, how does that affect you? How can you pull yourself up from yourself and into that enormous and beautiful world so that we can experience these things together?","title":"Develop - Letting Go of Self-Importance"},{"location":"module-1/developSeries-lettingGoOfShame/#letting-go-of-self-importance-and-shame","text":"Beyond our inner emotions it's important to understand how interconnected we are to each other. COVID-19 is/has painted a picture right of how physically connected we are from air particles, virus and bacteria exchange, to financial vulnerabilities across the globe. And with this sudden crisis it's opening us up to understanding how mentally, socially, spiritually, and emotionally connected we are. We are one. We are one people, not separate sovereign countries. From San Francisco to New Delhi and Cape Town to St. Petersburg, we are all human, connected by our air, water, ground, food, birth, and death. Now, how does that affect you? How can you pull yourself up from yourself and into that enormous and beautiful world so that we can experience these things together?","title":"Letting Go Of Self-Importance and Shame"},{"location":"module-1/developSeries-mindfulness/","text":"Develop Series: Mindfulness In the video below, Andy Puddicombe ingeniously describes the way our minds can go haywire and distract us from the task at hand while causing distress at the same time. The truth is, it takes less than 10 minutes. Start with 1 second, just breathe and see what arises. Then try again for another second. Breathe in. Breathe out. Imagine letting the thoughts that arise in that 1 second as balloons that drift away without you reaching out for their strings. When you come back, try for 3 seconds and let those balloons go too. Repeat this a few times. Soon you'll be up to 10 seconds. Then a minute. Then you'll long for 5 minutes. Soon you'll think 10 minutes isn't long enough. I promise! There are a few meditation apps to help you in this journey but remember, there are no rules. There are no \"right ways\" to do it. Just watch your own mind and notice how the focus on your breath can slow those thoughts down and deny them energy to grow into anxiety. Here are some apps to try: Headspace Calm Insight Timer No matter what your practice looks like, you will see huge benefits in your relationships, your self-motivation, your coding, and your overall mood. Give it a try for the rest of this course and see what you think.","title":"Develop - Mindfulness"},{"location":"module-1/developSeries-mindfulness/#develop-series-mindfulness","text":"In the video below, Andy Puddicombe ingeniously describes the way our minds can go haywire and distract us from the task at hand while causing distress at the same time. The truth is, it takes less than 10 minutes. Start with 1 second, just breathe and see what arises. Then try again for another second. Breathe in. Breathe out. Imagine letting the thoughts that arise in that 1 second as balloons that drift away without you reaching out for their strings. When you come back, try for 3 seconds and let those balloons go too. Repeat this a few times. Soon you'll be up to 10 seconds. Then a minute. Then you'll long for 5 minutes. Soon you'll think 10 minutes isn't long enough. I promise! There are a few meditation apps to help you in this journey but remember, there are no rules. There are no \"right ways\" to do it. Just watch your own mind and notice how the focus on your breath can slow those thoughts down and deny them energy to grow into anxiety. Here are some apps to try: Headspace Calm Insight Timer No matter what your practice looks like, you will see huge benefits in your relationships, your self-motivation, your coding, and your overall mood. Give it a try for the rest of this course and see what you think.","title":"Develop Series: Mindfulness"},{"location":"module-1/developSeries-selfMotivation/","text":"Pre-Class Lesson 16: Develop Series, Self Motivation Look, you started class with us and you trust our program so far. I need you to take that trust and build it upon yourself now. I've seen our graduates get jobs before they graduate, 1 month after, 3 months, and even 10 months after. The difference is in how much they believe in themselves. This very crucial piece is why these \"Develop Series\" are in your textbook\u2014to help you find that beautiful strength within yourself so you can latch on to it and take yourself wherever you want to go. Scott Geller has a marvelous understanding of self-motivation that you can use for yourself. Tune in, turn off, and listen.","title":"Develop - Self-Motivation"},{"location":"module-1/developSeries-selfMotivation/#pre-class-lesson-16-develop-series-self-motivation","text":"Look, you started class with us and you trust our program so far. I need you to take that trust and build it upon yourself now. I've seen our graduates get jobs before they graduate, 1 month after, 3 months, and even 10 months after. The difference is in how much they believe in themselves. This very crucial piece is why these \"Develop Series\" are in your textbook\u2014to help you find that beautiful strength within yourself so you can latch on to it and take yourself wherever you want to go. Scott Geller has a marvelous understanding of self-motivation that you can use for yourself. Tune in, turn off, and listen.","title":"Pre-Class Lesson 16: Develop Series, Self Motivation"},{"location":"module-1/displayFlexProperties/","text":"Flex and Relevant Properties Above we see three different products inside a single horizontal row. The code for one of these products might look something like this: 1 2 3 4 5 6 7 8 9 10 11 12 <!-- shop.html --> < article > < div class = \"item-banner\" > < button onclick = \"savePin(this)\" >< img src = \"./images/pic-tac.png\" ></ button > < span class = \"sale\" >< img src = \"./images/sale-tag.png\" ></ span > </ div > < img src = \"./images/amet-lipstick.png\" /> < div class = \"item-description-price\" > < h3 > Amet Lipstick </ h3 > < p >< span class = \"sale-price\" > \u00a340.00 </ span > \u00a328.00 </ p > </ div > </ article > And some of the CSS might look like this: 1 2 3 4 5 6 7 8 9 10 11 12 /* shop-styles.css */ . item-banner { display : flex ; background : transparent ; margin-bottom : -5 % ; /*approximate*/ } /* more CSS Code here */ . sale-price { text-decoration : line-through ; } To create the other two products we could copy/paste the HTML we see above and change out the values, BUT, that would only stack them below each other like all the other web pages we've built. In our next project we want to lay the items out horizontally like this screenshot. To do this we would need to \"wrap\" all of these items inside a \"container\" elements that can control the flow of the element. In this example we'll use a Section element: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <!-- shop.html --> <!-- ...more code here... --> < section > <!-- this element \"wraps\" around the other elements and becomes the \"container\", or Parent Element --> < article > < div > <!-- ...more code here... --> < h3 > Amet Lipstick </ h3 > < p >< span class = \"sale-price\" > \u00a340.00 </ span > \u00a328.00 </ p > </ div > </ article > < article > < div > <!-- ...more code here... --> < h3 > Aps Lipstick </ h3 > < p >< span class = \"sale-price\" > \u00a340.00 </ span > \u00a328.00 </ p > </ div > </ article > < article > < div > <!-- ...more code here... --> < h3 > BB Cream </ h3 > < p >< span class = \"sale-price\" > \u00a340.00 </ span > \u00a328.00 </ p > </ div > </ article > </ section > The CSS to make it work looks like this: 1 2 3 4 5 /* shop-style.css */ section { display : flex ; justify-content : space - evenly ; } How Does Flex Work See, flex , formally known as: flexbox, is a value that can be given to the display property on any block element that would normally contain other elements, i.e. section, article, footer, header, nav. When added to an element, it gives us control of how its child elements inside that element will be rendered. Take a look at the code snippets below and then check out the following screenshot to see if you can figure out how the flex value on the property display works before reading on. HTML 1 2 3 4 5 6 7 <!-- this section is the parent/container element --> < section class = \"truthful-statements\" > <!-- Each of these article elements are child elements/flex items --> < article > A connected life is the best life. </ article > < article > People have dogs. Some have cats. </ article > < article > Human activity is capturing heat at an alarming rate! </ article > </ section > CSS 1 2 3 4 5 6 7 8 9 10 11 12 /* the CSS to make it happen */ . truthful-statements { display : flex ; } article { border-color : blue ; border-style : solid ; border-width : 1 pt ; margin : 20 pt 5 pt ; padding : 2 pt 5 pt ; } Result You figure it out? If not, that's cool. Think about it like this: the flex value allows us to flexibly display child elements within a parent element. Unlike the inline and block values, flex doesn't do anything to the way the parent element is displayed in relation to its sibling elements. flex only changes the way its child elements are rendered inside of it. When we add flex to an element's display property, it comes with some other properties that can be tweaked, including these properties and their potential values: flex-direction - values include: row(the default), column & column-reverse flex-wrap - wrap (default), no-wrap, wrap-reverse justify-content - flex-start (default), center, end, space-between, space-evenly, stretch align-items - stretch (default), flex-start, center, baseline, flex-end align-content - stretch (default), center, flex-end, space-around, space-between NOTE: If you like using shorthand code you'll enjoy: flex-flow = flex-direction & flex-wrap Practice It: CSS Tricks - Flex Guide Try it !! Go to CodePen and create Section element to be your \"Flex\" Container. Then create three Article elements inside of it: 1 2 3 4 5 < section class = \"my-flex-container\" > < article class = \"square-one\" ></ article > < article class = \"square-two\" ></ article > < article class = \"square-three\" ></ article > < section > Then use the CSS snippet you see above but apply it to the class: .my-flex-container . Then size all of your articles to be just simple square blocks: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 . my-flex-container { border : 5 pt solid EE621F ; display : flex ; } article { border : 5 pt solid #FDEFE1 ; height : 144 pt ; width : 144 pt ; } /* Just for fun ;) */ article : hover { border-color : #EE2D7A ; border-style : dotted ; } Now open up this website, A Complete Guide to Flex(box) . This website will be your guide in flex display from here until the end of time so you might as well get familiar with it now. On the left side of the guide you'll see all the properties that can be given to the Parent Element, The \"Container\" element. Start with flex-direction and work through all the values of flex-direction . Then move on to flex-wrap and do the same thing. Then move on to justify-content , and so forth and so forth. Do NOT move on until you've worked through all the properties available to the display container. In the next lesson we'll cover the properties for items of a \"Container\" element. Additional Resources MDN Docs - CSS Flex Box Layout W3S Docs - Flex/Flex Box","title":"Display Flex"},{"location":"module-1/displayFlexProperties/#flex-and-relevant-properties","text":"Above we see three different products inside a single horizontal row. The code for one of these products might look something like this: 1 2 3 4 5 6 7 8 9 10 11 12 <!-- shop.html --> < article > < div class = \"item-banner\" > < button onclick = \"savePin(this)\" >< img src = \"./images/pic-tac.png\" ></ button > < span class = \"sale\" >< img src = \"./images/sale-tag.png\" ></ span > </ div > < img src = \"./images/amet-lipstick.png\" /> < div class = \"item-description-price\" > < h3 > Amet Lipstick </ h3 > < p >< span class = \"sale-price\" > \u00a340.00 </ span > \u00a328.00 </ p > </ div > </ article > And some of the CSS might look like this: 1 2 3 4 5 6 7 8 9 10 11 12 /* shop-styles.css */ . item-banner { display : flex ; background : transparent ; margin-bottom : -5 % ; /*approximate*/ } /* more CSS Code here */ . sale-price { text-decoration : line-through ; } To create the other two products we could copy/paste the HTML we see above and change out the values, BUT, that would only stack them below each other like all the other web pages we've built. In our next project we want to lay the items out horizontally like this screenshot. To do this we would need to \"wrap\" all of these items inside a \"container\" elements that can control the flow of the element. In this example we'll use a Section element: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 <!-- shop.html --> <!-- ...more code here... --> < section > <!-- this element \"wraps\" around the other elements and becomes the \"container\", or Parent Element --> < article > < div > <!-- ...more code here... --> < h3 > Amet Lipstick </ h3 > < p >< span class = \"sale-price\" > \u00a340.00 </ span > \u00a328.00 </ p > </ div > </ article > < article > < div > <!-- ...more code here... --> < h3 > Aps Lipstick </ h3 > < p >< span class = \"sale-price\" > \u00a340.00 </ span > \u00a328.00 </ p > </ div > </ article > < article > < div > <!-- ...more code here... --> < h3 > BB Cream </ h3 > < p >< span class = \"sale-price\" > \u00a340.00 </ span > \u00a328.00 </ p > </ div > </ article > </ section > The CSS to make it work looks like this: 1 2 3 4 5 /* shop-style.css */ section { display : flex ; justify-content : space - evenly ; }","title":"Flex and Relevant Properties"},{"location":"module-1/displayFlexProperties/#how-does-flex-work","text":"See, flex , formally known as: flexbox, is a value that can be given to the display property on any block element that would normally contain other elements, i.e. section, article, footer, header, nav. When added to an element, it gives us control of how its child elements inside that element will be rendered. Take a look at the code snippets below and then check out the following screenshot to see if you can figure out how the flex value on the property display works before reading on. HTML 1 2 3 4 5 6 7 <!-- this section is the parent/container element --> < section class = \"truthful-statements\" > <!-- Each of these article elements are child elements/flex items --> < article > A connected life is the best life. </ article > < article > People have dogs. Some have cats. </ article > < article > Human activity is capturing heat at an alarming rate! </ article > </ section > CSS 1 2 3 4 5 6 7 8 9 10 11 12 /* the CSS to make it happen */ . truthful-statements { display : flex ; } article { border-color : blue ; border-style : solid ; border-width : 1 pt ; margin : 20 pt 5 pt ; padding : 2 pt 5 pt ; } Result You figure it out? If not, that's cool. Think about it like this: the flex value allows us to flexibly display child elements within a parent element. Unlike the inline and block values, flex doesn't do anything to the way the parent element is displayed in relation to its sibling elements. flex only changes the way its child elements are rendered inside of it. When we add flex to an element's display property, it comes with some other properties that can be tweaked, including these properties and their potential values: flex-direction - values include: row(the default), column & column-reverse flex-wrap - wrap (default), no-wrap, wrap-reverse justify-content - flex-start (default), center, end, space-between, space-evenly, stretch align-items - stretch (default), flex-start, center, baseline, flex-end align-content - stretch (default), center, flex-end, space-around, space-between NOTE: If you like using shorthand code you'll enjoy: flex-flow = flex-direction & flex-wrap","title":"How Does Flex Work"},{"location":"module-1/displayFlexProperties/#practice-it-css-tricks-flex-guide","text":"Try it !! Go to CodePen and create Section element to be your \"Flex\" Container. Then create three Article elements inside of it: 1 2 3 4 5 < section class = \"my-flex-container\" > < article class = \"square-one\" ></ article > < article class = \"square-two\" ></ article > < article class = \"square-three\" ></ article > < section > Then use the CSS snippet you see above but apply it to the class: .my-flex-container . Then size all of your articles to be just simple square blocks: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 . my-flex-container { border : 5 pt solid EE621F ; display : flex ; } article { border : 5 pt solid #FDEFE1 ; height : 144 pt ; width : 144 pt ; } /* Just for fun ;) */ article : hover { border-color : #EE2D7A ; border-style : dotted ; } Now open up this website, A Complete Guide to Flex(box) . This website will be your guide in flex display from here until the end of time so you might as well get familiar with it now. On the left side of the guide you'll see all the properties that can be given to the Parent Element, The \"Container\" element. Start with flex-direction and work through all the values of flex-direction . Then move on to flex-wrap and do the same thing. Then move on to justify-content , and so forth and so forth. Do NOT move on until you've worked through all the properties available to the display container. In the next lesson we'll cover the properties for items of a \"Container\" element.","title":"Practice It: CSS Tricks - Flex Guide"},{"location":"module-1/displayFlexProperties/#additional-resources","text":"MDN Docs - CSS Flex Box Layout W3S Docs - Flex/Flex Box","title":"Additional Resources"},{"location":"module-1/displayGrid/","text":"Display: Grid \u201cThe world is indeed full of peril, and in it there are many dark places; but still there is much that is fair, and though in all lands love is now mingled with grief, it grows perhaps the greater.\u201d \u2015J.R.R. Tolkien, The Fellowship of the Ring ** Overview Now that wireframing is fresh on your mind and you're thinking about the way websites get planned and laid out let's introduce a new tool that will help you code these well designed websites, CSS Grid. Grids are used all over the place : spreadsheets, shelves, cities, and even art paintings. If you've ever thought about the way newspapers, books, magazines, or in-general: print work is laid out, they use a grid to structure composition. Over time, the grid was brought over to the web because again, our whole society shifted from print to digital media. When we begin building a website, laying out the overall structure is the first thing we do. It's like framing a house before deciding which wallpaper we'll put in. The skeleton of the page is, undoubtedly, the first part you should arrange every time you work on a project. Therefore, it is only fitting that we introduce it, sooner rather than later. Let's get to it. Like CSS Flex, CSS Grid is a value in CSS we can assign to the display property of an HTML element to lay out our page in a specific way. Once we've applied the grid value to the display property, you can then use columns and rows to layout the Child Element within the selected Parent Element. This is a really useful way to lay out your page quickly and sustainably. With the exception of the CSS Grid properties you see in the code given to you for your Portfolio Landing Page, you've been working with elements that stack below one another, due to normal document flow. But, as you know, typical websites have multiple elements across the screen and not just stacked on top of one another. This can be done with the value: flex given to the property display of the element we want. Let's dig into that. Remember that each of the elements in an HTML file have many properties behind them that we can access with CSS and JavaScript(JS). One of these properties is the display property. Through it we can change the way the element is rendered on the screen and how its child elements are arranged within it. See It - Display: Grid To set an area of your webpage as a grid to layout out other elements on, just give it the property & value: display: grid;. Let's say we want our <body/> element to have a grid, simply select the body in your CSS file and set the property display to grid like so: 1 2 3 body { display : grid ; } Easy. Right? From here on, we'll refer to our body element as our Grid Container . You will need one of these Parent Grid Containers every time you would like to arrange elements, or Grid Items , just the same way you use a Flexible Box Container for flexed items. Grid Template Properties After that you'll need to set up the number of columns, grid-template-columns , and rows, grid-template-rows , you desire in the Grid Container. Let's say we want our body to have 2 equally sized columns and 4 equally sized rows: 1 2 3 4 5 body { display : grid ; grid-template-columns : 50 % 50 % ; grid-template-rows : 25 % 25 % 25 % 25 % ; } Do you see how we assigned multiple values to grid-template-columns and grid-template-rows ? The number of values we assign equals the number of columns or rows and the percentage represent how much space they'll take up. NOTE: Make sure your percentages add up to 100%. Now our body element will have a grid with two columns that are 50% of the display wide and 4 rows that are each 25% of the total display's height. Now we can place our Grid Items inside the Grid Container. Lets say we want our HTML element, maybe a <section> element, with the class name: our-grid-item , to be positioned at the bottom-right corner of our grid (in the last row of the right column). Take a look at the HTML and CSS snippets below and then the resulting screenshots the follows. Try it yourself ! index.html 1 2 3 4 5 6 7 <!-- ...more HTML code here... --> < link href = \"./index-style.css\" /> <!-- ...more HTML code here... --> < body > < section class = \"our-grid-item\" > Know thyself. You're all you'll ever have. </ section > </ body > index-style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 body { display : grid ; grid-template-columns : 50 % 50 % ; grid-template-rows : 25 % 25 % 25 % 25 % ; width : 500 pt ; /* Add some dimension and color for us to see it better */ height : 500 pt ; border : solid red 1 pt ; } . our-grid-item { grid-column : 2 / 3 ; grid-row : 4 / 5 ; border : solid black 2 pt ; /* add color and dimension to see more easily */ margin : 20 pt 5 pt ; padding : 2 pt 5 pt ; } Result Do you see that? We specify the grid-lines we want the element to start & end on to tell the browser where to place the element on the grid! We use the property grid-column on the Grid Item and give it the value we want the element to start at and end on separated by a / . This tells the browser to find the line in the grid you specified on the left-side of the / and end on the number you gave on the right-side. The screenshot below is of the same code sample but with Chrome Inspector Tool turned-on so we can see a visual representation of the grid we created... Here's another example, but now our element will be in the top-left of our document (top-row of the left-column). index-style.css 1 2 3 4 . our-grid-item { grid-column : 1 / 2 ; grid-row : 1 / 2 ; } index.html 1 2 3 4 5 6 7 <!-- ...more HTML code here... --> < link href = \"./index-style.css\" /> <!-- ...more HTML code here... --> < body > < section class = \"our-grid-item\" > Forgiveness is key. </ section > </ body > Result","title":"Display Grid"},{"location":"module-1/displayGrid/#display-grid","text":"\u201cThe world is indeed full of peril, and in it there are many dark places; but still there is much that is fair, and though in all lands love is now mingled with grief, it grows perhaps the greater.\u201d \u2015J.R.R. Tolkien, The Fellowship of the Ring **","title":"Display: Grid"},{"location":"module-1/displayGrid/#overview","text":"Now that wireframing is fresh on your mind and you're thinking about the way websites get planned and laid out let's introduce a new tool that will help you code these well designed websites, CSS Grid. Grids are used all over the place : spreadsheets, shelves, cities, and even art paintings. If you've ever thought about the way newspapers, books, magazines, or in-general: print work is laid out, they use a grid to structure composition. Over time, the grid was brought over to the web because again, our whole society shifted from print to digital media. When we begin building a website, laying out the overall structure is the first thing we do. It's like framing a house before deciding which wallpaper we'll put in. The skeleton of the page is, undoubtedly, the first part you should arrange every time you work on a project. Therefore, it is only fitting that we introduce it, sooner rather than later. Let's get to it. Like CSS Flex, CSS Grid is a value in CSS we can assign to the display property of an HTML element to lay out our page in a specific way. Once we've applied the grid value to the display property, you can then use columns and rows to layout the Child Element within the selected Parent Element. This is a really useful way to lay out your page quickly and sustainably. With the exception of the CSS Grid properties you see in the code given to you for your Portfolio Landing Page, you've been working with elements that stack below one another, due to normal document flow. But, as you know, typical websites have multiple elements across the screen and not just stacked on top of one another. This can be done with the value: flex given to the property display of the element we want. Let's dig into that. Remember that each of the elements in an HTML file have many properties behind them that we can access with CSS and JavaScript(JS). One of these properties is the display property. Through it we can change the way the element is rendered on the screen and how its child elements are arranged within it.","title":"Overview"},{"location":"module-1/displayGrid/#see-it-display-grid","text":"To set an area of your webpage as a grid to layout out other elements on, just give it the property & value: display: grid;. Let's say we want our <body/> element to have a grid, simply select the body in your CSS file and set the property display to grid like so: 1 2 3 body { display : grid ; } Easy. Right? From here on, we'll refer to our body element as our Grid Container . You will need one of these Parent Grid Containers every time you would like to arrange elements, or Grid Items , just the same way you use a Flexible Box Container for flexed items.","title":"See It - Display: Grid"},{"location":"module-1/displayGrid/#grid-template-properties","text":"After that you'll need to set up the number of columns, grid-template-columns , and rows, grid-template-rows , you desire in the Grid Container. Let's say we want our body to have 2 equally sized columns and 4 equally sized rows: 1 2 3 4 5 body { display : grid ; grid-template-columns : 50 % 50 % ; grid-template-rows : 25 % 25 % 25 % 25 % ; } Do you see how we assigned multiple values to grid-template-columns and grid-template-rows ? The number of values we assign equals the number of columns or rows and the percentage represent how much space they'll take up. NOTE: Make sure your percentages add up to 100%. Now our body element will have a grid with two columns that are 50% of the display wide and 4 rows that are each 25% of the total display's height. Now we can place our Grid Items inside the Grid Container. Lets say we want our HTML element, maybe a <section> element, with the class name: our-grid-item , to be positioned at the bottom-right corner of our grid (in the last row of the right column). Take a look at the HTML and CSS snippets below and then the resulting screenshots the follows. Try it yourself ! index.html 1 2 3 4 5 6 7 <!-- ...more HTML code here... --> < link href = \"./index-style.css\" /> <!-- ...more HTML code here... --> < body > < section class = \"our-grid-item\" > Know thyself. You're all you'll ever have. </ section > </ body > index-style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 body { display : grid ; grid-template-columns : 50 % 50 % ; grid-template-rows : 25 % 25 % 25 % 25 % ; width : 500 pt ; /* Add some dimension and color for us to see it better */ height : 500 pt ; border : solid red 1 pt ; } . our-grid-item { grid-column : 2 / 3 ; grid-row : 4 / 5 ; border : solid black 2 pt ; /* add color and dimension to see more easily */ margin : 20 pt 5 pt ; padding : 2 pt 5 pt ; } Result Do you see that? We specify the grid-lines we want the element to start & end on to tell the browser where to place the element on the grid! We use the property grid-column on the Grid Item and give it the value we want the element to start at and end on separated by a / . This tells the browser to find the line in the grid you specified on the left-side of the / and end on the number you gave on the right-side. The screenshot below is of the same code sample but with Chrome Inspector Tool turned-on so we can see a visual representation of the grid we created... Here's another example, but now our element will be in the top-left of our document (top-row of the left-column). index-style.css 1 2 3 4 . our-grid-item { grid-column : 1 / 2 ; grid-row : 1 / 2 ; } index.html 1 2 3 4 5 6 7 <!-- ...more HTML code here... --> < link href = \"./index-style.css\" /> <!-- ...more HTML code here... --> < body > < section class = \"our-grid-item\" > Forgiveness is key. </ section > </ body > Result","title":"Grid Template Properties"},{"location":"module-1/displayProperty/","text":"The Display Property \"The things you do for yourself are gone when you are gone, but the things you do for others remain as your legacy.\"\u2003\u2015Kalu Ndukwe Kalu With our new understanding of the Box Model Properties we can now size and shape our elements. But if you've noticed, our elements still \"stack\" below each other one after another. This is the default behavior of HTML called Normal Document Flow . Elements will appear on screen as they are read in the HTML file: top-to-bottom-left-to-right. But what if we wanted to create a section on our page that had multiple element side by side? Like the you see below: In this example we have three images inside three \"containers\" which are inside a larger \"container\" that lays them out horizontally rather than vertically(like, normal document flow). Look again. In this screenshot we see a bunch of new boxes laid on top of the original screenshot. These boxes represent elements we would build in HTML. We use these wireframes to help us navigate the composition and construction of a web page. For now, notice the largest teal colored rectangle labeled <section style=\"display: flex;\"> . This element is what we want to focus on because this one has the property we need to use to lay out child elements (the images and text below) horizontally rather than vertically. But before we get to making a flex ible display let's quickly cover this display property. The Display Property + Possible Values All HTML elements can be divided into categories based on their default value of this property! The two main values, and therefore categories, are block and inline . The default block elements are element that create an entire \"block across the screen and consequentially force other block elements to be on new separate lines, i.e. Normal Document Flow . Elements included in the category are Section, Article, Div, H1-H6, and P and a whole list more . Block elements are usually used to create structure on the page and generally have other elements, both inline and block, inside of them. If we were to write this property in CSS it would like like this: 1 2 3 . all-block-elements { display : block ; } NOTE: We don't have to declare the value of Block elements to be block elements because that's their default value. The other main category is inline elements. These are elements that don't require a new line so they can start in the middle of a P Element if you'd like. These elements include: Span, Anchor, Button, Code, Img, and Input elements but you can find the entire list at MDN Docs - Inline HTML Elements . Inline elements don't have space inside of them for other elements to go inside. And if we had to write this property in code it would look like this: 1 2 3 . all-inline-elements { display : inline ; } NOTE: Same as before, we don't have to declare this value because this is the default value. Only if we want to change this do we need to declare a new value. Another value you can use is none , as in display: none; . When you add JavaScript to your page you can change the visibility of an element based on a certain condition by using this value. But but what about the other possible values of the display property? Turns out there's a hybrid between the two main categories called inline-block . This value gives the associated element the flexibility of both properties allowing for it to act like an inline element where neighboring content will flow around it but still have the structure to hold child elements inside of it like a block element. NOTE: While you won't use this property often in the beginning you shouldn't forget about it because it will prove very useful when your building more creative web pages. Display: Flex; Beyond these newly discovered display values: inline , block , and inline-block there are a couple more value to learn: flex and grid . Within each are inline-flex , inline-grid , so forth. For this next lesson we'll learn about flex and its relevant properties. We'll get grid after our next class! Know Your Docs MDN Docs - The Display Property & Its Values Additional Resources Display and Box Model Video - How to Use Display Flex","title":"Display Property"},{"location":"module-1/displayProperty/#the-display-property","text":"\"The things you do for yourself are gone when you are gone, but the things you do for others remain as your legacy.\"\u2003\u2015Kalu Ndukwe Kalu With our new understanding of the Box Model Properties we can now size and shape our elements. But if you've noticed, our elements still \"stack\" below each other one after another. This is the default behavior of HTML called Normal Document Flow . Elements will appear on screen as they are read in the HTML file: top-to-bottom-left-to-right. But what if we wanted to create a section on our page that had multiple element side by side? Like the you see below: In this example we have three images inside three \"containers\" which are inside a larger \"container\" that lays them out horizontally rather than vertically(like, normal document flow). Look again. In this screenshot we see a bunch of new boxes laid on top of the original screenshot. These boxes represent elements we would build in HTML. We use these wireframes to help us navigate the composition and construction of a web page. For now, notice the largest teal colored rectangle labeled <section style=\"display: flex;\"> . This element is what we want to focus on because this one has the property we need to use to lay out child elements (the images and text below) horizontally rather than vertically. But before we get to making a flex ible display let's quickly cover this display property.","title":"The Display Property"},{"location":"module-1/displayProperty/#the-display-property-possible-values","text":"All HTML elements can be divided into categories based on their default value of this property! The two main values, and therefore categories, are block and inline . The default block elements are element that create an entire \"block across the screen and consequentially force other block elements to be on new separate lines, i.e. Normal Document Flow . Elements included in the category are Section, Article, Div, H1-H6, and P and a whole list more . Block elements are usually used to create structure on the page and generally have other elements, both inline and block, inside of them. If we were to write this property in CSS it would like like this: 1 2 3 . all-block-elements { display : block ; } NOTE: We don't have to declare the value of Block elements to be block elements because that's their default value. The other main category is inline elements. These are elements that don't require a new line so they can start in the middle of a P Element if you'd like. These elements include: Span, Anchor, Button, Code, Img, and Input elements but you can find the entire list at MDN Docs - Inline HTML Elements . Inline elements don't have space inside of them for other elements to go inside. And if we had to write this property in code it would look like this: 1 2 3 . all-inline-elements { display : inline ; } NOTE: Same as before, we don't have to declare this value because this is the default value. Only if we want to change this do we need to declare a new value. Another value you can use is none , as in display: none; . When you add JavaScript to your page you can change the visibility of an element based on a certain condition by using this value. But but what about the other possible values of the display property? Turns out there's a hybrid between the two main categories called inline-block . This value gives the associated element the flexibility of both properties allowing for it to act like an inline element where neighboring content will flow around it but still have the structure to hold child elements inside of it like a block element. NOTE: While you won't use this property often in the beginning you shouldn't forget about it because it will prove very useful when your building more creative web pages.","title":"The Display Property + Possible Values"},{"location":"module-1/displayProperty/#display-flex","text":"Beyond these newly discovered display values: inline , block , and inline-block there are a couple more value to learn: flex and grid . Within each are inline-flex , inline-grid , so forth. For this next lesson we'll learn about flex and its relevant properties. We'll get grid after our next class!","title":"Display: Flex;"},{"location":"module-1/displayProperty/#know-your-docs","text":"MDN Docs - The Display Property & Its Values","title":"Know Your Docs"},{"location":"module-1/displayProperty/#additional-resources","text":"Display and Box Model Video - How to Use Display Flex","title":"Additional Resources"},{"location":"module-1/flexItemProperties/","text":"Flex Item Properties Now that you have a basic understanding of using the value flex with the property display for a \"Container\" element/Parent element and the associated properties to position the Child elements its time now to see some of the specific properties for the child elements. As we move deeper in to these properties you'll notice a pattern emerge: properties of HTML Elements set by CSS come in groups because they are associated with each other. For instance, we've covered the Box Model Properties which include height , width , padding , border , and margin along with all of the sub-properties associated with each of them: margin-top , margin-bottom , padding-top , border-top , so forth and so forth. Soon you learn about the position property and the top and left together because they are associated with each other. Now we're in the Display Flex property/value with justify-content and flex-wrap and all the others. This pattern is important because it will help you learn faster and deeper! By now, you already have a good understanding HTML element just being objects with properties, methods, and events. You know that JS functions can be triggered by an event on an element like onclick and that methods are just built in functions that we don't have to write ourselves. As you move forward trust that you have a good basis to build from and that you CAN learn these seemingly complicated technologies. You got this!! The Properties Items inside a \"Container\"/Parent Element with its display property set to flex are said to be flex items . When these items are rendered inside a flex display they get unique properties not available outside of the flex container. As you saw in the CSS Tricks Flex Guide they include: order - specifies the order of the flex items. You can tell the 3rd item to be the 1st item to be displayed. flex-grow - specifies how much a flex item will grow relative to the rest of the flex items. Items can be bigger than others. flex-shrink - how much a flex item will shrink relative to the rest of the flex items. They can also be smaller! flex-basis - specifies the initial length of a flex item. Add as much as you like. align-self - specifies the alignment for the selected item inside the flexible container and overrides the align-items of the parent container. NOTE: Again, if you like shorthand (and don't mind less code readability), the flex property combines flex-grow, flex-shrink, and flex-basis into one. Practice It - Giphy Gallery Fork the Giphy Gallery - https://codepen.io/austincoding/pen/pozQRyQ Take a look at the HTML file. Can you find the <section class=\"row portrait-gallery\"> code on line 2? Inside this section you'll see three <img> elements. The <img> element has an attribute/property called src= , which stands for source, which is where the image comes from. In this case the images are coming from giphy.com . After that we see another attribute/property called alt= , which stands for alternate text. This is for people with blindness that can't see the image we put on the screen. It's important for you to create a descriptive alternate text for them to hear read to them. After that we see height= and width= which, of course, determine how big the images are. Go ahead and copy/paste this line: <img src=\"\" alt=\"what the image is\" height=\"360\" width=\"240\"> and add it into the <section> tag with the class name row gallery-two on line 7, so it looks like this: 1 2 3 4 5 < section class = \"row gallery-two\" > <!-- Copy/Paste the line below for as many images as you'd like --> < img src = \"\" alt = \"what the image is\" height = \"360\" width = \"240\" > < img src = \"https://media.giphy.com/media/CBnvmgOvK1d9C/giphy.gif\" alt = \"what the image is\" height = \"360\" width = \"240\" > </ section > Use the suggested links below to copy/paste in between the \" \" of src=\"\" attribute: https://media.giphy.com/media/l1KVcrdl7rJpFnY2s/giphy.gif https://media.giphy.com/media/l4FGoQFXF7xdU6O7m/giphy.gif https://media.giphy.com/media/cJSjCgihYx9GqHXzDN/giphy.gif https://media.giphy.com/media/1rK68yfkG1Q8Aw87Lv/giphy.gif https://media.giphy.com/media/1xlqOpx8T0dlV3ZoHV/giphy.gif https://media.giphy.com/media/3ohjV5W5NYvGnjJLTa/giphy.gif Remember to change the alt=\"\" value to describe the gif so that we meet 503 compliance. Repeat this a few times. NOTE: You can also go to giphy.com and find a gif you'd like to use. You'll need the \"Gif Link\" NOT the \"Short Link\", \"HTML5 Video\" or \"Embed\" link to copy/paste in between the \" \" of the src=\"\" attribute. Now create a CSS rule for gallery-two on line 25 in the CSS file to make it flexible. 1 2 3 . gallery-two { display : flex ; } Do that again for the third row: gallery-three . Once you have at least 9 total images, look at the ones you've added and compare them to the three you started with in the first row: row portrait-gallery . What's different? Why? Can you make them match? Change the order of your gifs. Can you -grow or -shrink your gifs? Practice It - Flex Box Froggy Now it's time to have some silly fun with serious results. Go and play, Flex Box Froggy ! How To Froggy Know Your Docs Again, I cannot over-emphasize this, read your docs! This is a crucial tool you will use throughout your career and learning to work through them now is vital to your success in the future. W3S - Flex MDN - Flex","title":"Flex Item"},{"location":"module-1/flexItemProperties/#flex-item-properties","text":"Now that you have a basic understanding of using the value flex with the property display for a \"Container\" element/Parent element and the associated properties to position the Child elements its time now to see some of the specific properties for the child elements. As we move deeper in to these properties you'll notice a pattern emerge: properties of HTML Elements set by CSS come in groups because they are associated with each other. For instance, we've covered the Box Model Properties which include height , width , padding , border , and margin along with all of the sub-properties associated with each of them: margin-top , margin-bottom , padding-top , border-top , so forth and so forth. Soon you learn about the position property and the top and left together because they are associated with each other. Now we're in the Display Flex property/value with justify-content and flex-wrap and all the others. This pattern is important because it will help you learn faster and deeper! By now, you already have a good understanding HTML element just being objects with properties, methods, and events. You know that JS functions can be triggered by an event on an element like onclick and that methods are just built in functions that we don't have to write ourselves. As you move forward trust that you have a good basis to build from and that you CAN learn these seemingly complicated technologies. You got this!!","title":"Flex Item Properties"},{"location":"module-1/flexItemProperties/#the-properties","text":"Items inside a \"Container\"/Parent Element with its display property set to flex are said to be flex items . When these items are rendered inside a flex display they get unique properties not available outside of the flex container. As you saw in the CSS Tricks Flex Guide they include: order - specifies the order of the flex items. You can tell the 3rd item to be the 1st item to be displayed. flex-grow - specifies how much a flex item will grow relative to the rest of the flex items. Items can be bigger than others. flex-shrink - how much a flex item will shrink relative to the rest of the flex items. They can also be smaller! flex-basis - specifies the initial length of a flex item. Add as much as you like. align-self - specifies the alignment for the selected item inside the flexible container and overrides the align-items of the parent container. NOTE: Again, if you like shorthand (and don't mind less code readability), the flex property combines flex-grow, flex-shrink, and flex-basis into one.","title":"The Properties"},{"location":"module-1/flexItemProperties/#practice-it-giphy-gallery","text":"Fork the Giphy Gallery - https://codepen.io/austincoding/pen/pozQRyQ Take a look at the HTML file. Can you find the <section class=\"row portrait-gallery\"> code on line 2? Inside this section you'll see three <img> elements. The <img> element has an attribute/property called src= , which stands for source, which is where the image comes from. In this case the images are coming from giphy.com . After that we see another attribute/property called alt= , which stands for alternate text. This is for people with blindness that can't see the image we put on the screen. It's important for you to create a descriptive alternate text for them to hear read to them. After that we see height= and width= which, of course, determine how big the images are. Go ahead and copy/paste this line: <img src=\"\" alt=\"what the image is\" height=\"360\" width=\"240\"> and add it into the <section> tag with the class name row gallery-two on line 7, so it looks like this: 1 2 3 4 5 < section class = \"row gallery-two\" > <!-- Copy/Paste the line below for as many images as you'd like --> < img src = \"\" alt = \"what the image is\" height = \"360\" width = \"240\" > < img src = \"https://media.giphy.com/media/CBnvmgOvK1d9C/giphy.gif\" alt = \"what the image is\" height = \"360\" width = \"240\" > </ section > Use the suggested links below to copy/paste in between the \" \" of src=\"\" attribute: https://media.giphy.com/media/l1KVcrdl7rJpFnY2s/giphy.gif https://media.giphy.com/media/l4FGoQFXF7xdU6O7m/giphy.gif https://media.giphy.com/media/cJSjCgihYx9GqHXzDN/giphy.gif https://media.giphy.com/media/1rK68yfkG1Q8Aw87Lv/giphy.gif https://media.giphy.com/media/1xlqOpx8T0dlV3ZoHV/giphy.gif https://media.giphy.com/media/3ohjV5W5NYvGnjJLTa/giphy.gif Remember to change the alt=\"\" value to describe the gif so that we meet 503 compliance. Repeat this a few times. NOTE: You can also go to giphy.com and find a gif you'd like to use. You'll need the \"Gif Link\" NOT the \"Short Link\", \"HTML5 Video\" or \"Embed\" link to copy/paste in between the \" \" of the src=\"\" attribute. Now create a CSS rule for gallery-two on line 25 in the CSS file to make it flexible. 1 2 3 . gallery-two { display : flex ; } Do that again for the third row: gallery-three . Once you have at least 9 total images, look at the ones you've added and compare them to the three you started with in the first row: row portrait-gallery . What's different? Why? Can you make them match? Change the order of your gifs. Can you -grow or -shrink your gifs?","title":"Practice It - Giphy Gallery"},{"location":"module-1/flexItemProperties/#practice-it-flex-box-froggy","text":"Now it's time to have some silly fun with serious results. Go and play, Flex Box Froggy ! How To Froggy","title":"Practice It - Flex Box Froggy"},{"location":"module-1/flexItemProperties/#know-your-docs","text":"Again, I cannot over-emphasize this, read your docs! This is a crucial tool you will use throughout your career and learning to work through them now is vital to your success in the future. W3S - Flex MDN - Flex","title":"Know Your Docs"},{"location":"module-1/mediaQueries/","text":"Media Queries \u201cIf you're reading this... Congratulations, you're alive. If that's not something to smile about, then I don't know what is.\u201d \u2015Chad Sugg, Monsters Under Your Head Overview People access the web using a dizzying number of different types of devices: desktops, iPhones, Android phones, iPads, Kindles, smartWatches, smartTVs \u2014 and the list is increasing every fiscal quarter. With so many different screens and physical interfaces available, designers have the challenge of designing for each of these views while developers have the problem of rendering the chosen content and style for each of them. One way to tailor styling according to device type is using a media query. A media query identifies the type/size of device requesting the page, and specific media features \u2014 most frequently the width of the browser's viewport . Responsive Web Design Responsive Web Design About 56% of all web traffic is mobile. This is a huge portion of the overall traffic, and you need to be a part of it! Take any website you're fond of \u2014 say, SmashingMagazine . Navigate there, making sure you're not in full-screen mode; grab the edge of the window, and shrink it to the width of a phone. What happens? This is responsive web design; most web pages have this functionality built in, and now we're going to learn to create it ourselves! As the name implies, we'll be building web pages that respond to the type/size of the device that is requesting the website or web app we built. Our job as developers is to create pages that can accommodate all devices, whether this means building separate views for each device we expect our web app to be viewed on, or simply using fluid grids and flexible images and text . As you grow in your career you'll learn about all of the many queries you can make on a device and how you can change the content you deliver to it, but for the purpose of \"learning employable skills quickly\" we'll focus this lesson on the most popular and easiest media query, @media and target just three of the many existing types of devices: phones , desktops , and tablets . while providing you optional ways to query and deliver. @media in Action Remember those two examples of grid-template-area from the last lesson? Here's a way you can use them to adapt your web pages' view quickly and easily Using the same HTML from last time: index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!-- ...more HTML code here... --> < header > header </ header > < nav > < ul > < li >< a href = \"#\" > nav 1 </ a ></ li > < li >< a href = \"#\" > nav 2 </ a ></ li > < li >< a href = \"#\" > nav 3 </ a ></ li > </ ul > </ nav > < main > < h1 > Main Title </ h1 > < p > Main content </ p > </ main > < aside > aside </ aside > < div class = \"banner\" > div.banner </ div > < footer > footer </ footer > </ body > index-style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /* Same colors and names as before*/ header { background-color : bisque ; grid-area : header ; } main { background-color : cadetblue ; grid-area : main ; } nav { background-color : coral ; grid-area : nav ; } aside { background-color : crimson ; grid-area : aside ; } . banner { background-color : darkkhaki ; grid-area : banner ; } footer { background-color : darkslategrey ; grid-area : footer ; } . container { display : grid ; } Notice we gave our body element the grid value to its display property. This way our body is always going to be a grid. But then we do something interesting... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @ media ( min-width : 700px ) { . container { grid-template-columns : 1 fr 3 fr ; grid-template-areas : \"header header\" \"nav aside\" \"main main\" \"footer banner\" ; } nav ul { display : flex ; justify-content : space - evenly ; } } Do you see the @media (min-width: 700px) { line? This is a block of CSS code that will only be used if the device reading the web page is above 700px . The reason we do this is for us to serve specific CSS to those devices. We can then create new rules for other devices: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 @ media ( max-width : 699px ) { . container { grid-template-columns : 1 fr ; grid-template-areas : \"header \" \"nav\" \"aside\" \"main\" \"footer\" \"banner\" ; } nav ul { display : flex ; justify-content : space - evenly ; } } Do you see the @media (max-width: 699px) { line? This is called a Break-Point . If you pasted both of these code snippets into a CodePen or your text editor you could resize your browser window to see the two rules go into effect as you get smaller and back to bigger when you cross the break-point of 699px to 700px . Try it yourself ! Popular Media Queries To have your CSS respond to different screen sizes, you can simply ask, or \"query\", the screen size, and apply special CSS rules. Here is a cheat sheet listing pretty much all the media queries you'll ever need! Normally we design for the smallest screen first, and move up from there using the min-width query to step up. The max-width would only be used for half-step where you need extreme specificity. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 /* Extra Small and up (Portrait Phones) */ /* Small and up (Landscape Phones) */ @ media ( min-width : 576px ) { } /* Medium and up (Tablets) */ @ media ( min-width : 768px ) { } /* Large and up (Desktops) */ @ media ( min-width : 992px ) { } /* Extra Large and up (Wide Screen Desktops) */ @ media ( min-width : 1200px ) { } Practice It - Media Queries Create your own rules Create a new folder and copy/paste the previous code snippets into it. Live-serve it to see see the changes as you resize your browser window. Add new rules to it like changing font-color, size, border, background-color, text-align or any other rules you've already learned!! Create a new repo and put this code into it to practice your git software skills. Responsive Navbar Open up the CodePen in a new tab. Be sure you're not in full-screen mode . Grab the edge of the window and shrink it to the width of a phone. Watch the navigation button on the left side. Cool, right? Optional Method A media type can be queried in the head of an HTML document, using the media attribute on a <link /> element. Essentially, you ask what size the device is and then serve it a specific CSS file instead of doing the @media() in a single CSS file just the same way you link your normal style.css file. 1 2 3 4 5 6 <!-- index.html file --> <!-- CSS media query on a link element --> < head > < link rel = \"stylesheet\" media = \"(max-width: 400px)\" href = \"my400wide-style.css\" /> < link rel = \"stylesheet\" media = \"(max-width: 800px)\" href = \"my800wide-style.css\" /> </ head > The method we covered in depth is the preferred but with this other way you can query other properties as you need them. Additional Resources YT, DevTips - Responsive Website Basics YT, Kevin Powell - Learn CSS Media Queries < 5mins Know Your Docs MDN Docs - Media Queries","title":"Media Queries"},{"location":"module-1/mediaQueries/#media-queries","text":"\u201cIf you're reading this... Congratulations, you're alive. If that's not something to smile about, then I don't know what is.\u201d \u2015Chad Sugg, Monsters Under Your Head","title":"Media Queries"},{"location":"module-1/mediaQueries/#overview","text":"People access the web using a dizzying number of different types of devices: desktops, iPhones, Android phones, iPads, Kindles, smartWatches, smartTVs \u2014 and the list is increasing every fiscal quarter. With so many different screens and physical interfaces available, designers have the challenge of designing for each of these views while developers have the problem of rendering the chosen content and style for each of them. One way to tailor styling according to device type is using a media query. A media query identifies the type/size of device requesting the page, and specific media features \u2014 most frequently the width of the browser's viewport .","title":"Overview"},{"location":"module-1/mediaQueries/#responsive-web-design","text":"Responsive Web Design About 56% of all web traffic is mobile. This is a huge portion of the overall traffic, and you need to be a part of it! Take any website you're fond of \u2014 say, SmashingMagazine . Navigate there, making sure you're not in full-screen mode; grab the edge of the window, and shrink it to the width of a phone. What happens? This is responsive web design; most web pages have this functionality built in, and now we're going to learn to create it ourselves! As the name implies, we'll be building web pages that respond to the type/size of the device that is requesting the website or web app we built. Our job as developers is to create pages that can accommodate all devices, whether this means building separate views for each device we expect our web app to be viewed on, or simply using fluid grids and flexible images and text . As you grow in your career you'll learn about all of the many queries you can make on a device and how you can change the content you deliver to it, but for the purpose of \"learning employable skills quickly\" we'll focus this lesson on the most popular and easiest media query, @media and target just three of the many existing types of devices: phones , desktops , and tablets . while providing you optional ways to query and deliver.","title":"Responsive Web Design"},{"location":"module-1/mediaQueries/#media-in-action","text":"Remember those two examples of grid-template-area from the last lesson? Here's a way you can use them to adapt your web pages' view quickly and easily Using the same HTML from last time: index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!-- ...more HTML code here... --> < header > header </ header > < nav > < ul > < li >< a href = \"#\" > nav 1 </ a ></ li > < li >< a href = \"#\" > nav 2 </ a ></ li > < li >< a href = \"#\" > nav 3 </ a ></ li > </ ul > </ nav > < main > < h1 > Main Title </ h1 > < p > Main content </ p > </ main > < aside > aside </ aside > < div class = \"banner\" > div.banner </ div > < footer > footer </ footer > </ body > index-style.css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /* Same colors and names as before*/ header { background-color : bisque ; grid-area : header ; } main { background-color : cadetblue ; grid-area : main ; } nav { background-color : coral ; grid-area : nav ; } aside { background-color : crimson ; grid-area : aside ; } . banner { background-color : darkkhaki ; grid-area : banner ; } footer { background-color : darkslategrey ; grid-area : footer ; } . container { display : grid ; } Notice we gave our body element the grid value to its display property. This way our body is always going to be a grid. But then we do something interesting... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @ media ( min-width : 700px ) { . container { grid-template-columns : 1 fr 3 fr ; grid-template-areas : \"header header\" \"nav aside\" \"main main\" \"footer banner\" ; } nav ul { display : flex ; justify-content : space - evenly ; } } Do you see the @media (min-width: 700px) { line? This is a block of CSS code that will only be used if the device reading the web page is above 700px . The reason we do this is for us to serve specific CSS to those devices. We can then create new rules for other devices: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 @ media ( max-width : 699px ) { . container { grid-template-columns : 1 fr ; grid-template-areas : \"header \" \"nav\" \"aside\" \"main\" \"footer\" \"banner\" ; } nav ul { display : flex ; justify-content : space - evenly ; } } Do you see the @media (max-width: 699px) { line? This is called a Break-Point . If you pasted both of these code snippets into a CodePen or your text editor you could resize your browser window to see the two rules go into effect as you get smaller and back to bigger when you cross the break-point of 699px to 700px . Try it yourself !","title":"@media in Action"},{"location":"module-1/mediaQueries/#popular-media-queries","text":"To have your CSS respond to different screen sizes, you can simply ask, or \"query\", the screen size, and apply special CSS rules. Here is a cheat sheet listing pretty much all the media queries you'll ever need! Normally we design for the smallest screen first, and move up from there using the min-width query to step up. The max-width would only be used for half-step where you need extreme specificity. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 /* Extra Small and up (Portrait Phones) */ /* Small and up (Landscape Phones) */ @ media ( min-width : 576px ) { } /* Medium and up (Tablets) */ @ media ( min-width : 768px ) { } /* Large and up (Desktops) */ @ media ( min-width : 992px ) { } /* Extra Large and up (Wide Screen Desktops) */ @ media ( min-width : 1200px ) { }","title":"Popular Media Queries"},{"location":"module-1/mediaQueries/#practice-it-media-queries","text":"Create your own rules Create a new folder and copy/paste the previous code snippets into it. Live-serve it to see see the changes as you resize your browser window. Add new rules to it like changing font-color, size, border, background-color, text-align or any other rules you've already learned!! Create a new repo and put this code into it to practice your git software skills. Responsive Navbar Open up the CodePen in a new tab. Be sure you're not in full-screen mode . Grab the edge of the window and shrink it to the width of a phone. Watch the navigation button on the left side. Cool, right?","title":"Practice It - Media Queries"},{"location":"module-1/mediaQueries/#optional-method","text":"A media type can be queried in the head of an HTML document, using the media attribute on a <link /> element. Essentially, you ask what size the device is and then serve it a specific CSS file instead of doing the @media() in a single CSS file just the same way you link your normal style.css file. 1 2 3 4 5 6 <!-- index.html file --> <!-- CSS media query on a link element --> < head > < link rel = \"stylesheet\" media = \"(max-width: 400px)\" href = \"my400wide-style.css\" /> < link rel = \"stylesheet\" media = \"(max-width: 800px)\" href = \"my800wide-style.css\" /> </ head > The method we covered in depth is the preferred but with this other way you can query other properties as you need them.","title":"Optional Method"},{"location":"module-1/mediaQueries/#additional-resources","text":"YT, DevTips - Responsive Website Basics YT, Kevin Powell - Learn CSS Media Queries < 5mins","title":"Additional Resources"},{"location":"module-1/mediaQueries/#know-your-docs","text":"MDN Docs - Media Queries","title":"Know Your Docs"},{"location":"module-1/moreCssSelectors/","text":"More CSS Selectors \u201cListen to the mustn'ts, child. Listen to the don'ts. Listen to the shouldn'ts, the impossibles, the won'ts. Listen to the never haves, then listen close to me... Anything can happen, child. Anything can be.\u201d \u2015Shel Silverstein Overview Today we're going to spend some solid time on how to select the right element in your HTML file so you can style and manipulate to your pleasure. NOTE: This can be a little trickier than you may first realize. Remember the \"Cascade\"? In this lesson, we're going to talk a little more about that and learn how to get to exactly the element on the document we want! Today you'll learn to: 1. Reference elements by selectors and why you'd use different selectors. 1. Select and style an element based on pseudo-elements and pseudo-classes. 1. Implement inheritance and learn to work with it using the Rules of Specificity. The Selectors The reason for all the many selectors is because of the way the DOM is built under-the-hood. As the browser loads your HTML it reserves space for each of the elements in the file, then assigns them properties and values based on what it finds in your CSS and JS files. As it does this it will rewrite those values when it finds a new value assignment, but... if no property & value is found for each child elements during the build, they will Inherit the properties & values of their Parent Elements. This process of Inheriting and reassigning values as the page is built is the Cascade of C ascading S tyle S heets. But the Cascade can be overwritten using the Rules of Specificity , hence why we need so many selectors. The 5 Main of Selectors ids - This is added inside the element's opening tag and denoted with a \"#\". html <article id=\"element_ID\"> text goes here </article> classes - This is denoted by the keyword: class=\"someClassNameHere\" html <article class=\"element_class\"> text goes here </article> attributes - <input disabled > For a full list of HTML attributes . pseudo-classes are selectors used on an element when something is done to them like when you hover over an element with your cursor: :hover { } Type Selector index.html 1 < a href = \"https://google.com\" > Google </ a > index-style.css 1 2 3 4 a { /* removes the underline */ text-decoration : none ; } This selector is useful at saving you typing time by setting generic rules for all of your <p> tags, or all of your <section> tags so that they all have the same general style, but then you can give them a class name or id when you want each one to look/do something different than the other <p> and <section> tag. id Selector The id selector is used for a unique element, which means that an id should only be used one time, on one element, per page. Simply add an id attribute and a value. index.html 1 2 < div id = \"mario\" ></ div > < div id = \"wario\" ></ div > index-style.css 1 2 3 4 5 6 7 # mario { color : red ; } # wario { color : yellow ; } You should only use an id once but you can use multiple ids on a page. Class Selector The class selector is very similar to the id selector, but class can be shared with more elements. You can apply classes multiple times on a page to any element you want. index.html 1 2 3 < div class = \"luigi\" ></ div > < div ></ div > < div class = \"luigi\" ></ div > index-style.css 1 2 3 . luigi { color : green ; } Attribute Selector You are not restricted to the two attributes, class and id. You can specify other element-specific attributes by using [square brackets] . Inside the brackets you put the attribute name, optionally followed by a matching operator and a value. index.html 1 2 < a disabled > I'm a disabled link! </ a > < input type = \"button\" > index-style.css 1 2 3 4 5 6 7 [ disabled ] { color : gray ; } [ type = \"button\" ] { font-size : 16 px ; } Psuedo-class Selectors A CSS pseudo-class is a keyword added to one of the selectors covered above that specifies a special characteristic or state of the element you're selecting. For example :hover will apply a style when the user's cursor hovers over the element specified by the selector. You won't see these special state attributes explicitly written in HTML, but they are present nonetheless, as Element Properties ready to be manipulated using CSS. 1 2 3 4 /* The Syntax looks like this: */ selector : pseudo-class { property : value ; } index.html 1 < section ></ section > index-style.css 1 2 3 4 5 6 7 8 section { display : block ; background-color : blue ; } section : focus { background-color : yellow ; } Practice It - Common CSS Selectors Fork the CSS Selector CodePen Give every other <li> element the class name \"other\" Make the font color of \"other\" brown . Make the font style of \"other verdana . Give different id attributes to each of the <p> elements. Use the id s to give them different background colors. Select the body element an get the text to be centered in the middle of the page. Fork the Pseudo Selector CodePen Make an <h1></h1> tag in the html In the CSS, pseudo-select the h1 with a :hover and make it change to the font color of your choice when you hover on it. copy/paste the tr:nth-child(odd) rule and see if you can add a hover selector on top of it to make the light blue backgrounds change to yellow when hovered on. Do the same to the even numbered trs but give them a different background color. Fork the CSS Selector Practice Exercise CodePen Follow the directions in the comment section of the CSS to learn more about selectors. --or-- follow these instructions Give the <body> element a background: #bdc3c7; Make the <h1> element color: #9b59b6; Make all <h2> elements color: orange; Make all <li> elements blue(Use this tool to pick your own hexadecimal blue) Change the background on every paragraph to be background: yellow ; Make all inputs have a border: solid red 3px ; Give everything with the class ' hello ' a white background Give the element with id 'special' a 2px solid blue border(pick your own rgb blue) #special { border: #ff0000 } Make all the <p> 's that are nested inside of divs 25px font(font-size: 25px) Make only inputs with type 'text' have a gray background Give both <p> 's inside the 3rd <div> a pink background Give the 2nd <p> inside the 3rd <div> a 5px white border Make the <em> in the 3rd <div> element white and 20px font(font-size:20px) BONUS CHALLENGES You may need to research some other selectors and properties Make all \"checked\" checkboxes have a left margin of 50px(margin-left: 50px) Make the <label> elements all UPPERCASE without changing the HTML(definitely look this one up Make the first letter of the element with id 'special' green and 100px font size(font-size: 100) Make the <h1> element's color change to blue when hovered over Make the <a> element's that have been visited gray Additional Resources Article, CSS Tricks - Difference btw id and class Article, CSS Tricks - Inheritance Reference, CSSFontStack - Verdana Know Your Docs W3S Docs - HTML attributes","title":"More CSS Selectors"},{"location":"module-1/moreCssSelectors/#more-css-selectors","text":"\u201cListen to the mustn'ts, child. Listen to the don'ts. Listen to the shouldn'ts, the impossibles, the won'ts. Listen to the never haves, then listen close to me... Anything can happen, child. Anything can be.\u201d \u2015Shel Silverstein","title":"More CSS Selectors"},{"location":"module-1/moreCssSelectors/#overview","text":"Today we're going to spend some solid time on how to select the right element in your HTML file so you can style and manipulate to your pleasure. NOTE: This can be a little trickier than you may first realize. Remember the \"Cascade\"? In this lesson, we're going to talk a little more about that and learn how to get to exactly the element on the document we want! Today you'll learn to: 1. Reference elements by selectors and why you'd use different selectors. 1. Select and style an element based on pseudo-elements and pseudo-classes. 1. Implement inheritance and learn to work with it using the Rules of Specificity.","title":"Overview"},{"location":"module-1/moreCssSelectors/#the-selectors","text":"The reason for all the many selectors is because of the way the DOM is built under-the-hood. As the browser loads your HTML it reserves space for each of the elements in the file, then assigns them properties and values based on what it finds in your CSS and JS files. As it does this it will rewrite those values when it finds a new value assignment, but... if no property & value is found for each child elements during the build, they will Inherit the properties & values of their Parent Elements. This process of Inheriting and reassigning values as the page is built is the Cascade of C ascading S tyle S heets. But the Cascade can be overwritten using the Rules of Specificity , hence why we need so many selectors. The 5 Main of Selectors ids - This is added inside the element's opening tag and denoted with a \"#\". html <article id=\"element_ID\"> text goes here </article> classes - This is denoted by the keyword: class=\"someClassNameHere\" html <article class=\"element_class\"> text goes here </article> attributes - <input disabled > For a full list of HTML attributes . pseudo-classes are selectors used on an element when something is done to them like when you hover over an element with your cursor: :hover { }","title":"The Selectors"},{"location":"module-1/moreCssSelectors/#type-selector","text":"index.html 1 < a href = \"https://google.com\" > Google </ a > index-style.css 1 2 3 4 a { /* removes the underline */ text-decoration : none ; } This selector is useful at saving you typing time by setting generic rules for all of your <p> tags, or all of your <section> tags so that they all have the same general style, but then you can give them a class name or id when you want each one to look/do something different than the other <p> and <section> tag.","title":"Type Selector"},{"location":"module-1/moreCssSelectors/#id-selector","text":"The id selector is used for a unique element, which means that an id should only be used one time, on one element, per page. Simply add an id attribute and a value. index.html 1 2 < div id = \"mario\" ></ div > < div id = \"wario\" ></ div > index-style.css 1 2 3 4 5 6 7 # mario { color : red ; } # wario { color : yellow ; } You should only use an id once but you can use multiple ids on a page.","title":"id Selector"},{"location":"module-1/moreCssSelectors/#class-selector","text":"The class selector is very similar to the id selector, but class can be shared with more elements. You can apply classes multiple times on a page to any element you want. index.html 1 2 3 < div class = \"luigi\" ></ div > < div ></ div > < div class = \"luigi\" ></ div > index-style.css 1 2 3 . luigi { color : green ; }","title":"Class Selector"},{"location":"module-1/moreCssSelectors/#attribute-selector","text":"You are not restricted to the two attributes, class and id. You can specify other element-specific attributes by using [square brackets] . Inside the brackets you put the attribute name, optionally followed by a matching operator and a value. index.html 1 2 < a disabled > I'm a disabled link! </ a > < input type = \"button\" > index-style.css 1 2 3 4 5 6 7 [ disabled ] { color : gray ; } [ type = \"button\" ] { font-size : 16 px ; }","title":"Attribute Selector"},{"location":"module-1/moreCssSelectors/#psuedo-class-selectors","text":"A CSS pseudo-class is a keyword added to one of the selectors covered above that specifies a special characteristic or state of the element you're selecting. For example :hover will apply a style when the user's cursor hovers over the element specified by the selector. You won't see these special state attributes explicitly written in HTML, but they are present nonetheless, as Element Properties ready to be manipulated using CSS. 1 2 3 4 /* The Syntax looks like this: */ selector : pseudo-class { property : value ; } index.html 1 < section ></ section > index-style.css 1 2 3 4 5 6 7 8 section { display : block ; background-color : blue ; } section : focus { background-color : yellow ; }","title":"Psuedo-class Selectors"},{"location":"module-1/moreCssSelectors/#practice-it-common-css-selectors","text":"Fork the CSS Selector CodePen Give every other <li> element the class name \"other\" Make the font color of \"other\" brown . Make the font style of \"other verdana . Give different id attributes to each of the <p> elements. Use the id s to give them different background colors. Select the body element an get the text to be centered in the middle of the page. Fork the Pseudo Selector CodePen Make an <h1></h1> tag in the html In the CSS, pseudo-select the h1 with a :hover and make it change to the font color of your choice when you hover on it. copy/paste the tr:nth-child(odd) rule and see if you can add a hover selector on top of it to make the light blue backgrounds change to yellow when hovered on. Do the same to the even numbered trs but give them a different background color. Fork the CSS Selector Practice Exercise CodePen Follow the directions in the comment section of the CSS to learn more about selectors. --or-- follow these instructions Give the <body> element a background: #bdc3c7; Make the <h1> element color: #9b59b6; Make all <h2> elements color: orange; Make all <li> elements blue(Use this tool to pick your own hexadecimal blue) Change the background on every paragraph to be background: yellow ; Make all inputs have a border: solid red 3px ; Give everything with the class ' hello ' a white background Give the element with id 'special' a 2px solid blue border(pick your own rgb blue) #special { border: #ff0000 } Make all the <p> 's that are nested inside of divs 25px font(font-size: 25px) Make only inputs with type 'text' have a gray background Give both <p> 's inside the 3rd <div> a pink background Give the 2nd <p> inside the 3rd <div> a 5px white border Make the <em> in the 3rd <div> element white and 20px font(font-size:20px) BONUS CHALLENGES You may need to research some other selectors and properties Make all \"checked\" checkboxes have a left margin of 50px(margin-left: 50px) Make the <label> elements all UPPERCASE without changing the HTML(definitely look this one up Make the first letter of the element with id 'special' green and 100px font size(font-size: 100) Make the <h1> element's color change to blue when hovered over Make the <a> element's that have been visited gray","title":"Practice It - Common CSS Selectors"},{"location":"module-1/moreCssSelectors/#additional-resources","text":"Article, CSS Tricks - Difference btw id and class Article, CSS Tricks - Inheritance Reference, CSSFontStack - Verdana","title":"Additional Resources"},{"location":"module-1/moreCssSelectors/#know-your-docs","text":"W3S Docs - HTML attributes","title":"Know Your Docs"},{"location":"module-1/moreGridProperties/","text":"More Grid Properties Just like with flex, when we use grid we have a load more properties that we get to use to get our web pages to look exactly the way our designers laid them out to be. We'll cover many of them here but be sure to checkout the Know Your Docs section to see more, get your short-hand code (if you like), and reference all the properties available with grid . Grid Gaps Between each of the Grid Items are gutters or gaps. You can adjust the size of these Gaps with the following properties: grid-column-gap and grid-row-gap 1 2 3 4 5 . grid-container-element { display : grid ; grid-column-gap : 8 pt ; grid-row-gap : 2 pt ; } Justify-Content & Align Justify-Content & Align Since you're already familiar with the additional properties with flex you'll be happy to know that you can do the same thing with grid : 1 2 3 4 5 6 7 8 9 . grid-container-element { display : grid ; /* position on the x-axis */ justify-content : space - evenly ; /* position on the y-axis */ align : center ; } /* You can also use: space-between, space-around, start, end, and center */ The Unit: fr So far we've given our rows and columns percentages of the display. But as you work with other people's code you'll likely come across fr , a unit of fractions. It stands for a fraction of the total available space. In the snippet below we have 4 equally sized columns. They are laid out the same way as we saw earlier by giving 4 values to the grid-template-column property. But instead of % we'll use fr . 1 2 3 4 . our-parent-container { display : grid ; grid-template-columns : 1 fr 1 fr 1 fr 1 fr ; } In the next snippet we'll see 4 columns again but now the two on the left will be half the width and the one on the right will be twice the width: 1 2 3 4 . our-parent-container { display : grid ; grid-template-columns : .5 fr .5 fr 1 fr 2 fr ; } When using frs it's important to make sure the numbers add up to the whole number equal to the number of columns just the same way we make sure that our percentages total 100. So if we have 5 columns, our frs need to add up to 5, i.e. 1fr 2fr 2fr .5fr .5fr , 1fr 1fr 1fr 1fr 1fr or .5fr 1fr 1fr 2fr .5fr , etc. The Short-Hands We won't cover these in detail because you don't necessarily need them right away but just incase you want to advance your skills let's make you aware of them: grid-area property can be used as a shorthand property for the grid-row-start , grid-column-start , grid-row-end and the grid-column-end properties. grid-template-areas take values of elements with the Parent Container and arrange them depending on their order . Practice It - CSS Grid Part One: FR & Gap fr & CSS Gap CodePen - [ ] Fork the CodePen, - [ ] In the CSS file, change the values on line 4 but be sure to maintain the total value of the number of columns, - [ ] On line 11, change the width of the gaps. - [ ] MUST DO! the CSS Grid Garden Part Two - Grid Garden!! MUST DO : Play CSS Grid Garden . If you get stuck, there are two hints for 26 and 28 below in the scrambled text. Warning! 1 2 In the next tab there are answers to #26 and #28 . But first, push yourself to see if you can work through these two problems on your own. Hidden Answers 1 2 3 4 5 6 7 8 9 10 11 12 **WARNING ANSWERS BELOW** > ////////////////////////////////////////////// > 88 : 00 = 5% 6^ 7& 8* 9() 1! 2@ 3# 4$ 5% 6^ 7& > 88 : 00 = 5% 6^ 7& 8* 9() 1! 2@ 3# 4$ 5% 6^ 7& > *26: grid-template-rows: 50px 0 0 0;* 1! 2@ 3# > 88 : 00 = 5% 6^ 7& 8* 9() 1! 2@ 3# 4$ 5% 6^ 7& > *28: 1fr 50px/ 20% 80%;* 1! 2@ 3# 4$ 5% 6^ 7& > 88 : 00 = 5% 6^ 7& 8* 9() 1! 2@ 3# 4$ 5% 6^ 7& > ////////////////////////////////////////////// Additional Resources YT, LayoutLand - Easy Layout with CSS Grid Article, CSS Tricks - Intro to FR Units Article, Alligator IO - Grid Areas Article, SmashingMagazine, Best Practices with Grid Know Your Docs W3S Docs - Grid W3S Docs - Grid Container W3S Docs - Grid Item CSS Tricks - Grid Trick","title":"Grid Properties"},{"location":"module-1/moreGridProperties/#more-grid-properties","text":"Just like with flex, when we use grid we have a load more properties that we get to use to get our web pages to look exactly the way our designers laid them out to be. We'll cover many of them here but be sure to checkout the Know Your Docs section to see more, get your short-hand code (if you like), and reference all the properties available with grid .","title":"More Grid Properties"},{"location":"module-1/moreGridProperties/#grid-gaps","text":"Between each of the Grid Items are gutters or gaps. You can adjust the size of these Gaps with the following properties: grid-column-gap and grid-row-gap 1 2 3 4 5 . grid-container-element { display : grid ; grid-column-gap : 8 pt ; grid-row-gap : 2 pt ; }","title":"Grid Gaps"},{"location":"module-1/moreGridProperties/#justify-content-align","text":"Justify-Content & Align Since you're already familiar with the additional properties with flex you'll be happy to know that you can do the same thing with grid : 1 2 3 4 5 6 7 8 9 . grid-container-element { display : grid ; /* position on the x-axis */ justify-content : space - evenly ; /* position on the y-axis */ align : center ; } /* You can also use: space-between, space-around, start, end, and center */","title":"Justify-Content &amp; Align"},{"location":"module-1/moreGridProperties/#the-unit-fr","text":"So far we've given our rows and columns percentages of the display. But as you work with other people's code you'll likely come across fr , a unit of fractions. It stands for a fraction of the total available space. In the snippet below we have 4 equally sized columns. They are laid out the same way as we saw earlier by giving 4 values to the grid-template-column property. But instead of % we'll use fr . 1 2 3 4 . our-parent-container { display : grid ; grid-template-columns : 1 fr 1 fr 1 fr 1 fr ; } In the next snippet we'll see 4 columns again but now the two on the left will be half the width and the one on the right will be twice the width: 1 2 3 4 . our-parent-container { display : grid ; grid-template-columns : .5 fr .5 fr 1 fr 2 fr ; } When using frs it's important to make sure the numbers add up to the whole number equal to the number of columns just the same way we make sure that our percentages total 100. So if we have 5 columns, our frs need to add up to 5, i.e. 1fr 2fr 2fr .5fr .5fr , 1fr 1fr 1fr 1fr 1fr or .5fr 1fr 1fr 2fr .5fr , etc.","title":"The Unit: fr"},{"location":"module-1/moreGridProperties/#the-short-hands","text":"We won't cover these in detail because you don't necessarily need them right away but just incase you want to advance your skills let's make you aware of them: grid-area property can be used as a shorthand property for the grid-row-start , grid-column-start , grid-row-end and the grid-column-end properties. grid-template-areas take values of elements with the Parent Container and arrange them depending on their order .","title":"The Short-Hands"},{"location":"module-1/moreGridProperties/#practice-it-css-grid","text":"","title":"Practice It - CSS Grid"},{"location":"module-1/moreGridProperties/#part-one-fr-gap","text":"fr & CSS Gap CodePen - [ ] Fork the CodePen, - [ ] In the CSS file, change the values on line 4 but be sure to maintain the total value of the number of columns, - [ ] On line 11, change the width of the gaps. - [ ] MUST DO! the CSS Grid Garden","title":"Part One: FR &amp; Gap"},{"location":"module-1/moreGridProperties/#part-two-grid-garden","text":"MUST DO : Play CSS Grid Garden . If you get stuck, there are two hints for 26 and 28 below in the scrambled text. Warning! 1 2 In the next tab there are answers to #26 and #28 . But first, push yourself to see if you can work through these two problems on your own. Hidden Answers 1 2 3 4 5 6 7 8 9 10 11 12 **WARNING ANSWERS BELOW** > ////////////////////////////////////////////// > 88 : 00 = 5% 6^ 7& 8* 9() 1! 2@ 3# 4$ 5% 6^ 7& > 88 : 00 = 5% 6^ 7& 8* 9() 1! 2@ 3# 4$ 5% 6^ 7& > *26: grid-template-rows: 50px 0 0 0;* 1! 2@ 3# > 88 : 00 = 5% 6^ 7& 8* 9() 1! 2@ 3# 4$ 5% 6^ 7& > *28: 1fr 50px/ 20% 80%;* 1! 2@ 3# 4$ 5% 6^ 7& > 88 : 00 = 5% 6^ 7& 8* 9() 1! 2@ 3# 4$ 5% 6^ 7& > //////////////////////////////////////////////","title":"Part Two - Grid Garden!!"},{"location":"module-1/moreGridProperties/#additional-resources","text":"YT, LayoutLand - Easy Layout with CSS Grid Article, CSS Tricks - Intro to FR Units Article, Alligator IO - Grid Areas Article, SmashingMagazine, Best Practices with Grid","title":"Additional Resources"},{"location":"module-1/moreGridProperties/#know-your-docs","text":"W3S Docs - Grid W3S Docs - Grid Container W3S Docs - Grid Item CSS Tricks - Grid Trick","title":"Know Your Docs"},{"location":"module-1/responsiveLayouts-gridAreas/","text":"Responsive Layouts & Grid Areas \u201cThere is neither happiness nor misery in the world; there is only the comparison of one state with another, nothing more. He who has felt the deepest grief is best able to experience supreme happiness. We must have felt what it is to die, [...] that we may appreciate the enjoyments of life. \u2014Alexandre Dumas Overview Now that you have a solid understanding of CSS Grid, let's turn our attention toward the multiple layouts needed for different screen sizes like the view of a laptop to a phone to a tablet. It's almost ridiculous to mention the need for these layouts because we see it all over the place but its important to remember, that everything you see on the web was built by someone, just like you that learned the same thing you're learning now. Again, front-end developers are responsible for building all the possible views for a website or web app so let's figure out the best ways do this. Grid Areas Along with being an introduction to responsive design, we'll also be getting a deeper dive into CSS Grid by studying grid-template-areas . If you didn't get that far in your latest pre-class lessons, here you go. This property is an incredibly powerful property to use with display: grid ; because it allows you to shuffle child elements around by just changing the value assigned to the grid-template-areas property! If you can imagine, this will make it very easy for us to develop a view for a phone and then a tablet and then a laptop! Before moving ahead, I'd like you to read this short article on Grid-Template-Areas . When you finish, come back and follow along with the examples below. I'll wait... Grid Areas Part One First, let's layout our elements in HTML. We'll create a body element with the class name container so we know that it will be our parent element for this page. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 < body class = \"container\" > < header > header </ header > < nav > < ul > < li >< a href = \"#\" > nav 1 </ a ></ li > < li >< a href = \"#\" > nav 2 </ a ></ li > < li >< a href = \"#\" > nav 3 </ a ></ li > </ ul > </ nav > < main > < h1 > Main Title </ h1 > < p > Main content </ p > </ main > < aside > aside </ aside > < div class = \"banner\" > div.banner </ div > < footer > footer </ footer > </ body > In our CSS file we declare each child element's grid-area property with a value we deem to be useful, i.e. the <nav></nav> element should get grid-area: nav; . NOTE: The name we pass in as the value will be used to arrange the elements when we get back to changing the CSS rules of our parent element. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 header { /* give each element some color to see more easily */ background-color : bisque ; /* notice this property on each rule, though, we'll use it when we're laying out the Parent Element's grid-template-area */ grid-area : header ; } main { background-color : cadetblue ; grid-area : main ; } nav { background-color : coral ; grid-area : nav ; } aside { background-color : crimson ; grid-area : aside ; } . banner { background-color : darkkhaki ; grid-area : banner ; } footer { background-color : darkslategrey ; grid-area : footer ; } Fantastic! Now each of our child elements have a name we can reference them by when we tell them where to be in the \"template-area\". In this next snippet, look at the number of -columns and -rows we create and then checkout the grid-template-areas property. Do you see the way we use the \"names\" of the child elements to position them on the screen? NOTE: to play with this for yourself, copy/paste these code snippets into a CodePen or your text editor. This is your responsibility and privilege now. Grid Area Styling 1 2 3 4 5 6 7 8 9 10 11 12 13 14 . container { display : grid ; grid-template-columns : auto auto auto auto ; grid-template-rows : 45 pt 55 pt 180 pt 180 pt 25 pt 45 pt ; grid-template-areas : \"header header header\" \"nav nav aside\" \"main main aside\" \"main main aside\" \"... banner ...\" \"footer footer footer\" } Result Grid Areas Part Two Before we dive into Media Queries in the next pre-class lesson let's first see how we can use the same HTML from above, and the same child element rules but change just the values of the grid-template-areas on the parent element to completely change the look on the screen. NOTE: the ... you see in the code stand for \"blank\" space on the screen. You saw this in the first example too: \"... banner ...\" . Grid Area CSS Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 . container { display : grid ; grid-template-columns : auto auto auto auto ; grid-template-rows : 45 pt 55 pt 180 pt 180 pt 25 pt 45 pt ; grid-template-areas : \"... header ...\" \"... aside ...\" \"... main ...\" \"... main ...\" \"... banner ...\" \"... footer ...\" \"... nav ...\" } Result Do you see how they're stacked upon one another now? Practice It - CSS Grid Areas Responsive CodePen Open the CodePen up and resize your browser's window while watching the content at the bottom of the screen. Fork the CodePen and then try rearranging the grid-areas. Have fun. Seriously! Can you guess how Media Queries work before the next lesson? Nested Grids You can also nest columns within columns. Let your curiosity over come you in the CodePen above to find out how! Additional Resources Article, Alligator.io - Grid Areas Know Your Docs W3S Docs - Grid-Template-Areas","title":"Responsive Layouts"},{"location":"module-1/responsiveLayouts-gridAreas/#responsive-layouts-grid-areas","text":"\u201cThere is neither happiness nor misery in the world; there is only the comparison of one state with another, nothing more. He who has felt the deepest grief is best able to experience supreme happiness. We must have felt what it is to die, [...] that we may appreciate the enjoyments of life. \u2014Alexandre Dumas","title":"Responsive Layouts &amp; Grid Areas"},{"location":"module-1/responsiveLayouts-gridAreas/#overview","text":"Now that you have a solid understanding of CSS Grid, let's turn our attention toward the multiple layouts needed for different screen sizes like the view of a laptop to a phone to a tablet. It's almost ridiculous to mention the need for these layouts because we see it all over the place but its important to remember, that everything you see on the web was built by someone, just like you that learned the same thing you're learning now. Again, front-end developers are responsible for building all the possible views for a website or web app so let's figure out the best ways do this.","title":"Overview"},{"location":"module-1/responsiveLayouts-gridAreas/#grid-areas","text":"Along with being an introduction to responsive design, we'll also be getting a deeper dive into CSS Grid by studying grid-template-areas . If you didn't get that far in your latest pre-class lessons, here you go. This property is an incredibly powerful property to use with display: grid ; because it allows you to shuffle child elements around by just changing the value assigned to the grid-template-areas property! If you can imagine, this will make it very easy for us to develop a view for a phone and then a tablet and then a laptop! Before moving ahead, I'd like you to read this short article on Grid-Template-Areas . When you finish, come back and follow along with the examples below. I'll wait...","title":"Grid Areas"},{"location":"module-1/responsiveLayouts-gridAreas/#grid-areas-part-one","text":"First, let's layout our elements in HTML. We'll create a body element with the class name container so we know that it will be our parent element for this page. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 < body class = \"container\" > < header > header </ header > < nav > < ul > < li >< a href = \"#\" > nav 1 </ a ></ li > < li >< a href = \"#\" > nav 2 </ a ></ li > < li >< a href = \"#\" > nav 3 </ a ></ li > </ ul > </ nav > < main > < h1 > Main Title </ h1 > < p > Main content </ p > </ main > < aside > aside </ aside > < div class = \"banner\" > div.banner </ div > < footer > footer </ footer > </ body > In our CSS file we declare each child element's grid-area property with a value we deem to be useful, i.e. the <nav></nav> element should get grid-area: nav; . NOTE: The name we pass in as the value will be used to arrange the elements when we get back to changing the CSS rules of our parent element. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 header { /* give each element some color to see more easily */ background-color : bisque ; /* notice this property on each rule, though, we'll use it when we're laying out the Parent Element's grid-template-area */ grid-area : header ; } main { background-color : cadetblue ; grid-area : main ; } nav { background-color : coral ; grid-area : nav ; } aside { background-color : crimson ; grid-area : aside ; } . banner { background-color : darkkhaki ; grid-area : banner ; } footer { background-color : darkslategrey ; grid-area : footer ; } Fantastic! Now each of our child elements have a name we can reference them by when we tell them where to be in the \"template-area\". In this next snippet, look at the number of -columns and -rows we create and then checkout the grid-template-areas property. Do you see the way we use the \"names\" of the child elements to position them on the screen? NOTE: to play with this for yourself, copy/paste these code snippets into a CodePen or your text editor. This is your responsibility and privilege now. Grid Area Styling 1 2 3 4 5 6 7 8 9 10 11 12 13 14 . container { display : grid ; grid-template-columns : auto auto auto auto ; grid-template-rows : 45 pt 55 pt 180 pt 180 pt 25 pt 45 pt ; grid-template-areas : \"header header header\" \"nav nav aside\" \"main main aside\" \"main main aside\" \"... banner ...\" \"footer footer footer\" } Result","title":"Grid Areas Part One"},{"location":"module-1/responsiveLayouts-gridAreas/#grid-areas-part-two","text":"Before we dive into Media Queries in the next pre-class lesson let's first see how we can use the same HTML from above, and the same child element rules but change just the values of the grid-template-areas on the parent element to completely change the look on the screen. NOTE: the ... you see in the code stand for \"blank\" space on the screen. You saw this in the first example too: \"... banner ...\" . Grid Area CSS Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 . container { display : grid ; grid-template-columns : auto auto auto auto ; grid-template-rows : 45 pt 55 pt 180 pt 180 pt 25 pt 45 pt ; grid-template-areas : \"... header ...\" \"... aside ...\" \"... main ...\" \"... main ...\" \"... banner ...\" \"... footer ...\" \"... nav ...\" } Result Do you see how they're stacked upon one another now?","title":"Grid Areas Part Two"},{"location":"module-1/responsiveLayouts-gridAreas/#practice-it-css-grid-areas","text":"Responsive CodePen Open the CodePen up and resize your browser's window while watching the content at the bottom of the screen. Fork the CodePen and then try rearranging the grid-areas. Have fun. Seriously! Can you guess how Media Queries work before the next lesson? Nested Grids You can also nest columns within columns. Let your curiosity over come you in the CodePen above to find out how!","title":"Practice It - CSS Grid Areas"},{"location":"module-1/responsiveLayouts-gridAreas/#additional-resources","text":"Article, Alligator.io - Grid Areas","title":"Additional Resources"},{"location":"module-1/responsiveLayouts-gridAreas/#know-your-docs","text":"W3S Docs - Grid-Template-Areas","title":"Know Your Docs"},{"location":"module-1/specificityAndCombinators/","text":"Specificity and Combinators Specificity is the means by which browsers decide which CSS property values are the most relevant to an element and, therefore, will be applied. Remember this order - it is critical for understanding how to properly apply (and debug) CSS. Least Specific More Specific Most Specific Type selectors and pseudo-elements Class selectors, attribute selectors and pseudo-classes ID selectors h1 , :before , etc... .example , [type=\"radio\"] , :hover , etc #example Universal selector ( * ), combinators ( + , > , ~ , ' ' (space)) and negation pseudo-class ( :not() ) have no effect on specificity. (The selectors declared inside : not() do, however.) Inline styles added to an element (e.g., style=\"font-weight:bold\" ) always overwrite any styles in external stylesheets - in a sense they can be considered to have the highest specificity. Take a look at the following code and determine what color the paragraph is going to be. Then uncomment the CSS and see if you are correct! CSS Combinators If you haven't picked up on this yet, you can stack multiple selectors on top of one another separated by a comma like so: 1 2 3 body , h1 , p , section , div { border : 1 px solid black ; } to give the same properties & values to multiple elements without typing them over and over again. The snippet above would make all body , h1 , p , section , div elements have a 1-pixel-wide-solid-black-border around them. If you don't put a comma between the selectors you'll create Descendent Selectors which select an element that is a descendant/child element/grandchild element of another specified element. These rules will apply to all descendants within that specified parent element. In short, descendant selectors are separated by a space with the parent selector on the left and the descendant on the right which is the one that is actually getting targeted. 1 2 3 4 5 6 7 8 9 10 /* \"body\" is the parent and \"h1\" is the targeted descendant element */ body h1 { font-size : 1.75 em ; } /* \"section\" is the grandparent and \".warning\" is the parent and \"p\" targeted descendant element */ section . warning p { color : red ; font-weight : bold ; } Perhaps the most useful are Child selectors which match an element that is a direct child of another. It will not include grandchildren and down. It is more restrictive than a descendant selector. It uses a > . 1 2 3 4 5 6 7 8 body > main { font-size : 1.75 em ; } section > article > h2 . title { color : red ; font-weight : bold ; } Practice It - Specificity MUST DO: CSS Diner !! Additional Resources YT, Clayton@ACA - CSS YT, DevTips - CSS Basics pt. 3 Know Your Docs Article, Carl Camera - CSS Poker W3S Docs - Pseudo Classes Article, SmashingMagazine - CSS Inheritance and Cascade","title":"CSS Specificity"},{"location":"module-1/specificityAndCombinators/#specificity-and-combinators","text":"Specificity is the means by which browsers decide which CSS property values are the most relevant to an element and, therefore, will be applied. Remember this order - it is critical for understanding how to properly apply (and debug) CSS. Least Specific More Specific Most Specific Type selectors and pseudo-elements Class selectors, attribute selectors and pseudo-classes ID selectors h1 , :before , etc... .example , [type=\"radio\"] , :hover , etc #example Universal selector ( * ), combinators ( + , > , ~ , ' ' (space)) and negation pseudo-class ( :not() ) have no effect on specificity. (The selectors declared inside : not() do, however.) Inline styles added to an element (e.g., style=\"font-weight:bold\" ) always overwrite any styles in external stylesheets - in a sense they can be considered to have the highest specificity. Take a look at the following code and determine what color the paragraph is going to be. Then uncomment the CSS and see if you are correct!","title":"Specificity and Combinators"},{"location":"module-1/specificityAndCombinators/#css-combinators","text":"If you haven't picked up on this yet, you can stack multiple selectors on top of one another separated by a comma like so: 1 2 3 body , h1 , p , section , div { border : 1 px solid black ; } to give the same properties & values to multiple elements without typing them over and over again. The snippet above would make all body , h1 , p , section , div elements have a 1-pixel-wide-solid-black-border around them. If you don't put a comma between the selectors you'll create Descendent Selectors which select an element that is a descendant/child element/grandchild element of another specified element. These rules will apply to all descendants within that specified parent element. In short, descendant selectors are separated by a space with the parent selector on the left and the descendant on the right which is the one that is actually getting targeted. 1 2 3 4 5 6 7 8 9 10 /* \"body\" is the parent and \"h1\" is the targeted descendant element */ body h1 { font-size : 1.75 em ; } /* \"section\" is the grandparent and \".warning\" is the parent and \"p\" targeted descendant element */ section . warning p { color : red ; font-weight : bold ; } Perhaps the most useful are Child selectors which match an element that is a direct child of another. It will not include grandchildren and down. It is more restrictive than a descendant selector. It uses a > . 1 2 3 4 5 6 7 8 body > main { font-size : 1.75 em ; } section > article > h2 . title { color : red ; font-weight : bold ; }","title":"CSS Combinators"},{"location":"module-1/specificityAndCombinators/#practice-it-specificity","text":"MUST DO: CSS Diner !!","title":"Practice It - Specificity"},{"location":"module-1/specificityAndCombinators/#additional-resources","text":"YT, Clayton@ACA - CSS YT, DevTips - CSS Basics pt. 3","title":"Additional Resources"},{"location":"module-1/specificityAndCombinators/#know-your-docs","text":"Article, Carl Camera - CSS Poker W3S Docs - Pseudo Classes Article, SmashingMagazine - CSS Inheritance and Cascade","title":"Know Your Docs"},{"location":"module-1/theBoxModel/","text":"The CSS Box Model Maybe everyone can live beyond what they're capable of. \u2015Markus Zusak, I Am the Messenger Throughout this course and the rest of the program you'll be introduced to many \"models\". We mean models by the way we can understand how computers interact with the world around them. They don't see models or know about models, rather models are just ways we humans can conceptualize the way a computer keeps up with memory and transfers that information to other computers. Today we're going to learn about the \" CSS Box Model \" which is, put shortly, a model that helps us understand how to change the size, shape and overall appearance on an HTML element on the screen. Think, every element we put in our HTML code has a representation on the screen. That thing on the screen is just a box or rectangle. But with CSS we can change its properties to be taller, wider, centered, have a border and even change the shape to not be a box ... The box model properties used to change the appearance of our rectangles are: height min-height max-height width min-width max-width margin - (short-hand of the following 4 properties) margin-top margin-right margin-bottom margin-left border - (short-hand of the following 3 properties) border-style border-color border-width border-radius padding - (short-hand of the following 4 properties) padding-top padding-right padding-bottom padding-left The six properties listed above comprise most of the Box Model properties. There are, of course, many more properties that allow you very fine-tuned control over the shape and size of your elements . But for much of our lessons we won't have time to cover them all (you'll have to do that on your own time!). To help you understand how the short-hand properties (seen above) can represent all of the long hand properties, below are two CSS declarations that style a Section Element the exact same way. Notice the differences... 1 2 3 4 5 6 7 8 section { background-color : #b1deef ; height : 200 px ; width : 200 px ; margin : 1 % auto ; padding : 5 % auto ; border : 1 px solid #264653 ; } The same properties could have been written this way, as well: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 section { background-color : #b1deef ; height : 200 px ; width : 200 px ; margin-top : 1 % ; margin-bottom : 1 % ; margin-left : auto ; margin-right : auto ; padding-top : 5 % ; padding-top : 5 % ; padding-right : auto ; padding-left : auto ; border-width : 1 px ; border-style : solid ; border-color : #264653 ; } Did you pick it up? If not, look again until you understand it for yourself. Do not move on until you got it! Box Model Visualizer We'll definitely be re-visiting this visualizer but it may be a good introduction for you now. This CSS Box Model Visualizer is a nifty tool built by Caroline Artz to help people see how each property on the element effects the visual representation of the element on the screen. Each of the sliders are labeled with the actual properties you could type in CSS and the values you see are actual values you could code in CSS. And the changing box at the bottom right is what the element would look like. Try it! Box Model Visualizer In the upcoming lessons we'll dig a little deeper into the four categories of the CSS Box Model: Content Height & Width Margin Border Padding In addition to knowing the Box Model in your head, your browser's developer Tools offer a visualization of each element. Just open your browser's devtools, hover over an element, then click to select the element. In the DevTool Tray you should see the \"Elements\" Tab highlighted at the top-left and to the right you'll see two sub-tabs named \"Styles\" and \"Computed\". The \"Styles\" tab will list all of the CSS rules that are applied to that element including rules that are overridden (denoted by a strike-through). Under the \"Computed\" tab you'll see a box with colors of blue(content), green(padding), yellow(border), orange(margin) along with numbers indicating the value in pixels. Keep this tool handy as you learn the properties of the Box Model and for the rest of your career!! Additional Resources See It - The Box Model CSS Tricks: The CSS Box Model Box Model, Sizing, Shadow","title":"The Box Model"},{"location":"module-1/theBoxModel/#the-css-box-model","text":"Maybe everyone can live beyond what they're capable of. \u2015Markus Zusak, I Am the Messenger Throughout this course and the rest of the program you'll be introduced to many \"models\". We mean models by the way we can understand how computers interact with the world around them. They don't see models or know about models, rather models are just ways we humans can conceptualize the way a computer keeps up with memory and transfers that information to other computers. Today we're going to learn about the \" CSS Box Model \" which is, put shortly, a model that helps us understand how to change the size, shape and overall appearance on an HTML element on the screen. Think, every element we put in our HTML code has a representation on the screen. That thing on the screen is just a box or rectangle. But with CSS we can change its properties to be taller, wider, centered, have a border and even change the shape to not be a box ... The box model properties used to change the appearance of our rectangles are: height min-height max-height width min-width max-width margin - (short-hand of the following 4 properties) margin-top margin-right margin-bottom margin-left border - (short-hand of the following 3 properties) border-style border-color border-width border-radius padding - (short-hand of the following 4 properties) padding-top padding-right padding-bottom padding-left The six properties listed above comprise most of the Box Model properties. There are, of course, many more properties that allow you very fine-tuned control over the shape and size of your elements . But for much of our lessons we won't have time to cover them all (you'll have to do that on your own time!). To help you understand how the short-hand properties (seen above) can represent all of the long hand properties, below are two CSS declarations that style a Section Element the exact same way. Notice the differences... 1 2 3 4 5 6 7 8 section { background-color : #b1deef ; height : 200 px ; width : 200 px ; margin : 1 % auto ; padding : 5 % auto ; border : 1 px solid #264653 ; } The same properties could have been written this way, as well: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 section { background-color : #b1deef ; height : 200 px ; width : 200 px ; margin-top : 1 % ; margin-bottom : 1 % ; margin-left : auto ; margin-right : auto ; padding-top : 5 % ; padding-top : 5 % ; padding-right : auto ; padding-left : auto ; border-width : 1 px ; border-style : solid ; border-color : #264653 ; } Did you pick it up? If not, look again until you understand it for yourself. Do not move on until you got it!","title":"The CSS Box Model"},{"location":"module-1/theBoxModel/#box-model-visualizer","text":"We'll definitely be re-visiting this visualizer but it may be a good introduction for you now. This CSS Box Model Visualizer is a nifty tool built by Caroline Artz to help people see how each property on the element effects the visual representation of the element on the screen. Each of the sliders are labeled with the actual properties you could type in CSS and the values you see are actual values you could code in CSS. And the changing box at the bottom right is what the element would look like. Try it! Box Model Visualizer In the upcoming lessons we'll dig a little deeper into the four categories of the CSS Box Model: Content Height & Width Margin Border Padding In addition to knowing the Box Model in your head, your browser's developer Tools offer a visualization of each element. Just open your browser's devtools, hover over an element, then click to select the element. In the DevTool Tray you should see the \"Elements\" Tab highlighted at the top-left and to the right you'll see two sub-tabs named \"Styles\" and \"Computed\". The \"Styles\" tab will list all of the CSS rules that are applied to that element including rules that are overridden (denoted by a strike-through). Under the \"Computed\" tab you'll see a box with colors of blue(content), green(padding), yellow(border), orange(margin) along with numbers indicating the value in pixels. Keep this tool handy as you learn the properties of the Box Model and for the rest of your career!!","title":"Box Model Visualizer"},{"location":"module-1/theBoxModel/#additional-resources","text":"See It - The Box Model CSS Tricks: The CSS Box Model Box Model, Sizing, Shadow","title":"Additional Resources"},{"location":"module-1/wireframing-pt1/","text":"UX, UI, & Wireframes \u201cNo product is an island. A product is more than the product. It is a cohesive, integrated set of experiences. Think through all of the stages of a product or service \u2013 from initial intentions through final reflections, from first usage to help, service, and maintenance. Make them all work together seamlessly.\u201d \u2014Don Norman, inventor of the term \u201cUser Experience\u201d Overview UX & UI Design First off, what are they? UI Design stands for User-Interface Design which means the layout of a web page on the screen for which our users will interact with our web app. UX stands for User-Experience Design which incorporates UI along with the flow of the app, the marketing of the app, the data collection and storage, the story that's told to the user from first advertisement through sign-on and day-to-day use. To be frank, it's a very wide and all encompassing craft; which begs the question: why are we talking about it here? Most apps are built with distinct intention so that users adopt them into their daily life, use them with frequency, talk about them to their friends, and generate revenue for the company that built them. Behind these intentions are UX Designers who think about the way users might use the apps, how to improve them, and plan for future features. The decisions of these Designers will filter down through your team lead and onto your desktop to figure out how to implement into code. By learning about UI and UX Design now, you can practice on your own websites and prepare yourself for understanding why certain decisions are made. Don't worry, you don't have to be great at design to understand and do your job as a Front-End Dev. One of the tools used to communicate between designers, product managers, product owners, clients, front-end developers, and graphic designers are Wireframes . To really understand these two trades PLEASE see the video \"Bad Doors = Bad Design\" in the Additional Resources below! Wireframes Just as a blueprint is drafted for the construction of a house or building, wireframes are created to communicate the structure and functionality of a website or app. When a design, or mockup is given to you from your design team it will be your job to translate that mockup into code that is read by browsers of all sorts and shipped across the world. Big stuff, right? Yeah, so we'll use a wireframe to help us, the Front-End Developer, to make a plan for our code before we get into the difficult tasks of seeing the big picture while typing out one. Line. At. A. Time. It's important to understand that for designers, wireframing usually comes before a mockup because they're working out the rough ideas first. But, you can also use wireframing to draw on top of the mockups you get to create a plan for your code. This is what we'll be doing everyday in class from now on so you're really good at it. Constructing a Wireframe Before beginning to wireframe, a designer would decide on the objective of their webpage. What idea are they trying to communicate? What do they want their user to do with it? \"Website wireframes are 90% thinking/planning and just 10% drawing\" - Design and Function The wireframe is a visual guide that gives us a framework, or plan, on which to build our website. We use it to lay our site's elements to best support our specific purpose or goal . Examples of Page Goals include: encourage a button to be clicked, earn your users' confidence, prove your social credibility, persuade your users to download an eBook, motivate your users to complete a payment, reaching potential customers in order to sell a product, and much, much more.... No doubt! Wireframing can save you hours of time. As you saw in the video above, if you are worried about perfect alignment, or other details, when you're working on your basic layout, you're wasting time, and causing yourself needless stress. Break apart your tasks, and do them in the correct order. Planning visually on paper or in a wireframing tool before you think about the coding will save you time in the long run, because you will have a clear idea of what you're working toward, and won't waste work that will have to be redone. Do yourself a favor, and wireframe every project you work on \u2014 every one . Your code may be efficient and elegant, and provide awesome functionality, but none of that will matter if users aren't sure where to click. That is why it's important to spend time focusing on the user interface (UI) and user experience (UX). A UX designer's job is to positively influence perception of products and companies, so as to encourage people to use them more. A couple of examples of excellent UX designs are Spotify.com and Apple.com . Examples of the opposite extreme might be arngren.net and RockAuto.com . Dig deeper into what makes for good (and bad) UX design here . Again, checkout the videos in the Additional Resources to get some tips and tool for creating wireframes. Practice It - Build a Wireframe Using a paper and pencil, sketch out the boxes you see in the picture above; think about the way you might code it in HTML; ask yourself which of the elements that you've learned so far would work best to create these boxes (i.e. <div></div> , <article></article> , etc.). What CSS rules might you need? Go get yourself some graph paper. It will make drawing in this class much easier. Push Yourself Further - Mobile Version Here's a mobile version of the same website. Can you turn it into code, as well? Mockups We've talked about Mockups coming down from a design team and landing on your desk but what are they in the first place? Think of a mock up as a non functional web page. It's a design, a complete layout of a web page but the buttons don't work and the picture & videos are static. It's meant to be a direct representation of what the web page will look like when you, the Front-End Dev, gets done with it. Tools For Creating Wireframes Figma wireframe.cc Adobe XD Adobe Comp For Creating Mockups Marvel inVision proto Additional Resources YT, Vox - Bad Doors = Bad UX YT, Jessie Showalter - UX Crash Course YT, CharlieMarie-TV - How To Wireframe a Website YT, ACA-Clayton - Wireframing and Code Planning Tutorial, Market8 - How to Make Useful Wireframes","title":"Wireframing"},{"location":"module-1/wireframing-pt1/#ux-ui-wireframes","text":"\u201cNo product is an island. A product is more than the product. It is a cohesive, integrated set of experiences. Think through all of the stages of a product or service \u2013 from initial intentions through final reflections, from first usage to help, service, and maintenance. Make them all work together seamlessly.\u201d \u2014Don Norman, inventor of the term \u201cUser Experience\u201d","title":"UX, UI, &amp; Wireframes"},{"location":"module-1/wireframing-pt1/#overview","text":"","title":"Overview"},{"location":"module-1/wireframing-pt1/#ux-ui-design","text":"First off, what are they? UI Design stands for User-Interface Design which means the layout of a web page on the screen for which our users will interact with our web app. UX stands for User-Experience Design which incorporates UI along with the flow of the app, the marketing of the app, the data collection and storage, the story that's told to the user from first advertisement through sign-on and day-to-day use. To be frank, it's a very wide and all encompassing craft; which begs the question: why are we talking about it here? Most apps are built with distinct intention so that users adopt them into their daily life, use them with frequency, talk about them to their friends, and generate revenue for the company that built them. Behind these intentions are UX Designers who think about the way users might use the apps, how to improve them, and plan for future features. The decisions of these Designers will filter down through your team lead and onto your desktop to figure out how to implement into code. By learning about UI and UX Design now, you can practice on your own websites and prepare yourself for understanding why certain decisions are made. Don't worry, you don't have to be great at design to understand and do your job as a Front-End Dev. One of the tools used to communicate between designers, product managers, product owners, clients, front-end developers, and graphic designers are Wireframes . To really understand these two trades PLEASE see the video \"Bad Doors = Bad Design\" in the Additional Resources below!","title":"UX &amp; UI Design"},{"location":"module-1/wireframing-pt1/#wireframes","text":"Just as a blueprint is drafted for the construction of a house or building, wireframes are created to communicate the structure and functionality of a website or app. When a design, or mockup is given to you from your design team it will be your job to translate that mockup into code that is read by browsers of all sorts and shipped across the world. Big stuff, right? Yeah, so we'll use a wireframe to help us, the Front-End Developer, to make a plan for our code before we get into the difficult tasks of seeing the big picture while typing out one. Line. At. A. Time. It's important to understand that for designers, wireframing usually comes before a mockup because they're working out the rough ideas first. But, you can also use wireframing to draw on top of the mockups you get to create a plan for your code. This is what we'll be doing everyday in class from now on so you're really good at it.","title":"Wireframes"},{"location":"module-1/wireframing-pt1/#constructing-a-wireframe","text":"Before beginning to wireframe, a designer would decide on the objective of their webpage. What idea are they trying to communicate? What do they want their user to do with it? \"Website wireframes are 90% thinking/planning and just 10% drawing\" - Design and Function The wireframe is a visual guide that gives us a framework, or plan, on which to build our website. We use it to lay our site's elements to best support our specific purpose or goal . Examples of Page Goals include: encourage a button to be clicked, earn your users' confidence, prove your social credibility, persuade your users to download an eBook, motivate your users to complete a payment, reaching potential customers in order to sell a product, and much, much more.... No doubt! Wireframing can save you hours of time. As you saw in the video above, if you are worried about perfect alignment, or other details, when you're working on your basic layout, you're wasting time, and causing yourself needless stress. Break apart your tasks, and do them in the correct order. Planning visually on paper or in a wireframing tool before you think about the coding will save you time in the long run, because you will have a clear idea of what you're working toward, and won't waste work that will have to be redone. Do yourself a favor, and wireframe every project you work on \u2014 every one . Your code may be efficient and elegant, and provide awesome functionality, but none of that will matter if users aren't sure where to click. That is why it's important to spend time focusing on the user interface (UI) and user experience (UX). A UX designer's job is to positively influence perception of products and companies, so as to encourage people to use them more. A couple of examples of excellent UX designs are Spotify.com and Apple.com . Examples of the opposite extreme might be arngren.net and RockAuto.com . Dig deeper into what makes for good (and bad) UX design here . Again, checkout the videos in the Additional Resources to get some tips and tool for creating wireframes.","title":"Constructing a Wireframe"},{"location":"module-1/wireframing-pt1/#practice-it-build-a-wireframe","text":"Using a paper and pencil, sketch out the boxes you see in the picture above; think about the way you might code it in HTML; ask yourself which of the elements that you've learned so far would work best to create these boxes (i.e. <div></div> , <article></article> , etc.). What CSS rules might you need? Go get yourself some graph paper. It will make drawing in this class much easier.","title":"Practice It - Build a Wireframe"},{"location":"module-1/wireframing-pt1/#push-yourself-further-mobile-version","text":"Here's a mobile version of the same website. Can you turn it into code, as well?","title":"Push Yourself Further - Mobile Version"},{"location":"module-1/wireframing-pt1/#mockups","text":"We've talked about Mockups coming down from a design team and landing on your desk but what are they in the first place? Think of a mock up as a non functional web page. It's a design, a complete layout of a web page but the buttons don't work and the picture & videos are static. It's meant to be a direct representation of what the web page will look like when you, the Front-End Dev, gets done with it.","title":"Mockups"},{"location":"module-1/wireframing-pt1/#tools","text":"","title":"Tools"},{"location":"module-1/wireframing-pt1/#for-creating-wireframes","text":"Figma wireframe.cc Adobe XD Adobe Comp","title":"For Creating Wireframes"},{"location":"module-1/wireframing-pt1/#for-creating-mockups","text":"Marvel inVision proto","title":"For Creating Mockups"},{"location":"module-1/wireframing-pt1/#additional-resources","text":"YT, Vox - Bad Doors = Bad UX YT, Jessie Showalter - UX Crash Course YT, CharlieMarie-TV - How To Wireframe a Website YT, ACA-Clayton - Wireframing and Code Planning Tutorial, Market8 - How to Make Useful Wireframes","title":"Additional Resources"},{"location":"module-2/HTTP-req-res/","text":"Pre-Class Lesson 2: HTTP Req/Res + HTML Elements as our Building Blocks/Objects A few days ago we learned about Objects, Object Modeling and Code as Communication let's now look at how computers communicate through HTTP(s) and why & how that informs the way our web pages are built the way they are. For this lesson, let's back away from the code and take a slower and higher approach to understanding how our web pages are built and delivered. Request and Response Objects: The High Overview Again everything to a computer is an object . And we can visualize those objects with Object Modeling. With this in mind, let's now envision your web browser (Chrome, Safari, etc...) navigating to a URL. This act of navigation is actually a request for information or resources that are sitting at unique addresses in the internet, just like a street address for a house or building. All devices and files on the internet have a unique address we call a URL, Unique Resource Locator . So when you \"Live Serve\" your web pages you use a program to create a mini-internet on your computer and serve that web page at a URL called localhost:5500 as in, your computer is the localhost and the exact address/port it's using is 5500 . This is the exact same process when you navigate to a website on the the real internet. Large computers are holding files at specific addresses(URLs) in the internet and giving them to browsers when they request those files/resources. And this is where we'll begin to explore requests and response objects as they relate to the way our web pages are built. The Head and Body While we won't get into the deep details of these two object in this course we will need to understand the basic gist of these objects to make better sense of our files and why they're arranged the way they are. You'll need paper and pen to continue this section. Here's the gist: When a computer makes a request or a response it sends them both in the exact same shape: an object with a head and a body. Title this drawing: \"Req/Res\" Go ahead and draw a computer on the middle-left-side of your page (that's your computer) Now draw another computer on the middle-right-side of your page (that's a server/the \"Cloud\") Now draw an arrow from your computer to the server labeled \"request\" Below that arrow draw a box, then draw a line cutting that box in half horizontally. Label the top half of the box \"Head\" And the bottom half of the box is \"Body\" You can now draw an arrow from the server computer to your computer and label that \"response\" Draw another box, cut it in half, label them \"Head\" and \"Body\" The drawing you should have is the premise of how the internet works and the basis for everything we will learn in the next few months. All data exchanges are just requests and response objects with two other objects inside of them called Head and Body . In the Head object there is what we call metadata . Or just simply, bits of information that tell the receiving computer something about the contents of the Body of the request or response object. And the Body object is the actual content of the request or the response . When you navigate to a page your browser sends a request object that has a property called method and its value is get as in, get whatever resources are at this address while the body is empty because there's nothing for your browser to send. When the computer in the \"Cloud\" receives your request it will put together a response object. In this response object, there will be some metadata in the Head like title , charset , and styles . This is information the browser needs to properly render the content in the Body. Take a look at the page you built a few days ago. Notice any similarities? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <!-- index.html --> <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < link rel = \"stylesheet\" href = \"./style.css\" > < title > My Portfolio </ title > </ head > < body > </ body > </ html > In the code above we see a head object and a body object. These two objects/elements represent in the HTML language/code the same Head and Body objects of our Response object and they serve the same purpose, the Head describes needed information about the content in the Body. But for now, we're going to have to set aside our short exploration of Request and Response objects in HTTP(S) protocol because we don't need to know their details to build web pages and websites. All we really need to know is that this code represents the response object. Plus, we'll be learning and using the finer details of requests and responses in our 311 course: Servers and Databases. What we'll do with this information now, though is to assume when we navigate to a URL the Response object we get back is the code you see above, from <!DOCTYPE html> to </html> . In this course, 101: Intro to the Web, we're building the contents of the Body Object of the Response Object so that when other people's browsers navigate to our URL they will get the web page we built. Look back at your Req/Res drawing to know where you are and let's get into some code. W3S Docs - HTTP, Request/Response Know Your Docs W3S Docs - HTTP, Request/Response","title":"HTTProtocol"},{"location":"module-2/HTTP-req-res/#pre-class-lesson-2-http-reqres-html-elements-as-our-building-blocksobjects","text":"A few days ago we learned about Objects, Object Modeling and Code as Communication let's now look at how computers communicate through HTTP(s) and why & how that informs the way our web pages are built the way they are. For this lesson, let's back away from the code and take a slower and higher approach to understanding how our web pages are built and delivered.","title":"Pre-Class Lesson 2: HTTP Req/Res + HTML Elements as our Building Blocks/Objects"},{"location":"module-2/HTTP-req-res/#request-and-response-objects-the-high-overview","text":"Again everything to a computer is an object . And we can visualize those objects with Object Modeling. With this in mind, let's now envision your web browser (Chrome, Safari, etc...) navigating to a URL. This act of navigation is actually a request for information or resources that are sitting at unique addresses in the internet, just like a street address for a house or building. All devices and files on the internet have a unique address we call a URL, Unique Resource Locator . So when you \"Live Serve\" your web pages you use a program to create a mini-internet on your computer and serve that web page at a URL called localhost:5500 as in, your computer is the localhost and the exact address/port it's using is 5500 . This is the exact same process when you navigate to a website on the the real internet. Large computers are holding files at specific addresses(URLs) in the internet and giving them to browsers when they request those files/resources. And this is where we'll begin to explore requests and response objects as they relate to the way our web pages are built.","title":"Request and Response Objects: The High Overview"},{"location":"module-2/HTTP-req-res/#the-head-and-body","text":"While we won't get into the deep details of these two object in this course we will need to understand the basic gist of these objects to make better sense of our files and why they're arranged the way they are. You'll need paper and pen to continue this section. Here's the gist: When a computer makes a request or a response it sends them both in the exact same shape: an object with a head and a body. Title this drawing: \"Req/Res\" Go ahead and draw a computer on the middle-left-side of your page (that's your computer) Now draw another computer on the middle-right-side of your page (that's a server/the \"Cloud\") Now draw an arrow from your computer to the server labeled \"request\" Below that arrow draw a box, then draw a line cutting that box in half horizontally. Label the top half of the box \"Head\" And the bottom half of the box is \"Body\" You can now draw an arrow from the server computer to your computer and label that \"response\" Draw another box, cut it in half, label them \"Head\" and \"Body\" The drawing you should have is the premise of how the internet works and the basis for everything we will learn in the next few months. All data exchanges are just requests and response objects with two other objects inside of them called Head and Body . In the Head object there is what we call metadata . Or just simply, bits of information that tell the receiving computer something about the contents of the Body of the request or response object. And the Body object is the actual content of the request or the response . When you navigate to a page your browser sends a request object that has a property called method and its value is get as in, get whatever resources are at this address while the body is empty because there's nothing for your browser to send. When the computer in the \"Cloud\" receives your request it will put together a response object. In this response object, there will be some metadata in the Head like title , charset , and styles . This is information the browser needs to properly render the content in the Body. Take a look at the page you built a few days ago. Notice any similarities? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <!-- index.html --> <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < link rel = \"stylesheet\" href = \"./style.css\" > < title > My Portfolio </ title > </ head > < body > </ body > </ html > In the code above we see a head object and a body object. These two objects/elements represent in the HTML language/code the same Head and Body objects of our Response object and they serve the same purpose, the Head describes needed information about the content in the Body. But for now, we're going to have to set aside our short exploration of Request and Response objects in HTTP(S) protocol because we don't need to know their details to build web pages and websites. All we really need to know is that this code represents the response object. Plus, we'll be learning and using the finer details of requests and responses in our 311 course: Servers and Databases. What we'll do with this information now, though is to assume when we navigate to a URL the Response object we get back is the code you see above, from <!DOCTYPE html> to </html> . In this course, 101: Intro to the Web, we're building the contents of the Body Object of the Response Object so that when other people's browsers navigate to our URL they will get the web page we built. Look back at your Req/Res drawing to know where you are and let's get into some code. W3S Docs - HTTP, Request/Response","title":"The Head and Body"},{"location":"module-2/HTTP-req-res/#know-your-docs","text":"W3S Docs - HTTP, Request/Response","title":"Know Your Docs"},{"location":"module-2/buttonElement/","text":"The Button Element \u201cHold fast to dreams, For if dreams die Life is a broken-winged bird, That cannot fly.\u201d \u2015Langston Hughes Overview As you learned in the Form Elements lesson earlier, input elements can be changed to accept all sorts of data including buttons by changing the value of their type= attribute. Here we'll cover the actual <button> element because the real reason to use it over a <input type=\"button\"> element is for styling. If you're wanting to but content or images inside of a button then you'll have to use the <button></button> element. Plain and simple, that's it! However, if you want to use a <button> element on a form you have to set its type= attribute to \"submit\": type=\"submit\" and poof , you have a submission button. But learning about this new element brings us closer to a topic we've only briefly covered so far, Event Listeners. Follow Along We're about to learn how to use Event Listeners in the next lesson. To get familiar with what they are and how to use them, we'll use the familiar Button Element as a leaping off point. Go ahead and open the 101-onlineClothingStore folder you started earlier and add this bit of code to the index.html file. 1 2 3 4 <!-- 101-onlineClothingStore/index.html --> < body > < button ></ button > </ body > Turn on your Live Server and see what's on the screen. Is there a tiny grey button at the top-left of your white screen? Good, that's how it should look. Your browser comes with \" Default Visual Styles \" of content created in HTML. So all elements will come with some sort of, albeit, ugly styling. Button styling is defaulted to grey and is as wide and tall as the content inside them, the innerText . innerText is a property on ALL HTML elements. It holds the value of the text inside. When we learn how to build with <p> , <a> , and all the <h*> elements, we'll see they all have a property on them called innerText. Write that down and draw it for yourself. This is part of your Object Modeling in your own mind. Let's now add some \"innerText\" to this button. Between the opening tag and the closing tag type \"Click Me\". 1 2 3 4 <!-- 101-onlineClothingStore/index.html --> < body > < button > Click Me </ button > </ body > When we learn a little more JavaScript we'll be able to change this innerText property dynamically by writing some JS code like button.innerText = \"Oh, Click Me Again!\" For now, we'll statically set it in HTML by putting the text between the opening and closing tags. Now that we have the first property of ALL HTML elements including the button element let's play with one of its events! Again, all elements have Properties, Methods, and Events we get to use to build with. By reading the documentation of these members we learn more about them and how to use them. W3S Docs - Button Element The \"onclick\" Event + Inline JavaScript Most HTML elements have the onclick event as one of their members but Button depends on this event because what else do you do with a button besides click it? As mentioned before, Events are like triggers that fire each time the interactions happens. But until we add a function to that trigger the Event is firing a blank. Even though we don't see code that represents it, our button object currently has an undefined function attached to its onclick event. We don't typically write undefined events, but if we did write it in code it would look like this: 1 2 3 4 <!-- 101-onlineClothingStore/index.html --> < body > < button onclick = \"\" > Click Me </ button > </ body > Notice the empty quotes ? Inside those quotes, after the = sign is the value of this event. This is a key/value pair. the key is onclick and the value is \"\" . Let's write a value for this button's onclick key. Type this in and run it to see what happens in the browser. 1 2 3 4 <!-- 101-onlineClothingStore/index.html --> < body > < button onclick = \"function sayHello(){ alert('Hello!') }; sayHello();\" > Click Me </ button > </ body > The line of code we just added between the \"\" marks is actually JavaScript but it's written inline with the HTML code. This isn't a common practice anymore but it's the way developers wrote it back in the day and a good way for us to begin to learn what's going on. Take a close look at this new code and spend time trying to understand it. The best place to start is dividing it in half at the ; . NOTE: Traditionally, lines of JavaScript are ended with ; (semi-colons) although the latest versions of the language don't require it. Nevertheless, we'll use them in our first lessons as we get acquainted with the language. Before the first semi-colon we see function sayHello(){ alert('Hello!') } . With the keyword , function we are declaring a function named \"sayHello()\" and defining what it's supposed to do when called, which is: { alert('Hello')} . This segment of code is called a Declaration Block , it's where we declare to the computer the instructions we want for it to run when the function is run/executed/called/invoked. We can put any set of instructions we want between the { } but this one's pretty simple, it calls another function named alert . NOTE: These words: run, execute, call, invoke all mean the same thing: \"To perform the instructions of a particular function.\" You can interchange them as much as you like but this digital book will try to use the words \"called\" and \"invoke\". alert() is a function that opens a drop-down window that \"alerts\" you of something. It's typically used to forewarn the user they are about to submit a form or override a security measure, etc. Actually , the alert is a Method of the Window object which means we could have written the code like, { window.alert('Hello')} as well. We don't have to do this because \"alert\" isn't a method on the Button object, the Body object, or the Document object, only on the Window object so when we call it, the browser will keep going up the levels of objects until it finds the first \"alert\" method it comes to. We'll learn more about these Window Object Methods , known also as Global Methods , as we build more and more. The last two parts of this code are: 'Hello!' and sayHello(); . The first of these is easy. It's an argument . Arguments are values we, as developers, get to decide to pass into functions and the functions return different things based on what we pass into them. Try it. Change the 'Hello!' argument to something like: 'Hello, Clayton!' . Did you see the change? What about that last part? sayHello(); . This is what's called a Function Invocation . It invokes/runs the function. The way it works is by naming the function we want to invoke/call. In this case, it's sayHello then we add those trailing parenthesis afterward () to communicate to the computer we want it to run the instructions inside the Declaration Block of the function we just named. See how this is written the same as alert() ? ... sayHello() ... alert() ...? Name the function and then invoke the function/ New Word Clarification We just covered a lot of new terms so let's take a moment to revisit some of those tricksters. Function Declaration - This is where a function is declared and defined. Until it's called/invoked, it isn't doing anything except taking up memory like a recipe in your cookbook. 1 2 3 4 function myFunctionExample ( a , b ) { let sum = a + b return sum } The Declaration Block is the part between the {} where the step-by-step instruction goes. Function Invocation - This the code that calls/invokes the Function Declaration. It tells the computer to execute the instructions in the Declaration Block. 1 myFunctionExample ( 2 , 3 ) Function Arguments - These are values you can pass into functions. In the example above 2 and 3 are two arguments passed into the myFunctionExample function. Based on the instructions in the Function Declaration and the arguments passed into it, the result would be 5. Attribute/Property/Method - If you visited the Button Element Docs page your probably saw the use the word Attributes instead of Property , Event or Method . This is because HTML was created to represent visual Elements on a screen so all of the properties and their values were originally written together, in line with the elements like the line of JavaScript we just broke down. The word Attribute means the same thing as Property , Event or Method but specifically refers to something written in HTML rather than in CSS or JavaScript. Anything you see written inside the opening tag of an element is an Attribute but it refers to the Properties , Events , and Methods of that object. Example: 1 < h3 id = \"fish-fry\" > Example Title </ h3 > The H3 Element above has an id attribute. This attribute assigns the value of \"fish-fry\" the the id property of that object. NOTE: If this all doesn't gel right now, don't worry. With practice and in time it'll all come together. A Better Way to Write JavaScript The line of JavaScript we just broke down was a little hard to read because it was all on one line. Thankfully there's a better way to write it, with the <script> Element! The Document Object has a scripts property to hold scripts. When we create a Script Element we are giving the scripts property a value. And just like with our Human object, if we want them to be able to do new things we need to give them new functions like: rideBicycle() or cutWatermelon() . With the <script> element we can give our Document Object new values inside of its scripts property. Let's move our current inline JavaScript into our <script> element. 1 2 3 4 5 6 7 8 9 <!-- 101-onlineClothingStore/index.html --> < body > < button onclick = \"sayHello();\" > Click Me </ button > < script > function sayHello (){ alert ( 'Hello!' ) }; </ script > </ body > Make these changes and run your page again. It should be working just as before. Now let's create another button and have it also call sayHello when its onclick event is ...clicked. 1 2 3 4 5 6 7 8 9 10 <!-- 101-onlineClothingStore/index.html --> < body > < button onclick = \"sayHello();\" > Click Me </ button > < button onclick = \"sayHello();\" > Click Me Too </ button > < script > function sayHello (){ alert ( 'Hello!' ) }; </ script > </ body > Now build another function called sayHi but this time call the Console object's method named log() and pass into it a different string . 1 2 3 4 5 6 7 8 9 10 11 <!-- 101-onlineClothingStore/index.html --> < body > < button onclick = \"sayHello();\" > Click Me </ button > < button onclick = \"sayHi();\" > Click Me Too </ button > < script > function sayHello (){ alert ( 'Hello, Window.alert Method!' ) }; function sayHi (){ console . log ( 'Hi, Console.log Method!' ) }; </ script > </ body > NOTE: In order to see this you'll have to open your DevTools and go to the Console Tab. Click on both buttons and see what happens. Summary In the next lesson we'll learn how to tie Input Elements and Button Elements together but at this point you know know how Event Listeners work, even if you've only used one: onclick= . Essentially, you figure out what action you'd like the user to do then attach it to a invocation to call a function you wanted executed when that action is done! Let's look at the Input Element and then move to see a more Event Listeners.","title":"Button Element"},{"location":"module-2/buttonElement/#the-button-element","text":"\u201cHold fast to dreams, For if dreams die Life is a broken-winged bird, That cannot fly.\u201d \u2015Langston Hughes","title":"The Button Element"},{"location":"module-2/buttonElement/#overview","text":"As you learned in the Form Elements lesson earlier, input elements can be changed to accept all sorts of data including buttons by changing the value of their type= attribute. Here we'll cover the actual <button> element because the real reason to use it over a <input type=\"button\"> element is for styling. If you're wanting to but content or images inside of a button then you'll have to use the <button></button> element. Plain and simple, that's it! However, if you want to use a <button> element on a form you have to set its type= attribute to \"submit\": type=\"submit\" and poof , you have a submission button. But learning about this new element brings us closer to a topic we've only briefly covered so far, Event Listeners.","title":"Overview"},{"location":"module-2/buttonElement/#follow-along","text":"We're about to learn how to use Event Listeners in the next lesson. To get familiar with what they are and how to use them, we'll use the familiar Button Element as a leaping off point. Go ahead and open the 101-onlineClothingStore folder you started earlier and add this bit of code to the index.html file. 1 2 3 4 <!-- 101-onlineClothingStore/index.html --> < body > < button ></ button > </ body > Turn on your Live Server and see what's on the screen. Is there a tiny grey button at the top-left of your white screen? Good, that's how it should look. Your browser comes with \" Default Visual Styles \" of content created in HTML. So all elements will come with some sort of, albeit, ugly styling. Button styling is defaulted to grey and is as wide and tall as the content inside them, the innerText . innerText is a property on ALL HTML elements. It holds the value of the text inside. When we learn how to build with <p> , <a> , and all the <h*> elements, we'll see they all have a property on them called innerText. Write that down and draw it for yourself. This is part of your Object Modeling in your own mind. Let's now add some \"innerText\" to this button. Between the opening tag and the closing tag type \"Click Me\". 1 2 3 4 <!-- 101-onlineClothingStore/index.html --> < body > < button > Click Me </ button > </ body > When we learn a little more JavaScript we'll be able to change this innerText property dynamically by writing some JS code like button.innerText = \"Oh, Click Me Again!\" For now, we'll statically set it in HTML by putting the text between the opening and closing tags. Now that we have the first property of ALL HTML elements including the button element let's play with one of its events! Again, all elements have Properties, Methods, and Events we get to use to build with. By reading the documentation of these members we learn more about them and how to use them. W3S Docs - Button Element","title":"Follow Along"},{"location":"module-2/buttonElement/#the-onclick-event-inline-javascript","text":"Most HTML elements have the onclick event as one of their members but Button depends on this event because what else do you do with a button besides click it? As mentioned before, Events are like triggers that fire each time the interactions happens. But until we add a function to that trigger the Event is firing a blank. Even though we don't see code that represents it, our button object currently has an undefined function attached to its onclick event. We don't typically write undefined events, but if we did write it in code it would look like this: 1 2 3 4 <!-- 101-onlineClothingStore/index.html --> < body > < button onclick = \"\" > Click Me </ button > </ body > Notice the empty quotes ? Inside those quotes, after the = sign is the value of this event. This is a key/value pair. the key is onclick and the value is \"\" . Let's write a value for this button's onclick key. Type this in and run it to see what happens in the browser. 1 2 3 4 <!-- 101-onlineClothingStore/index.html --> < body > < button onclick = \"function sayHello(){ alert('Hello!') }; sayHello();\" > Click Me </ button > </ body > The line of code we just added between the \"\" marks is actually JavaScript but it's written inline with the HTML code. This isn't a common practice anymore but it's the way developers wrote it back in the day and a good way for us to begin to learn what's going on. Take a close look at this new code and spend time trying to understand it. The best place to start is dividing it in half at the ; . NOTE: Traditionally, lines of JavaScript are ended with ; (semi-colons) although the latest versions of the language don't require it. Nevertheless, we'll use them in our first lessons as we get acquainted with the language. Before the first semi-colon we see function sayHello(){ alert('Hello!') } . With the keyword , function we are declaring a function named \"sayHello()\" and defining what it's supposed to do when called, which is: { alert('Hello')} . This segment of code is called a Declaration Block , it's where we declare to the computer the instructions we want for it to run when the function is run/executed/called/invoked. We can put any set of instructions we want between the { } but this one's pretty simple, it calls another function named alert . NOTE: These words: run, execute, call, invoke all mean the same thing: \"To perform the instructions of a particular function.\" You can interchange them as much as you like but this digital book will try to use the words \"called\" and \"invoke\". alert() is a function that opens a drop-down window that \"alerts\" you of something. It's typically used to forewarn the user they are about to submit a form or override a security measure, etc. Actually , the alert is a Method of the Window object which means we could have written the code like, { window.alert('Hello')} as well. We don't have to do this because \"alert\" isn't a method on the Button object, the Body object, or the Document object, only on the Window object so when we call it, the browser will keep going up the levels of objects until it finds the first \"alert\" method it comes to. We'll learn more about these Window Object Methods , known also as Global Methods , as we build more and more. The last two parts of this code are: 'Hello!' and sayHello(); . The first of these is easy. It's an argument . Arguments are values we, as developers, get to decide to pass into functions and the functions return different things based on what we pass into them. Try it. Change the 'Hello!' argument to something like: 'Hello, Clayton!' . Did you see the change? What about that last part? sayHello(); . This is what's called a Function Invocation . It invokes/runs the function. The way it works is by naming the function we want to invoke/call. In this case, it's sayHello then we add those trailing parenthesis afterward () to communicate to the computer we want it to run the instructions inside the Declaration Block of the function we just named. See how this is written the same as alert() ? ... sayHello() ... alert() ...? Name the function and then invoke the function/","title":"The \"onclick\" Event + Inline JavaScript"},{"location":"module-2/buttonElement/#new-word-clarification","text":"We just covered a lot of new terms so let's take a moment to revisit some of those tricksters. Function Declaration - This is where a function is declared and defined. Until it's called/invoked, it isn't doing anything except taking up memory like a recipe in your cookbook. 1 2 3 4 function myFunctionExample ( a , b ) { let sum = a + b return sum } The Declaration Block is the part between the {} where the step-by-step instruction goes. Function Invocation - This the code that calls/invokes the Function Declaration. It tells the computer to execute the instructions in the Declaration Block. 1 myFunctionExample ( 2 , 3 ) Function Arguments - These are values you can pass into functions. In the example above 2 and 3 are two arguments passed into the myFunctionExample function. Based on the instructions in the Function Declaration and the arguments passed into it, the result would be 5. Attribute/Property/Method - If you visited the Button Element Docs page your probably saw the use the word Attributes instead of Property , Event or Method . This is because HTML was created to represent visual Elements on a screen so all of the properties and their values were originally written together, in line with the elements like the line of JavaScript we just broke down. The word Attribute means the same thing as Property , Event or Method but specifically refers to something written in HTML rather than in CSS or JavaScript. Anything you see written inside the opening tag of an element is an Attribute but it refers to the Properties , Events , and Methods of that object. Example: 1 < h3 id = \"fish-fry\" > Example Title </ h3 > The H3 Element above has an id attribute. This attribute assigns the value of \"fish-fry\" the the id property of that object. NOTE: If this all doesn't gel right now, don't worry. With practice and in time it'll all come together.","title":"New Word Clarification"},{"location":"module-2/buttonElement/#a-better-way-to-write-javascript","text":"The line of JavaScript we just broke down was a little hard to read because it was all on one line. Thankfully there's a better way to write it, with the <script> Element! The Document Object has a scripts property to hold scripts. When we create a Script Element we are giving the scripts property a value. And just like with our Human object, if we want them to be able to do new things we need to give them new functions like: rideBicycle() or cutWatermelon() . With the <script> element we can give our Document Object new values inside of its scripts property. Let's move our current inline JavaScript into our <script> element. 1 2 3 4 5 6 7 8 9 <!-- 101-onlineClothingStore/index.html --> < body > < button onclick = \"sayHello();\" > Click Me </ button > < script > function sayHello (){ alert ( 'Hello!' ) }; </ script > </ body > Make these changes and run your page again. It should be working just as before. Now let's create another button and have it also call sayHello when its onclick event is ...clicked. 1 2 3 4 5 6 7 8 9 10 <!-- 101-onlineClothingStore/index.html --> < body > < button onclick = \"sayHello();\" > Click Me </ button > < button onclick = \"sayHello();\" > Click Me Too </ button > < script > function sayHello (){ alert ( 'Hello!' ) }; </ script > </ body > Now build another function called sayHi but this time call the Console object's method named log() and pass into it a different string . 1 2 3 4 5 6 7 8 9 10 11 <!-- 101-onlineClothingStore/index.html --> < body > < button onclick = \"sayHello();\" > Click Me </ button > < button onclick = \"sayHi();\" > Click Me Too </ button > < script > function sayHello (){ alert ( 'Hello, Window.alert Method!' ) }; function sayHi (){ console . log ( 'Hi, Console.log Method!' ) }; </ script > </ body > NOTE: In order to see this you'll have to open your DevTools and go to the Console Tab. Click on both buttons and see what happens.","title":"A Better Way to Write JavaScript"},{"location":"module-2/buttonElement/#summary","text":"In the next lesson we'll learn how to tie Input Elements and Button Elements together but at this point you know know how Event Listeners work, even if you've only used one: onclick= . Essentially, you figure out what action you'd like the user to do then attach it to a invocation to call a function you wanted executed when that action is done! Let's look at the Input Element and then move to see a more Event Listeners.","title":"Summary"},{"location":"module-2/class-5/","text":"Class 5: TicTacToe + About.html \"Today will never happen again. Don't waste it with a false start or no start at all.\" \u2014Og Mandino Greet, Outline, and Objectify Today we're going to: OBJECTIVE: After this class students will have a firm understanding of: Build with HTML Table Elements How to access & use Element Properties like innerHTML Use Event Listener Methods like getElementById Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Student Time Part 1 - Tic Tac Toe Board - 65 mins Student Time Part 2 - About Page - 60 mins Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Part One: Tic Tac Toe Fork and clone the TicTacToe-101 Repo into your devFolder or wherever you've been building your projects: git clone https://github.com/AustinCodingAcademy/TicTacToe-101.git Go to the README.md file to find the rest of your instructions. Follow up video Part Two: About.html Your Portfolio Website has been up for a couple weeks now but doesn't have an About Me Page to help people know more about you. Let's change that. Draw up a wireframe of an about page you think will represent you well. Don't let great be the enemy of good . MEANING: Don't spend to much time on the design or content but instead decide quickly and start coding. You're in a coding school not a design school. It can be a simple page! Your design must be for mobile, tablet, and laptop! You can use other websites as inspiration: About 8-hour Day About Kero1 About Nike Now go find your Portfolio Folder from Day 1 of this course, open it up and create a new .html file called \"aboutPage\" then create a .css file called \"about-styles\" to build this page in. Use all of the tools you've learned about so far and take this About Page to the next level. Remember to link the new page to your Portfolio's landing page. Remember your design must be designed for mobile, tablet, and laptop! git status add status commit push your work up to its repo. Then go to the URL that the website is hosted at and navigate to the \"aboutPage\" and copy/paste that URL to turn it in. Exit Recap, Attendance, and Reminders, 5 mins Create TicTacToe Assignment for a pull request link. Prepare for next class by completing all of your pre-class lessons Bring pencil and paper to class for wireframing! Complete the feedback survey(if applicable) Next class we'll work more with DOM Event Listeners and Properties to build a calculator. Spend extra time reviewing what you've learned the past few days and what's between now and next class.","title":"Class 5 TicTacToe + About"},{"location":"module-2/class-5/#class-5-tictactoe-abouthtml","text":"\"Today will never happen again. Don't waste it with a false start or no start at all.\" \u2014Og Mandino","title":"Class 5: TicTacToe + About.html"},{"location":"module-2/class-5/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: After this class students will have a firm understanding of: Build with HTML Table Elements How to access & use Element Properties like innerHTML Use Event Listener Methods like getElementById Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Student Time Part 1 - Tic Tac Toe Board - 65 mins Student Time Part 2 - About Page - 60 mins Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-5/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-2/class-5/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-5/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-5/#creation-time-60-90-mins","text":"","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-5/#part-one-tic-tac-toe","text":"Fork and clone the TicTacToe-101 Repo into your devFolder or wherever you've been building your projects: git clone https://github.com/AustinCodingAcademy/TicTacToe-101.git Go to the README.md file to find the rest of your instructions. Follow up video","title":"Part One: Tic Tac Toe"},{"location":"module-2/class-5/#part-two-abouthtml","text":"Your Portfolio Website has been up for a couple weeks now but doesn't have an About Me Page to help people know more about you. Let's change that. Draw up a wireframe of an about page you think will represent you well. Don't let great be the enemy of good . MEANING: Don't spend to much time on the design or content but instead decide quickly and start coding. You're in a coding school not a design school. It can be a simple page! Your design must be for mobile, tablet, and laptop! You can use other websites as inspiration: About 8-hour Day About Kero1 About Nike Now go find your Portfolio Folder from Day 1 of this course, open it up and create a new .html file called \"aboutPage\" then create a .css file called \"about-styles\" to build this page in. Use all of the tools you've learned about so far and take this About Page to the next level. Remember to link the new page to your Portfolio's landing page. Remember your design must be designed for mobile, tablet, and laptop! git status add status commit push your work up to its repo. Then go to the URL that the website is hosted at and navigate to the \"aboutPage\" and copy/paste that URL to turn it in.","title":"Part Two: About.html"},{"location":"module-2/class-5/#exit-recap-attendance-and-reminders-5-mins","text":"Create TicTacToe Assignment for a pull request link. Prepare for next class by completing all of your pre-class lessons Bring pencil and paper to class for wireframing! Complete the feedback survey(if applicable) Next class we'll work more with DOM Event Listeners and Properties to build a calculator. Spend extra time reviewing what you've learned the past few days and what's between now and next class.","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/class-6/","text":"Class 6: Forms - Calculator and About Page Rise to the occasion. Greet, Outline, and Objectify Today we're going to: OBJECTIVE: After this class students will have a firm understanding of: How to access & use Element Properties like innerHTML Use Event Listener Methods like getElementById Use the fundamental pieces of JavaScript: variables and functions Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time - Contact Page - 60 mins Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, Contact Page Group Students in pairs plan and implements Partner with other groups for elaboration Share with the class for evaluation (potentially carry into the next class) Just like the About Page you built for your Portfolio Website last class, tonight you're going to build a Contact Me Page that is responsive to mobile, tablet, & laptop that includes the following: <input> for Email that is required and validates for an actual email address <textarea> that has a placeholder \"comments\" and limits the user to 500 characters and minimum of 20. A section of checkboxes that asks the user: \"How did you hear about me?\" Classmate Resume Submission LinkedIn Coding Academy Rec A section of radio buttons that asks if the user wants to be contacted back: Yes or No Offer to give an optional Birthday Wish by submitting their birth date through a date input. Remember your design must be designed for mobile, tablet, and laptop! Remember to have a submit button and create a result.html to capture the values for now until we get to building servers that can receive and hold the data. After you've completed the contact page turn in the live link to in your Zollege Textbook. HINT: You could use this repo to get started faster! Push Yourself Further For your checkpoint, you'll be building a small business's website Look ahead and start wireframing what that will look like. Look ahead and see if you can get a jump on git branching. Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Contact Page Assignment Create Class 6 Blog Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) Bring pencil and paper to class for wireframing! In the next few lessons we'll slow down a bit but keep deepening our understand of building in HTML, CSS, JS, and HTTP. The pass will be a little different but it all leads to the same place, you as an excellent developer!!","title":"Class 6 Contact Page"},{"location":"module-2/class-6/#class-6-forms-calculator-and-about-page","text":"Rise to the occasion.","title":"Class 6: Forms - Calculator and About Page"},{"location":"module-2/class-6/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: After this class students will have a firm understanding of: How to access & use Element Properties like innerHTML Use Event Listener Methods like getElementById Use the fundamental pieces of JavaScript: variables and functions Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time - Contact Page - 60 mins Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-6/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-2/class-6/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-6/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-6/#creation-time-contact-page","text":"Group Students in pairs plan and implements Partner with other groups for elaboration Share with the class for evaluation (potentially carry into the next class) Just like the About Page you built for your Portfolio Website last class, tonight you're going to build a Contact Me Page that is responsive to mobile, tablet, & laptop that includes the following: <input> for Email that is required and validates for an actual email address <textarea> that has a placeholder \"comments\" and limits the user to 500 characters and minimum of 20. A section of checkboxes that asks the user: \"How did you hear about me?\" Classmate Resume Submission LinkedIn Coding Academy Rec A section of radio buttons that asks if the user wants to be contacted back: Yes or No Offer to give an optional Birthday Wish by submitting their birth date through a date input. Remember your design must be designed for mobile, tablet, and laptop! Remember to have a submit button and create a result.html to capture the values for now until we get to building servers that can receive and hold the data. After you've completed the contact page turn in the live link to in your Zollege Textbook. HINT: You could use this repo to get started faster!","title":"Creation Time, Contact Page"},{"location":"module-2/class-6/#push-yourself-further","text":"For your checkpoint, you'll be building a small business's website Look ahead and start wireframing what that will look like. Look ahead and see if you can get a jump on git branching.","title":"Push Yourself Further"},{"location":"module-2/class-6/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-2/class-6/#exit-recap-attendance-and-reminders-5-mins","text":"Create Contact Page Assignment Create Class 6 Blog Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) Bring pencil and paper to class for wireframing! In the next few lessons we'll slow down a bit but keep deepening our understand of building in HTML, CSS, JS, and HTTP. The pass will be a little different but it all leads to the same place, you as an excellent developer!!","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/class-7/","text":"Class 7: JS Continued, Calculator App \u201cYou may say I'm a dreamer, but I'm not the only one. I hope someday you'll join us. And the world will live as one.\u201d \u2015John Lennon Greet, Outline, and Objectify Today we're going to: OBJECTIVE: slow down a bit, and review our JavaScript understanding with a new project. Gravatar Check Questions for Student Led Discussion Challenge Show-and-Tell Interview Challenge Student Presentations Creation Time - Calculator App Push Yourself Further Exit Recap, Attendance, and Reminders Gravatar Check - 5 mins What is a Gravatar? Why do you need one? The instructor will now walk the room to see all students have created a Gravatar. Remember, it's important for Student Services to know you as a person which will help you with job placement upon graduation. Questions for Student Led Discussion, 15 mins Questions to prompt discussion Challenge Show-and-Tell Would anyone like to share something they built during the challenge of the Document Object lesson? Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins As a class, Fork and clone the Calculator App Repo into your devFolder or wherever you've been building your projects: git clone https://github.com/AustinCodingAcademy/calculator-app-101.git Go to the README.md file to find the rest of your instructions. Multiple students will explain aloud how this program works. NOTE: Here is an Overview Video of the repo . Push Yourself Further Rebuild another Calculator if you're up for it! Exit Recap, Attendance, and Reminders, 5 mins Create Calculator App Assignment Create a Checkpoint Assignment for the Small Business Page Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) This week will mostly be review of the tools and concepts you've learned in the form of practice, practice, practice. Be sure you play with all code snippets you get in your homework and prepare yourself for the building a small business website for your first checkpoint project!","title":"Class 7 Calculator App"},{"location":"module-2/class-7/#class-7-js-continued-calculator-app","text":"\u201cYou may say I'm a dreamer, but I'm not the only one. I hope someday you'll join us. And the world will live as one.\u201d \u2015John Lennon","title":"Class 7: JS Continued, Calculator App"},{"location":"module-2/class-7/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: slow down a bit, and review our JavaScript understanding with a new project. Gravatar Check Questions for Student Led Discussion Challenge Show-and-Tell Interview Challenge Student Presentations Creation Time - Calculator App Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-7/#gravatar-check-5-mins","text":"What is a Gravatar? Why do you need one? The instructor will now walk the room to see all students have created a Gravatar. Remember, it's important for Student Services to know you as a person which will help you with job placement upon graduation.","title":"Gravatar Check - 5 mins"},{"location":"module-2/class-7/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-2/class-7/#challenge-show-and-tell","text":"Would anyone like to share something they built during the challenge of the Document Object lesson?","title":"Challenge Show-and-Tell"},{"location":"module-2/class-7/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-7/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-7/#creation-time-60-90-mins","text":"As a class, Fork and clone the Calculator App Repo into your devFolder or wherever you've been building your projects: git clone https://github.com/AustinCodingAcademy/calculator-app-101.git Go to the README.md file to find the rest of your instructions. Multiple students will explain aloud how this program works. NOTE: Here is an Overview Video of the repo .","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-7/#push-yourself-further","text":"Rebuild another Calculator if you're up for it!","title":"Push Yourself Further"},{"location":"module-2/class-7/#exit-recap-attendance-and-reminders-5-mins","text":"Create Calculator App Assignment Create a Checkpoint Assignment for the Small Business Page Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) This week will mostly be review of the tools and concepts you've learned in the form of practice, practice, practice. Be sure you play with all code snippets you get in your homework and prepare yourself for the building a small business website for your first checkpoint project!","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/class-8/","text":"Class 8: Checkpoint - Barbershop Site \u201cWhen we love, we always strive to become better than we are. When we strive to become better than we are, everything around us becomes better too.\u201d \u2015Paulo Coelho Greet, Outline, and Objectify Today we're going to: OBJECTIVE:After this class students will have a firm understanding of: Project Planning Reuse of Code Special Elements of HTML Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Small Business Website - 85 mins Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins As we learn more skills, we practice them, thereby deepening our understanding of their purpose. Today, a close friend of yours will ask you if you could build them a website for their new hair salon. They cut great hair but they have no way for people to find out about them. They found a couple sites they like and have sent them to you (the mockups are below.) They want all the pages that are there, they don't care about having the exact content right now, they just want to have a site that looks like them and their style so using Lorem Ipsum is fine right now. Since each of you have different friends, the name of the salon or barbershop will be named differently. You can come up with the name of it and then use some creativity to change up the site just a little from the examples below but not so much that you get overwhelmed with design instead of building a site. Don't let great be the enemy of good. The Mockups You may choose one of the following websites to build and you may use artistic licensing to make reasonable adjustments to the website. But, you must create all of the pages that are in the website: Landing, About, Contact, Gallery, and Blog/News page. Zizurz Hair Salon Mustacchio Instructions Decide on the website style you'd like to design. Decide on the name of the company you're building it for. Look at the assignments you've already created: About Page, Contact Me, Image Gallery, Landing Page, and NASA page for your blog/news. What can you reuse? How can you leverage the code you've already written to build this massive project? They want it in a week. You'll need to get creative. After looking at your other pages, draw up your wireframes for your chosen website, for mobile, tablet, and desktop. Create a new repo with a README file called: \"hairSalonWebsite\". Suggestions: * [ ] Search for images on Unsplash to download and use. * [ ] Use GoogleFonts to get the best fonts Make it mobile! As you structure your page, be sure to test on both desktop, tablet, and mobile. git status , add , commit often! NOTE: This is something you should start doing as you code, to back up your work in case your computer goes down, water is spilled, or whatever. git commit ! NOTE 2: This project will be due a week from now so get going smartly, swiftly, and safely! Host the website on GitHub and turn in the live URL for your grade. The Specifications/Rubric Responsive for phone, tablet, and laptop - 50pts A Landing page - 10pts An About page - 10pts A Contact page - 10pts A Gallery page - 10pts A Blog/News page - 10pts Follow-up Video While these websites aren't built in this video, you can certainly use its flow and guidance if you get stuck. [YT, ACA@Clayton - Breaking into Your First Project] Push Yourself Further Add a page to this website for stylist schedules, like Bird's Barbershop in Austin. Build the other site, the one you didn't choose the first time. Teach yourself how to add a form to an image . Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Checkpoint1-Small Business Site Assignment Create Class 8 Blog Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) This project isn't due this Sunday, it's due next Sunday, but that doesn't mean you shouldn't begin working on it now! Get going tonight by wireframing, copy/pasting code from other projects, and draw up a plan of action to break this large project into smaller projects.","title":"Class 8 Checkpoint"},{"location":"module-2/class-8/#class-8-checkpoint-barbershop-site","text":"\u201cWhen we love, we always strive to become better than we are. When we strive to become better than we are, everything around us becomes better too.\u201d \u2015Paulo Coelho","title":"Class 8: Checkpoint - Barbershop Site"},{"location":"module-2/class-8/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE:After this class students will have a firm understanding of: Project Planning Reuse of Code Special Elements of HTML Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Small Business Website - 85 mins Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-8/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-2/class-8/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-8/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-8/#creation-time-60-90-mins","text":"As we learn more skills, we practice them, thereby deepening our understanding of their purpose. Today, a close friend of yours will ask you if you could build them a website for their new hair salon. They cut great hair but they have no way for people to find out about them. They found a couple sites they like and have sent them to you (the mockups are below.) They want all the pages that are there, they don't care about having the exact content right now, they just want to have a site that looks like them and their style so using Lorem Ipsum is fine right now. Since each of you have different friends, the name of the salon or barbershop will be named differently. You can come up with the name of it and then use some creativity to change up the site just a little from the examples below but not so much that you get overwhelmed with design instead of building a site. Don't let great be the enemy of good.","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-8/#the-mockups","text":"You may choose one of the following websites to build and you may use artistic licensing to make reasonable adjustments to the website. But, you must create all of the pages that are in the website: Landing, About, Contact, Gallery, and Blog/News page. Zizurz Hair Salon Mustacchio","title":"The Mockups"},{"location":"module-2/class-8/#instructions","text":"Decide on the website style you'd like to design. Decide on the name of the company you're building it for. Look at the assignments you've already created: About Page, Contact Me, Image Gallery, Landing Page, and NASA page for your blog/news. What can you reuse? How can you leverage the code you've already written to build this massive project? They want it in a week. You'll need to get creative. After looking at your other pages, draw up your wireframes for your chosen website, for mobile, tablet, and desktop. Create a new repo with a README file called: \"hairSalonWebsite\". Suggestions: * [ ] Search for images on Unsplash to download and use. * [ ] Use GoogleFonts to get the best fonts Make it mobile! As you structure your page, be sure to test on both desktop, tablet, and mobile. git status , add , commit often! NOTE: This is something you should start doing as you code, to back up your work in case your computer goes down, water is spilled, or whatever. git commit ! NOTE 2: This project will be due a week from now so get going smartly, swiftly, and safely! Host the website on GitHub and turn in the live URL for your grade.","title":"Instructions"},{"location":"module-2/class-8/#the-specificationsrubric","text":"Responsive for phone, tablet, and laptop - 50pts A Landing page - 10pts An About page - 10pts A Contact page - 10pts A Gallery page - 10pts A Blog/News page - 10pts","title":"The Specifications/Rubric"},{"location":"module-2/class-8/#follow-up-video","text":"While these websites aren't built in this video, you can certainly use its flow and guidance if you get stuck. [YT, ACA@Clayton - Breaking into Your First Project]","title":"Follow-up Video"},{"location":"module-2/class-8/#push-yourself-further","text":"Add a page to this website for stylist schedules, like Bird's Barbershop in Austin. Build the other site, the one you didn't choose the first time. Teach yourself how to add a form to an image .","title":"Push Yourself Further"},{"location":"module-2/class-8/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-2/class-8/#exit-recap-attendance-and-reminders-5-mins","text":"Create Checkpoint1-Small Business Site Assignment Create Class 8 Blog Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) This project isn't due this Sunday, it's due next Sunday, but that doesn't mean you shouldn't begin working on it now! Get going tonight by wireframing, copy/pasting code from other projects, and draw up a plan of action to break this large project into smaller projects.","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/commonEventListeners/","text":"Common Event Listeners Since our web pages are built for a human user to interact with it would make sense that we have some built in tools to capture their actions and do something with it. For this purpose, think of a user interaction with the web page as an Event and we won't our pages to be Listening for them. Remember, with programming we just need one action to trigger another action to trigger another action. So as we learn more about programming in JavaScript all you have to remember is that if you want a user to trigger a script you built, just go back and find the event listener that will capture that event. Here's a list of a few of the common event listeners: Common Mouse Events dblclick : when the mouse button is rapidly clicked on an element mousedown : when the mouse button is pressed on an element mouseup : when the mouse button is released on an element onclick : when the mouse button is pressed & released on an element Common Keyboard Events keydown : when a key is pressed, keyup : when a key is released Common Form Events As if you didn't have enough to remember about Forms, there are event specific to them! onfocus : when a user bring into focus a form element either by clicking on it or tabbing to it. onblur : this is the opposite, as soon as they move away from the element. onchange : when a value of an input is changed onsubmit : when a form is submitted. NOTE: onsubmit triggers a page reload. When you use this event listeners you'll also have to use event.preventDefault() to prevent the default page reload . Common Window Events window.resize : when the window is resized window.onhashchange : when an anchor tag has changed window.onload : when the page has finished loading window.unload : when the page has been closed We've just thrown a lot of event listeners at you. It important to breathe and just know you only have to be aware of them so you can use them when you need. You don't have to memorize them right now. Just take notes, use this book as a reference, and remember that these methods are built-in and ready for you to use at anytime. Know Your Docs W3S Docs - Event Listener Attributes","title":"Event Listeners"},{"location":"module-2/commonEventListeners/#common-event-listeners","text":"Since our web pages are built for a human user to interact with it would make sense that we have some built in tools to capture their actions and do something with it. For this purpose, think of a user interaction with the web page as an Event and we won't our pages to be Listening for them. Remember, with programming we just need one action to trigger another action to trigger another action. So as we learn more about programming in JavaScript all you have to remember is that if you want a user to trigger a script you built, just go back and find the event listener that will capture that event. Here's a list of a few of the common event listeners:","title":"Common Event Listeners"},{"location":"module-2/commonEventListeners/#common-mouse-events","text":"dblclick : when the mouse button is rapidly clicked on an element mousedown : when the mouse button is pressed on an element mouseup : when the mouse button is released on an element onclick : when the mouse button is pressed & released on an element","title":"Common Mouse Events"},{"location":"module-2/commonEventListeners/#common-keyboard-events","text":"keydown : when a key is pressed, keyup : when a key is released","title":"Common Keyboard Events"},{"location":"module-2/commonEventListeners/#common-form-events","text":"As if you didn't have enough to remember about Forms, there are event specific to them! onfocus : when a user bring into focus a form element either by clicking on it or tabbing to it. onblur : this is the opposite, as soon as they move away from the element. onchange : when a value of an input is changed onsubmit : when a form is submitted. NOTE: onsubmit triggers a page reload. When you use this event listeners you'll also have to use event.preventDefault() to prevent the default page reload .","title":"Common Form Events"},{"location":"module-2/commonEventListeners/#common-window-events","text":"window.resize : when the window is resized window.onhashchange : when an anchor tag has changed window.onload : when the page has finished loading window.unload : when the page has been closed We've just thrown a lot of event listeners at you. It important to breathe and just know you only have to be aware of them so you can use them when you need. You don't have to memorize them right now. Just take notes, use this book as a reference, and remember that these methods are built-in and ready for you to use at anytime.","title":"Common Window Events"},{"location":"module-2/commonEventListeners/#know-your-docs","text":"W3S Docs - Event Listener Attributes","title":"Know Your Docs"},{"location":"module-2/developSeries-brainBuilding/","text":"Develop Series: Building the Brain Overview As we've stated before, this program isn't just about creating a web developer out of you but so so much more! We want you to create your own business, develop deep and rich relationships, serve your community, and rise to your full human potential! You can do all of this through web development but you can't do it without developing yourself while you do. In the firsts few week we learned how to practice mindfulness and how it trains you to focus your thoughts, energy, and emotions toward what you want when you want it then we learned about self-motivation and what it means to tie yourself to what you're doing and do it for you and not for others. This week we'll look a how all the \"regular\" and \"normal\" habits we do are actually tearing away at our creative abilities and our chance at conscious happiness and purpose but how we can accept change in our life to improve our heath in all of our realms: physical, mental, and spiritual. Let's get to work. Habits for Good Brain Health In the article, 7 Modern Life Habits That Can Be Incredibly Bad For Your Brain Health , Thomas Oppong relates known clinical studies to the daily habits of our workplaces and suggests ways to stimulate our mental health in a conscious and effective way! HINT: If you're being blocked by Medium or any other website for not having a subscription, try opening articles in an incognito window and then a different browser. Or create another email account so you can read 10 free articles/month (looking at you NY Times!). Take the time that is needed to read this article and practice your mindful practice so you can take charge of your life and really make monumental changes with a conscious and awakened approach. But if you want to continue the asleep and unfulfilling path of TL;DR : Physical Inactivity = Mental Slowdown Multitasking = Low Concentration Ability Overload = Overstimulation = Lower IQ Physical Sitting = Mental Slog Screen Time = Low Emotional Wellbeing = Low Mental Wellbeing Loud Music = Dementia No Sleep = No mental health In addition to rewiring your daily routines you should try some of these bio-hacks created by very successful entrepreneurs like Tim Ferris and Dave Asprey: BUTTER COFFEE: FIVE REASONS YOU SHOULD START YOUR MORNING WITH IT 7 Biohacks to Master Before Worry about Other Biohacks The following articles take a closer look at why these 7 hacks work. Take special note of the first one, start there and you'll do well. Time in Nature Eating Good Food Moving Your Body Sense of Purpose Connection to People and Dogs Moderate Wealth To summarize, if you consciously approach these tactics and the challenges you have in life from child raising, rent payments, car troubles, learning to code, and family dynamics - you can learn to remove your personal emotions and see everything from a higher perspective which will give you the space and time to make better decisions as to how you react and what in your life needs to be removed, changed, and added. It's all about perspective and all we have to do to obtain newer and higher perspectives is to become aware of ourselves in each of the challenging situations we find ourselves in...the rest will follow. Coding Music Coding Music Now to the fun, easy stuff....Yeah, music!! When you're coding it's important that you maintain concentration. Yes, that constantly vanishing substance our maniacal \"fast and forward\" society regards as a by-product, concentration. Each of us has our own way of creating that concentration but if you haven't begun learning about yourself and what works for you then now is the best time to do so!! First suggestion, get some good noise cancelling headphones . Then find the music that works for you. Try these out: YouTube Chill lofi Beats to Code To 4hrs of Ambient Study Music 2hrs Study Music 2hrs of Study Jazz 2hrs of Electronic Study Spotify Electronic Concentration on Spotify Code Crazy Flying with Glass And third, learn about music that also helps you not concentrate but instead relaxes you: Reduce Anxiety with This Song Try listening to a song on repeat . Gravatar The days of anonymity on the web are long gone. Nowadays we don't hide behind silly usernames like we did on AOL. Instead we show off who we are. We recognize the internet as part of our real world and therefore we express ourself and represent ourselves in it. We also find jobs, get hired and work on the internet now. Because we use it and rely on it so much , shouldn't the internet be free and unfettered like say, Net Neutrality ? I digress... The point is, you need a good picture to show who you are to your colleagues and employers. Gravatar is a way to do that. Gravatar is a service provided by WordPress that connects your email and picture so that anywhere you go that uses Gravatar (about 35% of the internet) you will have a picture/avatar. Gravatar Action Items Right now, go to Campus Manager/OpenEdX and click on the image in the top-left of your profile. This will navigate you to Gravatar . Follow the video below and get a good looking, clear photo of your mug up in Campus Manager/OpenEdX, your email and anywhere you use your email address. We'll be checking for your Gravatar in class. NOTE: Be sure to use the email attached to CampusManager/OpenEdX/Canvas","title":"Develop - Your Brain"},{"location":"module-2/developSeries-brainBuilding/#develop-series-building-the-brain","text":"","title":"Develop Series: Building the Brain"},{"location":"module-2/developSeries-brainBuilding/#overview","text":"As we've stated before, this program isn't just about creating a web developer out of you but so so much more! We want you to create your own business, develop deep and rich relationships, serve your community, and rise to your full human potential! You can do all of this through web development but you can't do it without developing yourself while you do. In the firsts few week we learned how to practice mindfulness and how it trains you to focus your thoughts, energy, and emotions toward what you want when you want it then we learned about self-motivation and what it means to tie yourself to what you're doing and do it for you and not for others. This week we'll look a how all the \"regular\" and \"normal\" habits we do are actually tearing away at our creative abilities and our chance at conscious happiness and purpose but how we can accept change in our life to improve our heath in all of our realms: physical, mental, and spiritual. Let's get to work.","title":"Overview"},{"location":"module-2/developSeries-brainBuilding/#habits-for-good-brain-health","text":"In the article, 7 Modern Life Habits That Can Be Incredibly Bad For Your Brain Health , Thomas Oppong relates known clinical studies to the daily habits of our workplaces and suggests ways to stimulate our mental health in a conscious and effective way! HINT: If you're being blocked by Medium or any other website for not having a subscription, try opening articles in an incognito window and then a different browser. Or create another email account so you can read 10 free articles/month (looking at you NY Times!). Take the time that is needed to read this article and practice your mindful practice so you can take charge of your life and really make monumental changes with a conscious and awakened approach. But if you want to continue the asleep and unfulfilling path of TL;DR : Physical Inactivity = Mental Slowdown Multitasking = Low Concentration Ability Overload = Overstimulation = Lower IQ Physical Sitting = Mental Slog Screen Time = Low Emotional Wellbeing = Low Mental Wellbeing Loud Music = Dementia No Sleep = No mental health In addition to rewiring your daily routines you should try some of these bio-hacks created by very successful entrepreneurs like Tim Ferris and Dave Asprey: BUTTER COFFEE: FIVE REASONS YOU SHOULD START YOUR MORNING WITH IT 7 Biohacks to Master Before Worry about Other Biohacks The following articles take a closer look at why these 7 hacks work. Take special note of the first one, start there and you'll do well. Time in Nature Eating Good Food Moving Your Body Sense of Purpose Connection to People and Dogs Moderate Wealth To summarize, if you consciously approach these tactics and the challenges you have in life from child raising, rent payments, car troubles, learning to code, and family dynamics - you can learn to remove your personal emotions and see everything from a higher perspective which will give you the space and time to make better decisions as to how you react and what in your life needs to be removed, changed, and added. It's all about perspective and all we have to do to obtain newer and higher perspectives is to become aware of ourselves in each of the challenging situations we find ourselves in...the rest will follow.","title":"Habits for Good Brain Health"},{"location":"module-2/developSeries-brainBuilding/#coding-music","text":"Coding Music Now to the fun, easy stuff....Yeah, music!! When you're coding it's important that you maintain concentration. Yes, that constantly vanishing substance our maniacal \"fast and forward\" society regards as a by-product, concentration. Each of us has our own way of creating that concentration but if you haven't begun learning about yourself and what works for you then now is the best time to do so!! First suggestion, get some good noise cancelling headphones . Then find the music that works for you. Try these out: YouTube Chill lofi Beats to Code To 4hrs of Ambient Study Music 2hrs Study Music 2hrs of Study Jazz 2hrs of Electronic Study Spotify Electronic Concentration on Spotify Code Crazy Flying with Glass And third, learn about music that also helps you not concentrate but instead relaxes you: Reduce Anxiety with This Song Try listening to a song on repeat .","title":"Coding Music"},{"location":"module-2/developSeries-brainBuilding/#gravatar","text":"The days of anonymity on the web are long gone. Nowadays we don't hide behind silly usernames like we did on AOL. Instead we show off who we are. We recognize the internet as part of our real world and therefore we express ourself and represent ourselves in it. We also find jobs, get hired and work on the internet now. Because we use it and rely on it so much , shouldn't the internet be free and unfettered like say, Net Neutrality ? I digress... The point is, you need a good picture to show who you are to your colleagues and employers. Gravatar is a way to do that. Gravatar is a service provided by WordPress that connects your email and picture so that anywhere you go that uses Gravatar (about 35% of the internet) you will have a picture/avatar.","title":"Gravatar"},{"location":"module-2/developSeries-brainBuilding/#gravatar-action-items","text":"Right now, go to Campus Manager/OpenEdX and click on the image in the top-left of your profile. This will navigate you to Gravatar . Follow the video below and get a good looking, clear photo of your mug up in Campus Manager/OpenEdX, your email and anywhere you use your email address. We'll be checking for your Gravatar in class. NOTE: Be sure to use the email attached to CampusManager/OpenEdX/Canvas","title":"Gravatar Action Items"},{"location":"module-2/documentMethods/","text":"The Document Object With all this talk of the Window, Buttons, and Input Elements it feels as if we kicked the Document object to the curb. \"It has feelings too, guys!\" Document Methods Check it, the document has access to all elements because it is the root element. It is the Mother of All Elements , it creates elements, removes elements, and changes their contents. The Document is THE OBJECT. It's why there is a Document Object Model , because all objects are born, live, and die with the Document Object. To begin learning the powers of this omnipotent goddess let's create yet another button we can call a function with. Go ahead and do this by yourself in that 101-onlineClothingStore folder we've been in and out of. You got this, just create a new button with \"Create New Object\" as its innerText. Then give the onclick= attribute the value of createNewObject() . In JavaScript create a new function called createNewObject and write a console.log(\"TESTING\") to make sure it's working before we move on. The createElement() Method Now that you got that in order let's build out that function's declaration block. Let's first create a variable to hold a reference to an object: 1 2 3 4 5 6 7 8 9 10 <!-- 101-onlineClothingStore/index.html --> <!-- more code up here... --> < script > // and more JS code here... function createNewObject () { let newObject = document . createElement ( \"H3\" ) } </ script > The variable is called newObject and its value is a new H3 object/element the Document created with its createElement() method. That's right! We're now using properties, events, and methods!!! Now let's create another variable that will hold a reference to a Text Object/Node. We'll give it some basic text for now. 1 2 3 4 5 6 7 8 9 10 11 <!-- 101-onlineClothingStore/index.html --> <!-- more code up here... --> < script > // and more JS code here... function createNewObject () { let newObject = document . createElement ( \"H3\" ) let text = document . createTextNode ( \"THIS IS A TEST.\" ) } </ script > Now we need to append that Text Node/Object to our newObject . 1 2 3 4 5 6 7 8 9 10 11 12 13 <!-- 101-onlineClothingStore/index.html --> <!-- more code up here... --> < script > // and more JS code here... function createNewObject () { let newObject = document . createElement ( \"H3\" ) let text = document . createTextNode ( \"THIS IS A TEST.\" ) newObject . appendChild ( text ) } </ script > Notice that the newObject has this .appendChild() method on it as if by magic! It's not magic it inheritance . Even though it's a brand-spankin\u2019 new H3 object, it's inheriting all of the Global Methods that are available to all HTML elements. The last step is to append our newObject to our Body object. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <!-- 101-onlineClothingStore/index.html --> <!-- more code up here... --> < script > // and more JS code here... function createNewObject () { let newObject = document . createElement ( \"h3\" ) let text = document . createTextNode ( \"THIS IS A TEST.\" ) newObject . appendChild ( text ) document . body . appendChild ( newObject ) } </ script > </ body > Quick Review Wow!! That was a lot, let's slow this train down and look at it more closely. Inside our functions declaration block, we declared 4 steps for the computer to do. Create a new variable and use the Document's createElement method to place a new H3 element at its value Then create another variable and use the Document's createTextNode method to place a Text Node/Object with \"THIS IS A TEST\" as dummy data. Use the Global method, appendChild() to stick the Text Node/Object into the new H3 Object. Use the same method to stick the new H3 Object into the Body of the Document object. That wasn't so bad, was it? Use the Data in the Variable Instead of using that dummy data, \"THIS IS A TEST\" let's instead use the data our user would put in. Replace that argument with usersInput . Now that line of code will read: let text = document.createTextNode(usersInput) . Test it out. How's it working? Annoying that you have to manually delete your input? This is why we use Input Elements and Button Elements inside Form Elements. But we'll have to get to that in a later lesson. For now, you have a challenge! Know Your Docs W3S Docs - if Statement W3S Docs - Name Attribute W3S Docs - getElementById() Additional Resources Wikipedia - D.R.Y Principle Medium - AirBNB Code Style Summary & Challenge Yourself We've covered a lot of information in this lesson from Button Elements and their methods like onclick to JavaScript keywords like let that communicates to our computer when we want to hold data in a variable or the keyword function that tells the computer to create a function and remember the instructions inside its declaration block and how to invoke a function with the trailing () . We began working with methods of the Window, Console, and Document Object to create new windows, logs, and elements. I know this is a lot, but I hope this quick but deeper dive into the building blocks of web pages and the properties, methods, and events that compose them helps you start seeing this stuff as less \"computer-sciency\" and more practical. Sure, you have JavaScript and HTML syntax to learn, but that WILL come with practice. Just keep reading, studying, and saving your docs and do your Challenges!! Challenge What can you create with this handful of new methods? Show us and impress up. In the next class we'll invite everyone to share what they created. Feel free to use this repo for an idea/starting point: https://github.com/AustinCodingAcademy/101-important-to-do-list . If you want, start with the README.md file, read the entire instructions, then clone it and begin completing it. NOTE: There's curveball: there's a new method introduced in this code, getElementById() . Just read the comments and look up the documentation if you don't understand it.","title":"Document Methods"},{"location":"module-2/documentMethods/#the-document-object","text":"With all this talk of the Window, Buttons, and Input Elements it feels as if we kicked the Document object to the curb. \"It has feelings too, guys!\"","title":"The Document Object"},{"location":"module-2/documentMethods/#document-methods","text":"Check it, the document has access to all elements because it is the root element. It is the Mother of All Elements , it creates elements, removes elements, and changes their contents. The Document is THE OBJECT. It's why there is a Document Object Model , because all objects are born, live, and die with the Document Object. To begin learning the powers of this omnipotent goddess let's create yet another button we can call a function with. Go ahead and do this by yourself in that 101-onlineClothingStore folder we've been in and out of. You got this, just create a new button with \"Create New Object\" as its innerText. Then give the onclick= attribute the value of createNewObject() . In JavaScript create a new function called createNewObject and write a console.log(\"TESTING\") to make sure it's working before we move on.","title":"Document Methods"},{"location":"module-2/documentMethods/#the-createelement-method","text":"Now that you got that in order let's build out that function's declaration block. Let's first create a variable to hold a reference to an object: 1 2 3 4 5 6 7 8 9 10 <!-- 101-onlineClothingStore/index.html --> <!-- more code up here... --> < script > // and more JS code here... function createNewObject () { let newObject = document . createElement ( \"H3\" ) } </ script > The variable is called newObject and its value is a new H3 object/element the Document created with its createElement() method. That's right! We're now using properties, events, and methods!!! Now let's create another variable that will hold a reference to a Text Object/Node. We'll give it some basic text for now. 1 2 3 4 5 6 7 8 9 10 11 <!-- 101-onlineClothingStore/index.html --> <!-- more code up here... --> < script > // and more JS code here... function createNewObject () { let newObject = document . createElement ( \"H3\" ) let text = document . createTextNode ( \"THIS IS A TEST.\" ) } </ script > Now we need to append that Text Node/Object to our newObject . 1 2 3 4 5 6 7 8 9 10 11 12 13 <!-- 101-onlineClothingStore/index.html --> <!-- more code up here... --> < script > // and more JS code here... function createNewObject () { let newObject = document . createElement ( \"H3\" ) let text = document . createTextNode ( \"THIS IS A TEST.\" ) newObject . appendChild ( text ) } </ script > Notice that the newObject has this .appendChild() method on it as if by magic! It's not magic it inheritance . Even though it's a brand-spankin\u2019 new H3 object, it's inheriting all of the Global Methods that are available to all HTML elements. The last step is to append our newObject to our Body object. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <!-- 101-onlineClothingStore/index.html --> <!-- more code up here... --> < script > // and more JS code here... function createNewObject () { let newObject = document . createElement ( \"h3\" ) let text = document . createTextNode ( \"THIS IS A TEST.\" ) newObject . appendChild ( text ) document . body . appendChild ( newObject ) } </ script > </ body >","title":"The createElement() Method"},{"location":"module-2/documentMethods/#quick-review","text":"Wow!! That was a lot, let's slow this train down and look at it more closely. Inside our functions declaration block, we declared 4 steps for the computer to do. Create a new variable and use the Document's createElement method to place a new H3 element at its value Then create another variable and use the Document's createTextNode method to place a Text Node/Object with \"THIS IS A TEST\" as dummy data. Use the Global method, appendChild() to stick the Text Node/Object into the new H3 Object. Use the same method to stick the new H3 Object into the Body of the Document object. That wasn't so bad, was it?","title":"Quick Review"},{"location":"module-2/documentMethods/#use-the-data-in-the-variable","text":"Instead of using that dummy data, \"THIS IS A TEST\" let's instead use the data our user would put in. Replace that argument with usersInput . Now that line of code will read: let text = document.createTextNode(usersInput) . Test it out. How's it working? Annoying that you have to manually delete your input? This is why we use Input Elements and Button Elements inside Form Elements. But we'll have to get to that in a later lesson. For now, you have a challenge!","title":"Use the Data in the Variable"},{"location":"module-2/documentMethods/#know-your-docs","text":"W3S Docs - if Statement W3S Docs - Name Attribute W3S Docs - getElementById()","title":"Know Your Docs"},{"location":"module-2/documentMethods/#additional-resources","text":"Wikipedia - D.R.Y Principle Medium - AirBNB Code Style","title":"Additional Resources"},{"location":"module-2/documentMethods/#summary-challenge-yourself","text":"We've covered a lot of information in this lesson from Button Elements and their methods like onclick to JavaScript keywords like let that communicates to our computer when we want to hold data in a variable or the keyword function that tells the computer to create a function and remember the instructions inside its declaration block and how to invoke a function with the trailing () . We began working with methods of the Window, Console, and Document Object to create new windows, logs, and elements. I know this is a lot, but I hope this quick but deeper dive into the building blocks of web pages and the properties, methods, and events that compose them helps you start seeing this stuff as less \"computer-sciency\" and more practical. Sure, you have JavaScript and HTML syntax to learn, but that WILL come with practice. Just keep reading, studying, and saving your docs and do your Challenges!!","title":"Summary &amp; Challenge Yourself"},{"location":"module-2/documentMethods/#challenge","text":"What can you create with this handful of new methods? Show us and impress up. In the next class we'll invite everyone to share what they created. Feel free to use this repo for an idea/starting point: https://github.com/AustinCodingAcademy/101-important-to-do-list . If you want, start with the README.md file, read the entire instructions, then clone it and begin completing it. NOTE: There's curveball: there's a new method introduced in this code, getElementById() . Just read the comments and look up the documentation if you don't understand it.","title":"Challenge"},{"location":"module-2/formElement/","text":"The Form Element Be a self-starter. Do it now! When you don't know how to do something, start. Beware of the paralysis of analysis. Be a person of action. \u2014Mamie McCullough Let's zoom in a little from those higher-level view and talk about a specific element we haven't worked with yet, the Form Element. As you might have guessed it's used to create forms! Or as defined by MDN : \"The HTML <form> element represents a document section containing interactive controls for submitting information.\" The Form element is an object in HTML that presents to the human-user a place to input information/data but also gives us a place to store that data until they complete the form and click the submit button which triggers a fetch request to send that data to a server then to a database. To use Form elements properly we have to learn their attributes(properties and methods). Attributes of the Form Like all other HTML Elements, the Form Element has all the Global Attributes (events and methods) along with a few special ones of its own. Let's break them into two categories: Required and Optional Required Attributes/Properties: action, enctype, method, novalidate, target These properties are required to be defined for your forms to work properly so let's look at them and how they're used. We'll be using the following code as a reference point. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 <!-- index.html --> < form action = \"https://www.singlesingerssite.com/signin.htm\" method = \"post\" autocomplete = \"off\" > < div > < label for = \"email\" > Email </ label > < input type = \"text\" name = \"email\" id = \"email\" required > </ div > < div > < label for = \"password\" > Password </ label > < input type = \"password\" name = \"password\" id = \"password\" required > </ div > < div > < input type = \"submit\" value = \"Subscribe!\" > </ div > </ form > <!-- Notes on the unfamiliar part of the code above: --> <!-- The Div element is used to divide out the page --> <!-- Label Elements are used to label an Input Element --> <!-- Input Elements are versatile and can be used for any type of form input --> action= - The value of this must be a URL like the one you see above. This tells the form where to send the data when it's submitted by the human-user. However, the preference for this technique has been replaced with creating a function that uses fetch to handle the HTTP request and calling it onclick= of a submit button, i.e. <input type=\"submit\" onclick=\"handleSubmit()\">, method= - If you choose to use the action= attribute to define the URL that will process your forms data, then you have to define the method as a POST. Later in this lesson, you'll learn about the multiple values you can use here to send different types of Requests over HTTP(S). For now, the two values you can use here are \"post\" and \"get\" . If you use the preferred fetch alternative then you will need to declare the Request as a POST in the fetch because the default value of the Form Element's method= is get , see below: 1 2 3 4 5 6 // inside a <script> element or in .js file fetch ( 'https://fakestoreapi.com/products' , { method : \"POST\" , body : {} }) Properties that are Required but have Implied Default Values enctype= - This defines the type of encoding the data should go through before it's sent over HTTP. The values you can use are: \"application/x-www-form-urlencoded\" : The default value and used for most forms. You don't see it defined and declared in the code above because it's the default value if you don't type out one of the following instead. \"multipart/form-data\" : If your form accepts files as a possible input then you need to declare it using this value. \"text/plain\" - Introduced by HTML5 for debugging purposes. target= - this property specifies where the Response object should load; that is, after the form is submitted and there's a response from the other page, site, or server where should the response go? The option you have are: _self : Load the response into the same browsing context(window/tab) as the current one. This is the default if the attribute is not specified. _blank : Load the response into a new unnamed browsing context \u2014 usually a new tab or window, depending on the user\u2019s browser settings. _parent : Load the response into the parent browsing context of the current one. If there is no parent, this option behaves the same way as _self . _top : Load the response into the top-level browsing context (that is, the browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this option behaves the same way as _self . NOTE: later on we'll override this behavior with a .preventDefault() but more on that later. novalidate - The default attribute is validate which translate to validate=true . The reason this is defaulted to validate is because form validation is the first step in preventing hackers\u2019 attacks. It's not the end-all-be-all but it is the first layer of security in building apps. Form Validation is part of a larger practice called Client-side Validation and HTML comes with built-in measures that we'll get into when we learn about the Input Element. For now, in the code example notice required and type=email and type=password . These are form validation measures built into HTML because they require the human-user to fill them out and the Email Type Inputs require a @ and .com while the Password Type Inputs mask the password with \u2022\u2022\u2022\u2022\u2022\u2022 . Try it. Throw the code into a new HTML file and serve it up. Do you see the \u2022s ? Try submitting an email with the @ . Most of the time you do want to validate so you won't type novalidate and don't need to specify validate because its default value is implied. Optional Form Attributes/Properties autocomplete= - allows the human-user's browser to auto-fill the form if they have their information stored in their browser. You can toggle this with the values: \"on\" and \"off\" however many browsers are opting to not read \"off\" for login fields. NOTE: If you are building a page that allows the human-user to update their password you can use the third value: autocomplete=\"new-password\" to prevent the browser from auto-filling the inputs on that form. accept-charset= - sets the language/ Character Set the form can take like German, Cyrillic, Japanese, so forth. For most languages, including English this is \"utf-8\" as in: <form accept-charset=\"utf-8\"> . However, you don't have to set this property/attribute because it defaults to the character set/ Content Encoding you have in the Head Element to set the character set of your page: <meta charset=\"utf-8\"> rel= - this gives you a place to give an annotation or explanation of the form is something is unclear. Most of the time you won't use this property. Inputs The Form element has many elements that go inside of it but, by far, the most common elements are the Label and Input Element: 1 2 < label for = \"password\" > Password </ label > < input type = \"password\" name = \"password\" id = \"password\" required > This is because the Input element is a versatile element that can be used for all sorts of inputs from text and numbers to files and colors. NOTE: The HTML snippet above has a Label element with a for attribute set to \"password\" . In this way it is now tied to the Input element id=\"password\" and NOT the name or type attributes. You see that? The label is for the id of the input. The list below tells you most of the values you can give to the type attribute of an Input element. <input type=\"text\"> : defines a one-line text input field. If you need a bigger area for lots of text you'll use a TextArea element. <input type=\"password\"> : defines a password field. <input type=\"submit\"> : defines a button for submitting form data. <input type=\"radio\"> : defines a radio button. <input type=\"checkbox\" >: defines a checkbox. <input type=\"button\"> : defines a button. <input type=\"date\"> : creates a date selector <input type=\"color\"> : provides a color picker wheel <input type=\"submit\" value=\"Submit\"> : creates a button that is registered automatically with its parent form element as a \"submit\" button AND it doesn't need a partner Label element. <input type=\"reset\" value=\"Reset\"> - creates a button that defaults to call the Form's .reset() method to clear all of it's fields. Other Attributes of the Input Element Form validation means we're verifying the data a user puts in, such as the type, length, validity, and shape we want so we can properly save it to a database. NOTE: Later in this full-stack program you'll see that data must be in the same format, or shape, as the other bits of data being saved with it else the computer can't read it. It is costly both in time and money to send the data from the user to our databases only for it to be in the wrong format. A shorter, safer, and cheaper first filter we can use is HTML's built-in form validation, and you've actually already seen one of the tools, type , which specifies the type of data that can go into an input. We'll not cover them all in extreme detail because you'll have docs to reference later. But because you need a good introduction of form validation and some tools to do it, let's look at a few of the other attributes we can leverage on Input elements. maxlength= : limits the maximum number of characters that can go into the input minlength= : limits the minimum number of characters that can go into the input max= and min= : creates upper and lower limits on a data input required : forces the user to fill out the input type=\"email\" : verifies that the input has a @ and .com type=\"phone\" : verifies that it is a legit phone number autocomplete=\"on\" : let's the browser offer autocompletion of the form type=\"password\" : blots out the characters in this field automatically placeholder= : isn't a validation attribute but it does give the user a hint about what goes in the field 1 2 < label for = \"price\" > Price ($) </ label > < input type = \"number\" name = \"price\" id = \"price\" placeholder = \"$10.00\" onkeyup = \"updateNewProduct(this)\" min = \"1\" max = \"100000\" required > MDN Docs - Input Element Other Elements That Belong to the Form Element Besides Input, there are a few other form elements you should know about but don't concern yourself with them too much . Remember, there are a lot of tools built into HTML that were developed over years of trial and error and there is no way for us to learn every detail to perfection right now. Take this as a very superficial survey of these other elements: <fieldset> & <legend> : The fieldset groups related data together and the legend acts the same way as the Label does for the Input. In this way, <fieldset> and <legend> always go together. <textarea> : As mentioned before, it is for large sections of text like this page you're reading now!!! ;) <datalist> : gives you a \"pre-fill\" menu for your inputs <output> : of course, shows you the output of some script you've built. You might try using this in your calculator app. <select> : offers a dropdown menu to your user. The last thing we'll say about the HTML Form elements is that they can all be styled just like your other HTML elements. Have fun, let your creativity run wild, and enjoy building!! MDN Docs - All Form Elements Practice It - Forms You have two projects to do in class. Go ahead and start on one of them now. If you want something more to work with try fiddling with this Example Form CodePen . Next class you'll be building a Contact Me Page & a Calculator. Look ahead to see the specifications for it and wireframe it tonight. Know Your Docs MDN Docs - All Form Elements MDN Docs - Input Element Additional Resources YT, Richard Barkinskiy - Styling Form Elements ] YT, Web Dev Simplified - Learn HTML Form Elements YT, InfoQ - Styling Form Validation Messages CodePen, Code Snippet - Example Form Starter","title":"Form Element"},{"location":"module-2/formElement/#the-form-element","text":"Be a self-starter. Do it now! When you don't know how to do something, start. Beware of the paralysis of analysis. Be a person of action. \u2014Mamie McCullough Let's zoom in a little from those higher-level view and talk about a specific element we haven't worked with yet, the Form Element. As you might have guessed it's used to create forms! Or as defined by MDN : \"The HTML <form> element represents a document section containing interactive controls for submitting information.\" The Form element is an object in HTML that presents to the human-user a place to input information/data but also gives us a place to store that data until they complete the form and click the submit button which triggers a fetch request to send that data to a server then to a database. To use Form elements properly we have to learn their attributes(properties and methods).","title":"The Form Element"},{"location":"module-2/formElement/#attributes-of-the-form","text":"Like all other HTML Elements, the Form Element has all the Global Attributes (events and methods) along with a few special ones of its own. Let's break them into two categories: Required and Optional","title":"Attributes of the Form"},{"location":"module-2/formElement/#required-attributesproperties-action-enctype-method-novalidate-target","text":"These properties are required to be defined for your forms to work properly so let's look at them and how they're used. We'll be using the following code as a reference point. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 <!-- index.html --> < form action = \"https://www.singlesingerssite.com/signin.htm\" method = \"post\" autocomplete = \"off\" > < div > < label for = \"email\" > Email </ label > < input type = \"text\" name = \"email\" id = \"email\" required > </ div > < div > < label for = \"password\" > Password </ label > < input type = \"password\" name = \"password\" id = \"password\" required > </ div > < div > < input type = \"submit\" value = \"Subscribe!\" > </ div > </ form > <!-- Notes on the unfamiliar part of the code above: --> <!-- The Div element is used to divide out the page --> <!-- Label Elements are used to label an Input Element --> <!-- Input Elements are versatile and can be used for any type of form input --> action= - The value of this must be a URL like the one you see above. This tells the form where to send the data when it's submitted by the human-user. However, the preference for this technique has been replaced with creating a function that uses fetch to handle the HTTP request and calling it onclick= of a submit button, i.e. <input type=\"submit\" onclick=\"handleSubmit()\">, method= - If you choose to use the action= attribute to define the URL that will process your forms data, then you have to define the method as a POST. Later in this lesson, you'll learn about the multiple values you can use here to send different types of Requests over HTTP(S). For now, the two values you can use here are \"post\" and \"get\" . If you use the preferred fetch alternative then you will need to declare the Request as a POST in the fetch because the default value of the Form Element's method= is get , see below: 1 2 3 4 5 6 // inside a <script> element or in .js file fetch ( 'https://fakestoreapi.com/products' , { method : \"POST\" , body : {} })","title":"Required Attributes/Properties: action, enctype, method, novalidate, target"},{"location":"module-2/formElement/#properties-that-are-required-but-have-implied-default-values","text":"enctype= - This defines the type of encoding the data should go through before it's sent over HTTP. The values you can use are: \"application/x-www-form-urlencoded\" : The default value and used for most forms. You don't see it defined and declared in the code above because it's the default value if you don't type out one of the following instead. \"multipart/form-data\" : If your form accepts files as a possible input then you need to declare it using this value. \"text/plain\" - Introduced by HTML5 for debugging purposes. target= - this property specifies where the Response object should load; that is, after the form is submitted and there's a response from the other page, site, or server where should the response go? The option you have are: _self : Load the response into the same browsing context(window/tab) as the current one. This is the default if the attribute is not specified. _blank : Load the response into a new unnamed browsing context \u2014 usually a new tab or window, depending on the user\u2019s browser settings. _parent : Load the response into the parent browsing context of the current one. If there is no parent, this option behaves the same way as _self . _top : Load the response into the top-level browsing context (that is, the browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this option behaves the same way as _self . NOTE: later on we'll override this behavior with a .preventDefault() but more on that later. novalidate - The default attribute is validate which translate to validate=true . The reason this is defaulted to validate is because form validation is the first step in preventing hackers\u2019 attacks. It's not the end-all-be-all but it is the first layer of security in building apps. Form Validation is part of a larger practice called Client-side Validation and HTML comes with built-in measures that we'll get into when we learn about the Input Element. For now, in the code example notice required and type=email and type=password . These are form validation measures built into HTML because they require the human-user to fill them out and the Email Type Inputs require a @ and .com while the Password Type Inputs mask the password with \u2022\u2022\u2022\u2022\u2022\u2022 . Try it. Throw the code into a new HTML file and serve it up. Do you see the \u2022s ? Try submitting an email with the @ . Most of the time you do want to validate so you won't type novalidate and don't need to specify validate because its default value is implied.","title":"Properties that are Required but have Implied Default Values"},{"location":"module-2/formElement/#optional-form-attributesproperties","text":"autocomplete= - allows the human-user's browser to auto-fill the form if they have their information stored in their browser. You can toggle this with the values: \"on\" and \"off\" however many browsers are opting to not read \"off\" for login fields. NOTE: If you are building a page that allows the human-user to update their password you can use the third value: autocomplete=\"new-password\" to prevent the browser from auto-filling the inputs on that form. accept-charset= - sets the language/ Character Set the form can take like German, Cyrillic, Japanese, so forth. For most languages, including English this is \"utf-8\" as in: <form accept-charset=\"utf-8\"> . However, you don't have to set this property/attribute because it defaults to the character set/ Content Encoding you have in the Head Element to set the character set of your page: <meta charset=\"utf-8\"> rel= - this gives you a place to give an annotation or explanation of the form is something is unclear. Most of the time you won't use this property.","title":"Optional Form Attributes/Properties"},{"location":"module-2/formElement/#inputs","text":"The Form element has many elements that go inside of it but, by far, the most common elements are the Label and Input Element: 1 2 < label for = \"password\" > Password </ label > < input type = \"password\" name = \"password\" id = \"password\" required > This is because the Input element is a versatile element that can be used for all sorts of inputs from text and numbers to files and colors. NOTE: The HTML snippet above has a Label element with a for attribute set to \"password\" . In this way it is now tied to the Input element id=\"password\" and NOT the name or type attributes. You see that? The label is for the id of the input. The list below tells you most of the values you can give to the type attribute of an Input element. <input type=\"text\"> : defines a one-line text input field. If you need a bigger area for lots of text you'll use a TextArea element. <input type=\"password\"> : defines a password field. <input type=\"submit\"> : defines a button for submitting form data. <input type=\"radio\"> : defines a radio button. <input type=\"checkbox\" >: defines a checkbox. <input type=\"button\"> : defines a button. <input type=\"date\"> : creates a date selector <input type=\"color\"> : provides a color picker wheel <input type=\"submit\" value=\"Submit\"> : creates a button that is registered automatically with its parent form element as a \"submit\" button AND it doesn't need a partner Label element. <input type=\"reset\" value=\"Reset\"> - creates a button that defaults to call the Form's .reset() method to clear all of it's fields.","title":"Inputs"},{"location":"module-2/formElement/#other-attributes-of-the-input-element","text":"Form validation means we're verifying the data a user puts in, such as the type, length, validity, and shape we want so we can properly save it to a database. NOTE: Later in this full-stack program you'll see that data must be in the same format, or shape, as the other bits of data being saved with it else the computer can't read it. It is costly both in time and money to send the data from the user to our databases only for it to be in the wrong format. A shorter, safer, and cheaper first filter we can use is HTML's built-in form validation, and you've actually already seen one of the tools, type , which specifies the type of data that can go into an input. We'll not cover them all in extreme detail because you'll have docs to reference later. But because you need a good introduction of form validation and some tools to do it, let's look at a few of the other attributes we can leverage on Input elements. maxlength= : limits the maximum number of characters that can go into the input minlength= : limits the minimum number of characters that can go into the input max= and min= : creates upper and lower limits on a data input required : forces the user to fill out the input type=\"email\" : verifies that the input has a @ and .com type=\"phone\" : verifies that it is a legit phone number autocomplete=\"on\" : let's the browser offer autocompletion of the form type=\"password\" : blots out the characters in this field automatically placeholder= : isn't a validation attribute but it does give the user a hint about what goes in the field 1 2 < label for = \"price\" > Price ($) </ label > < input type = \"number\" name = \"price\" id = \"price\" placeholder = \"$10.00\" onkeyup = \"updateNewProduct(this)\" min = \"1\" max = \"100000\" required > MDN Docs - Input Element","title":"Other Attributes of the Input Element"},{"location":"module-2/formElement/#other-elements-that-belong-to-the-form-element","text":"Besides Input, there are a few other form elements you should know about but don't concern yourself with them too much . Remember, there are a lot of tools built into HTML that were developed over years of trial and error and there is no way for us to learn every detail to perfection right now. Take this as a very superficial survey of these other elements: <fieldset> & <legend> : The fieldset groups related data together and the legend acts the same way as the Label does for the Input. In this way, <fieldset> and <legend> always go together. <textarea> : As mentioned before, it is for large sections of text like this page you're reading now!!! ;) <datalist> : gives you a \"pre-fill\" menu for your inputs <output> : of course, shows you the output of some script you've built. You might try using this in your calculator app. <select> : offers a dropdown menu to your user. The last thing we'll say about the HTML Form elements is that they can all be styled just like your other HTML elements. Have fun, let your creativity run wild, and enjoy building!! MDN Docs - All Form Elements","title":"Other Elements That Belong to the Form Element"},{"location":"module-2/formElement/#practice-it-forms","text":"You have two projects to do in class. Go ahead and start on one of them now. If you want something more to work with try fiddling with this Example Form CodePen . Next class you'll be building a Contact Me Page & a Calculator. Look ahead to see the specifications for it and wireframe it tonight.","title":"Practice It - Forms"},{"location":"module-2/formElement/#know-your-docs","text":"MDN Docs - All Form Elements MDN Docs - Input Element","title":"Know Your Docs"},{"location":"module-2/formElement/#additional-resources","text":"YT, Richard Barkinskiy - Styling Form Elements ] YT, Web Dev Simplified - Learn HTML Form Elements YT, InfoQ - Styling Form Validation Messages CodePen, Code Snippet - Example Form Starter","title":"Additional Resources"},{"location":"module-2/howTheInternetWorks/","text":"The Internet/Web, Our Job as Developers, and Ways to Think About It As we learn this new language called JavaScript it's important we start to create a new perspective in our minds about how computers interact with the world and how code is used to communication intentions to a computer because our website and apps will only grow in size from here on. It all works the same as HTML and CSS but requires a different way of thinking. How The Internet Works In this course we're learning how to build websites. No, not apps yet but trust that the technology used for apps is the same technology used to build website and anything you'll ever want to build in the future, is also built on the foundations we'll learn in this course. So where to begin? Assuming we know nothing about how the internet work, how computers function but someone told us we would like coding let's start from there. How does information/data that represents text, pictures, video, audio, and interactions move from one computer to another computer through wires and even air(WiFi). The simple answer to this could be \"magic\". A better would be \"science\" but either way, you got into this coding program because you want to become the magician, right? What is the Internet? The internet is a continuous connection of various computer and devices that includes your phone, computer, watch, and doorbell. They are all connected through various means including coax, CAT5, fiber, WiFi, bluetooth, 3G, 4G, LTE, & 5G. Through all of these connections and the millions of devices they connect to the internet is created. But this still doesn't answer our question: \"How does it work??\" How Does it Work? In order for these devices to talk to one another they must rely on a series of steps that detail how, when, and what data transfers look like. There's a word, we don't often hear, called protocol that refers to a series of agreed upon steps taken when something happens as in: \"Firemen have a protocol for leaving the firehouse and responding to a fire.\" The internet and its devices depend on an agreed about series of steps and organization of data to ensure that your computer knows how to interpret the information sent to it from Target or Netflix. This protocol is called HTTP or HTTPS, yes the prefix in your browser's address bar.(Go look.) HTTP/HTTPS stands for Hypertext Transfer Protocol (secure) . This protocol, or series of agreed upon steps and how data transfers look, is what computers/machines use when they need to move data between one another. While this course will not dig into all the technical details of HTTP(S) we will learn much more about this protocol in 311 when we learn how to plan, design, and build databases and servers(computers without screens/The Cloud). For now, it's enough to know that what we will be learning in this 101 course, HTML, JS, & CSS, are languages that create data that fits within the HTTProtocol and represent to a web browser(Safari, Chrome, etc...) what content we want on our pages, what our pages will look like and how they interact with people(users).","title":"How the Internet Works"},{"location":"module-2/howTheInternetWorks/#the-internetweb-our-job-as-developers-and-ways-to-think-about-it","text":"As we learn this new language called JavaScript it's important we start to create a new perspective in our minds about how computers interact with the world and how code is used to communication intentions to a computer because our website and apps will only grow in size from here on. It all works the same as HTML and CSS but requires a different way of thinking.","title":"The Internet/Web, Our Job as Developers, and Ways to Think About It"},{"location":"module-2/howTheInternetWorks/#how-the-internet-works","text":"In this course we're learning how to build websites. No, not apps yet but trust that the technology used for apps is the same technology used to build website and anything you'll ever want to build in the future, is also built on the foundations we'll learn in this course. So where to begin? Assuming we know nothing about how the internet work, how computers function but someone told us we would like coding let's start from there. How does information/data that represents text, pictures, video, audio, and interactions move from one computer to another computer through wires and even air(WiFi). The simple answer to this could be \"magic\". A better would be \"science\" but either way, you got into this coding program because you want to become the magician, right?","title":"How The Internet Works"},{"location":"module-2/howTheInternetWorks/#what-is-the-internet","text":"The internet is a continuous connection of various computer and devices that includes your phone, computer, watch, and doorbell. They are all connected through various means including coax, CAT5, fiber, WiFi, bluetooth, 3G, 4G, LTE, & 5G. Through all of these connections and the millions of devices they connect to the internet is created. But this still doesn't answer our question: \"How does it work??\"","title":"What is the Internet?"},{"location":"module-2/howTheInternetWorks/#how-does-it-work","text":"In order for these devices to talk to one another they must rely on a series of steps that detail how, when, and what data transfers look like. There's a word, we don't often hear, called protocol that refers to a series of agreed upon steps taken when something happens as in: \"Firemen have a protocol for leaving the firehouse and responding to a fire.\" The internet and its devices depend on an agreed about series of steps and organization of data to ensure that your computer knows how to interpret the information sent to it from Target or Netflix. This protocol is called HTTP or HTTPS, yes the prefix in your browser's address bar.(Go look.) HTTP/HTTPS stands for Hypertext Transfer Protocol (secure) . This protocol, or series of agreed upon steps and how data transfers look, is what computers/machines use when they need to move data between one another. While this course will not dig into all the technical details of HTTP(S) we will learn much more about this protocol in 311 when we learn how to plan, design, and build databases and servers(computers without screens/The Cloud). For now, it's enough to know that what we will be learning in this 101 course, HTML, JS, & CSS, are languages that create data that fits within the HTTProtocol and represent to a web browser(Safari, Chrome, etc...) what content we want on our pages, what our pages will look like and how they interact with people(users).","title":"How Does it Work?"},{"location":"module-2/htmlElements/","text":"The Body Object & The Elements of Web Pages Now that we understand a bit about Requests and Response objects and have our Req/Res Drawing handy let's examine where we've been working for these past few weeks. We'll be referencing the code below because it is the minimum amount of code needed to build a web page. All other HTML elements/objects and their properties, methods, & events will stem from this basic code. You can quickly generate this boilerplate code by going to VS Code, then creating an index.html file and typing on the first line: html:5 + Enter . Go ahead and try it. Create folder called 101-onlineClothingStore and create an index.html file you can use to follow along with in this lesson and revisit in a few upcoming lessons. I'll wait. 1 2 3 4 5 6 7 8 9 10 11 12 13 <!-- index.html --> <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > </ body > </ html > index.html In most of the projects you've built, you've been working in a file called index.html . The name of this file is incredibly important because it is the default file that is served FIRST. index.html is the root file for ALL websites. When you navigate to Facebook.com or Target.com you will receive their index.html file. If you click on links to go to other page you'll be given other pages like: about.html or termsofagreement.html . You are allowed to name your .html files whatever you want but the very first file you want served must be named: index.html and in the root directory/folder, meaning it can not be hidden in another folder, it must be at the top-level of the entire project's folder. Furthermore, the .html extension denotes a file written in HTML code while .css denotes CSS code and .js denotes JavaScript code. There's no requirement for you to use the name index for CSS or JS files but it may be helpful to you as a developer to name your files similarly so they can be grouped together in your mind and organized in folders. For instance, index-styles.css and index-scripts.js might be styles and scripts used only on the index.html file while about-styles.css and about-scripts.js might be used only on the about.html file. You'll figure it out as you go! DOCTYPE Tag At the very top of all HTML files we see this strange looking, self-closing tag : <!DOCTYPE html> . This is a hold-over from older versions of the HTML language. It was originally used to declare the type of this document is (\"HTML\" and not \"XML\"), as well as, the version of HTML it's written in but now everyone uses HTML5+ so we only have to write html to declare that the document the computer is going to read is in HTML5. It also communicates to the browser to build a Document object. Remember, code is used for communication . In this case, this bit of code is communicating to the browser, \"Hey, inside your Window object go ahead and create a Document object so we can build some more objects inside of it.\" To us, humans, we can read this code and visually imagine a Document object being built with other objects to be added as we go along. See a version of this object modeling below!! W3S Docs - doctype Element html Element The next bit of code we see in <html></html> . This code represents the html object. It is what's know as the root element/object . It's the actual Document Object that's being rendered on your screen. We call it the root element because all other elements/objects are children or descendants of it including Head and Body and all the elements we'll build inside them. This is the beginning(the root ) of our Document Object Model , the first object that all other objects get put inside of; hence the moniker: \"Mother of All Objects\". The second takeaway here is to make sure you define the human speaking language you're page is written in. For instances, <html lang=\"en\"> stands for English while <html lang=\"fr\"> would stand for French. You can find all the Global Languages codes here . W3S Docs - html Element Head Element As discussed earlier, the <head> element contains machine-readable information ( metadata ) about the documents content, like its title(the bit you see in the tab of your browser), scripts(JS) see note , and style sheets(CSS). The elements/objects that go inside <head> are: <base> - create base URLs for all links on a page (we'll learn about this later) <link> - used to tell the browser where to find CSS files that define styles/the way our page is supposed to look <meta> - multi-purpose including viewport sizing, Search Engine keywords, web services, and data about data (metadata); it contains information about the page. This includes information about styles, scripts, and data to help software (search engines, browsers, etc.) use and render the page. <style> - an older and abandoned way of including styling to a page; use <link> element instead <title> - the words that are displayed in the tab at the top of your browser Aside from the content between the opening and closing tags of the <title></title> element/object, none of the code in the <head> element/object is displayed to the user. It is only read by the browser to know how to display the <body> and its content. NOTE: Before going any further we need to clear up some terminology so we're all on the same page and can stop reading multiple words that refer to the same thing. So far we know that computers use objects to store information. So to a computer, everything is an object. But in the HTML language, we often say the word \"element\". As in the <body></body> element has an opening-tag : <body> and a closing-tag : </body> . Together they create an HTML Element called the Body. This is just a language-specific way to describe an object. In HTML we say element instead of object . But as we dig into JavaScript and other languages we only say the word Object . Both are one and the same as far as the computer knows, they're just building blocks with their own properties, methods, and events. \"Element\" is the HTML way of saying \"Object\" but because Elements are Objects that have visual representations on the screen we call them, Elements. From now on, if we're talking in HTML we'll use the word \" Element \" but just know in your mind it's the same thing as an Object . Just a thing with properties, methods, and events. W3S Docs - Head Element ** NOTE: Usually scripts(.js files) are linked to HTML files at the bottom of the Body with a <script href=\"\"> element but with the new defer keyword it is acceptable to link your scripts in the Head element now. Body Element Finally, we come to the exciting element: The Body Element! Inside the Body Element is where ALL of the contents of a page live. Whatever page you navigate to on the web, you are viewing the contents of the page. Try it. Go to https://developer.mozilla.org/en-US/docs/Web/HTML/Element and open the Chrome Developer Tools (DevTools). Right-click > inspect > then click on the Console tab. Where the cursor's flashing, type or copy/paste this line of code: document.head.parentNode.removeChild(document.head); and press ENTER. You should see a significant change in the appearance of the page. This is because you just removed the Head Element from the document and the Head Element contains links to stylesheets. The code you just wrote is a line of JavaScript that says, \"Hey Console, go the document object and access its Head object, then find the property parentNode on the Head object. From there, invoke the removeChild method so the Head removes itself.\" It's a little lengthy but it gets the job done. Now that we can see the content clearly without all that CSS in the way. Let's talk about it. Click on the tiny button in the top-left with the arrow or type CMD + SHIFT + C (mac)/Ctrl + SHIFT + C(Windows). Now move your mouse along the page to see all the elements of the page highlight as you hover over them. NOTE: If the elements are not highlighting repeat the previous instructions. You may have turned them off when they were already on. Move your cursor around until you can find the Header Element. How many Article Elements can you find? Can you find the HTML element? All of these elements are various building blocks (Objects) that were arranged in a certain way to build this page. Check it out: Back in the Console type: document.querySelectorAll(\"h1\").length + ENTER. What number was returned? You should have gotten 1 because there is only 1 <h1> element and there should only ever be 1 <h1> on any page! Try it again. Type: document.querySelectorAll(\"a\").length How many Anchor elements are there? What about document.querySelectorAll(\"article\").length ? Go ahead and change the argument between the () to any of the elements you see on the page or currently know about to see how many there are on the entire page. Do you know what this script is doing? Can you read it? It goes like this: \"Hey Console, ask the Document object to invoke its \"querySelectorAll\" method with \"a\" as its argument to find all Anchor elements, then give us the value of the length property on the object that method returns.\" The querySelectorAll method selects/finds all elements that match the argument you pass into. Give it \"h1\" and it'll return 1, give it \"section\" and it'll return 1, \"a\" will return 481. Go ahead and try any or all of the 115 different HTML elements to see what you find! W3S Docs - Body Element W3S Docs - .querySelectorAll() Method Indentation Code is used to communicate programming intentions to a computer but the computer doesn't have eyes it just has 0s and 1s so space/whitespace doesn't matter to it. In fact, when your HTML, CSS, and JS code files are prepared for a production environment (open for the world to see) they are minified which means all of the whitespace is removed including space between words, space between lines of code, and indentations. Your files will be minified/compress so they are faster for the computer to run and lighter for the internet to transfer. So why indentation? Because code is also used to communicate to humans, we use indentation to organize objects; or rather representation of objects in our code. When you auto-generated your boilerplate HTML earlier there likely wasn't any indentation before the head and body elements/objects but in this code example there is. This extra whitespace is to help you start seeing these different objects using different vertical layers, indentation . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 <!-- index.html --> <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > < header ></ header > < main > < h1 > Hello World </ h1 > < section ></ section > < section ></ section > </ main > < footer ></ footer > </ body > </ html > The html element is the the top-level/root element so it is slammed up against the far-left side of file. But head and body are direct descendants of html and siblings to one-another; therefore they are indented one tab (2-4 spaces). Objects directly inside the head and body are thusly tabbed in again: meta , meta , and title . These element can be described as Siblings Elements . In the body we see some new elements. Can you guess which elements are direct descendants of the body element and siblings to one another? In Summary: The Building Blocks of a Web Developer All web pages and sites are built with the same HTML Elements(objects). These are our building blocks as web developers. Learning about them and their properties, methods, and events is what we will be doing in this course. In the next lesson we'll break the surface of how to capture interactions between humans and computers and how to give instructions to the computer when those Events/interactions occur. W3S Docs - HTML Events NOTE: When you see these links ^ saying something about \"Docs\" or \"Know Your Docs\" you should bookmark them in a bookmarks folder called HTML Docs or CSS Docs or JS Docs for the language they relate to. Documentation is one of the top three tools of developers. Every developer depends on them because there's so much \"invisible\" stuff to learn we mere-humans can't remember it all. What we can do is spend our energy creatively building with these technologies and relying on documentation(docs) to help us find the path when we're lost and exploring. Know Your Docs W3S Docs - doctype Element W3S Docs - html Element W3S Docs - Head Element W3S Docs - Body Element W3S Docs - HTML Events W3S Docs - .querySelectorAll() Method","title":"HTML Elements"},{"location":"module-2/htmlElements/#the-body-object-the-elements-of-web-pages","text":"Now that we understand a bit about Requests and Response objects and have our Req/Res Drawing handy let's examine where we've been working for these past few weeks. We'll be referencing the code below because it is the minimum amount of code needed to build a web page. All other HTML elements/objects and their properties, methods, & events will stem from this basic code. You can quickly generate this boilerplate code by going to VS Code, then creating an index.html file and typing on the first line: html:5 + Enter . Go ahead and try it. Create folder called 101-onlineClothingStore and create an index.html file you can use to follow along with in this lesson and revisit in a few upcoming lessons. I'll wait. 1 2 3 4 5 6 7 8 9 10 11 12 13 <!-- index.html --> <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > </ body > </ html >","title":"The Body Object &amp; The Elements of Web Pages"},{"location":"module-2/htmlElements/#indexhtml","text":"In most of the projects you've built, you've been working in a file called index.html . The name of this file is incredibly important because it is the default file that is served FIRST. index.html is the root file for ALL websites. When you navigate to Facebook.com or Target.com you will receive their index.html file. If you click on links to go to other page you'll be given other pages like: about.html or termsofagreement.html . You are allowed to name your .html files whatever you want but the very first file you want served must be named: index.html and in the root directory/folder, meaning it can not be hidden in another folder, it must be at the top-level of the entire project's folder. Furthermore, the .html extension denotes a file written in HTML code while .css denotes CSS code and .js denotes JavaScript code. There's no requirement for you to use the name index for CSS or JS files but it may be helpful to you as a developer to name your files similarly so they can be grouped together in your mind and organized in folders. For instance, index-styles.css and index-scripts.js might be styles and scripts used only on the index.html file while about-styles.css and about-scripts.js might be used only on the about.html file. You'll figure it out as you go!","title":"index.html"},{"location":"module-2/htmlElements/#doctype-tag","text":"At the very top of all HTML files we see this strange looking, self-closing tag : <!DOCTYPE html> . This is a hold-over from older versions of the HTML language. It was originally used to declare the type of this document is (\"HTML\" and not \"XML\"), as well as, the version of HTML it's written in but now everyone uses HTML5+ so we only have to write html to declare that the document the computer is going to read is in HTML5. It also communicates to the browser to build a Document object. Remember, code is used for communication . In this case, this bit of code is communicating to the browser, \"Hey, inside your Window object go ahead and create a Document object so we can build some more objects inside of it.\" To us, humans, we can read this code and visually imagine a Document object being built with other objects to be added as we go along. See a version of this object modeling below!! W3S Docs - doctype Element","title":"DOCTYPE Tag"},{"location":"module-2/htmlElements/#html-element","text":"The next bit of code we see in <html></html> . This code represents the html object. It is what's know as the root element/object . It's the actual Document Object that's being rendered on your screen. We call it the root element because all other elements/objects are children or descendants of it including Head and Body and all the elements we'll build inside them. This is the beginning(the root ) of our Document Object Model , the first object that all other objects get put inside of; hence the moniker: \"Mother of All Objects\". The second takeaway here is to make sure you define the human speaking language you're page is written in. For instances, <html lang=\"en\"> stands for English while <html lang=\"fr\"> would stand for French. You can find all the Global Languages codes here . W3S Docs - html Element","title":"html Element"},{"location":"module-2/htmlElements/#head-element","text":"As discussed earlier, the <head> element contains machine-readable information ( metadata ) about the documents content, like its title(the bit you see in the tab of your browser), scripts(JS) see note , and style sheets(CSS). The elements/objects that go inside <head> are: <base> - create base URLs for all links on a page (we'll learn about this later) <link> - used to tell the browser where to find CSS files that define styles/the way our page is supposed to look <meta> - multi-purpose including viewport sizing, Search Engine keywords, web services, and data about data (metadata); it contains information about the page. This includes information about styles, scripts, and data to help software (search engines, browsers, etc.) use and render the page. <style> - an older and abandoned way of including styling to a page; use <link> element instead <title> - the words that are displayed in the tab at the top of your browser Aside from the content between the opening and closing tags of the <title></title> element/object, none of the code in the <head> element/object is displayed to the user. It is only read by the browser to know how to display the <body> and its content. NOTE: Before going any further we need to clear up some terminology so we're all on the same page and can stop reading multiple words that refer to the same thing. So far we know that computers use objects to store information. So to a computer, everything is an object. But in the HTML language, we often say the word \"element\". As in the <body></body> element has an opening-tag : <body> and a closing-tag : </body> . Together they create an HTML Element called the Body. This is just a language-specific way to describe an object. In HTML we say element instead of object . But as we dig into JavaScript and other languages we only say the word Object . Both are one and the same as far as the computer knows, they're just building blocks with their own properties, methods, and events. \"Element\" is the HTML way of saying \"Object\" but because Elements are Objects that have visual representations on the screen we call them, Elements. From now on, if we're talking in HTML we'll use the word \" Element \" but just know in your mind it's the same thing as an Object . Just a thing with properties, methods, and events. W3S Docs - Head Element ** NOTE: Usually scripts(.js files) are linked to HTML files at the bottom of the Body with a <script href=\"\"> element but with the new defer keyword it is acceptable to link your scripts in the Head element now.","title":"Head Element"},{"location":"module-2/htmlElements/#body-element","text":"Finally, we come to the exciting element: The Body Element! Inside the Body Element is where ALL of the contents of a page live. Whatever page you navigate to on the web, you are viewing the contents of the page. Try it. Go to https://developer.mozilla.org/en-US/docs/Web/HTML/Element and open the Chrome Developer Tools (DevTools). Right-click > inspect > then click on the Console tab. Where the cursor's flashing, type or copy/paste this line of code: document.head.parentNode.removeChild(document.head); and press ENTER. You should see a significant change in the appearance of the page. This is because you just removed the Head Element from the document and the Head Element contains links to stylesheets. The code you just wrote is a line of JavaScript that says, \"Hey Console, go the document object and access its Head object, then find the property parentNode on the Head object. From there, invoke the removeChild method so the Head removes itself.\" It's a little lengthy but it gets the job done. Now that we can see the content clearly without all that CSS in the way. Let's talk about it. Click on the tiny button in the top-left with the arrow or type CMD + SHIFT + C (mac)/Ctrl + SHIFT + C(Windows). Now move your mouse along the page to see all the elements of the page highlight as you hover over them. NOTE: If the elements are not highlighting repeat the previous instructions. You may have turned them off when they were already on. Move your cursor around until you can find the Header Element. How many Article Elements can you find? Can you find the HTML element? All of these elements are various building blocks (Objects) that were arranged in a certain way to build this page. Check it out: Back in the Console type: document.querySelectorAll(\"h1\").length + ENTER. What number was returned? You should have gotten 1 because there is only 1 <h1> element and there should only ever be 1 <h1> on any page! Try it again. Type: document.querySelectorAll(\"a\").length How many Anchor elements are there? What about document.querySelectorAll(\"article\").length ? Go ahead and change the argument between the () to any of the elements you see on the page or currently know about to see how many there are on the entire page. Do you know what this script is doing? Can you read it? It goes like this: \"Hey Console, ask the Document object to invoke its \"querySelectorAll\" method with \"a\" as its argument to find all Anchor elements, then give us the value of the length property on the object that method returns.\" The querySelectorAll method selects/finds all elements that match the argument you pass into. Give it \"h1\" and it'll return 1, give it \"section\" and it'll return 1, \"a\" will return 481. Go ahead and try any or all of the 115 different HTML elements to see what you find! W3S Docs - Body Element W3S Docs - .querySelectorAll() Method","title":"Body Element"},{"location":"module-2/htmlElements/#indentation","text":"Code is used to communicate programming intentions to a computer but the computer doesn't have eyes it just has 0s and 1s so space/whitespace doesn't matter to it. In fact, when your HTML, CSS, and JS code files are prepared for a production environment (open for the world to see) they are minified which means all of the whitespace is removed including space between words, space between lines of code, and indentations. Your files will be minified/compress so they are faster for the computer to run and lighter for the internet to transfer. So why indentation? Because code is also used to communicate to humans, we use indentation to organize objects; or rather representation of objects in our code. When you auto-generated your boilerplate HTML earlier there likely wasn't any indentation before the head and body elements/objects but in this code example there is. This extra whitespace is to help you start seeing these different objects using different vertical layers, indentation . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 <!-- index.html --> <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > < header ></ header > < main > < h1 > Hello World </ h1 > < section ></ section > < section ></ section > </ main > < footer ></ footer > </ body > </ html > The html element is the the top-level/root element so it is slammed up against the far-left side of file. But head and body are direct descendants of html and siblings to one-another; therefore they are indented one tab (2-4 spaces). Objects directly inside the head and body are thusly tabbed in again: meta , meta , and title . These element can be described as Siblings Elements . In the body we see some new elements. Can you guess which elements are direct descendants of the body element and siblings to one another?","title":"Indentation"},{"location":"module-2/htmlElements/#in-summary-the-building-blocks-of-a-web-developer","text":"All web pages and sites are built with the same HTML Elements(objects). These are our building blocks as web developers. Learning about them and their properties, methods, and events is what we will be doing in this course. In the next lesson we'll break the surface of how to capture interactions between humans and computers and how to give instructions to the computer when those Events/interactions occur. W3S Docs - HTML Events NOTE: When you see these links ^ saying something about \"Docs\" or \"Know Your Docs\" you should bookmark them in a bookmarks folder called HTML Docs or CSS Docs or JS Docs for the language they relate to. Documentation is one of the top three tools of developers. Every developer depends on them because there's so much \"invisible\" stuff to learn we mere-humans can't remember it all. What we can do is spend our energy creatively building with these technologies and relying on documentation(docs) to help us find the path when we're lost and exploring.","title":"In Summary: The Building Blocks of a Web Developer"},{"location":"module-2/htmlElements/#know-your-docs","text":"W3S Docs - doctype Element W3S Docs - html Element W3S Docs - Head Element W3S Docs - Body Element W3S Docs - HTML Events W3S Docs - .querySelectorAll() Method","title":"Know Your Docs"},{"location":"module-2/imageElement/","text":"The Image Element \u201cHope can be a powerful force. Maybe there's no actual magic in it, but when you know what you hope for most and hold it like a light within you, you can make things happen, almost like magic.\u201d \u2015Laini Taylor, Daughter of Smoke & Bone HTML is the only language that web content is encoded in. No matter what programming language you work in, if you're serving your software through the web you'll be encoding that software's content to the user in HTML. Because HTML is the only language for the web, it has to be super flexible to handle all of the crazy cool stuff we see on the web. Just stop and think for a moment about some of the coolest websites you've seen. All of that was built in HTML!! So when you're wondering when you'll know everything there is to know about HTML, well maybe never...but the upside is that there is always something to learn! In this lesson, we'll spend time on the Image Element, <img /> because during class and your upcoming career you'll need to display the images. We won't cover all of the \"special HTML elements\" a.k.a Replaced Elements : in this lesson like: <video> , <embed> and <iframe> but just know if you're wanting to build videos into a web page you can read the docs on these two elements and all the other HTML elements!! Using the Image Element You've probably already recognized the Image Element, <img /> , from a Learn-to-Code event or from your Portfolio Landing page. This takes the fear out of learning yet another Object-Thing ! To begin, the <img /> known as a self-closing or void element because it doesn't keep its content between the opening- and closing-tags like most other HTML elements do, instead it uses two properties/ attributes to source its content: src=\"\" - the source of the actual image in the form of a URL or pathname alt=\"\" - A description used to replace the image if a person who is blind is using your web page. Take a look at the following code snippet: 1 2 3 4 < img src = \"https://images.unsplash.com/photo-1590004987778-bece5c9adab6?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1502&q=80\" alt = \"Grapefruit wedges spaced evenly apart on orange background.\" /> Similar to src= attribute on the Script Element, <script src=\"\"> , the Image element sources its image with the same attribute, src=\"\" . While the alt=\"\" attribute stands for \"alternative text\" and is used in place of the image when it is not being displayed or when someone with a visual impairment visits your page. This \"alt\" text is required for screen readers\u2014accessibility devices used primarily by the visually impaired\u2014to be able to communicate image content to their users. For this reason, you should put lengthy and descriptive alternative text so that screen readers can actually communicate what is in the image. NOTE: It's important to know that a pathname and a URL are essentially the same thing but differ in a small but large ways: a pathname refers to a path from one file on your computer to another file on your computer, but a URL refers to a path from a file on your computer to a file on another computer that is connected to your computer through the internet. Both do the same thing because the storing structure of your computer, my computer, and everyone else's computers are the same. However, with a URL we use HyperText Transfer Protocol or HTTP(S). W3S Docs - Image Element Styling Images Styling Images can be tricky because they are a \"special element\" known as a Replaced Element . This means they don't quite follow the same CSS rules as most other elements. So the best way style an image is to put it inside a Div element and style the Div: The HTML 1 2 3 4 5 < div id = \"image-container\" > < img src = \"https://cdn.pixabay.com/photo/2016/03/27/19/31/fashion-1283863_960_720.jpg\" alt = \"folded blue and white knit sweater on white background\" > </ div > The CSS 1 2 3 4 5 # image-container { margin : 1 % auto ; text-align : center ; padding : 5 % auto ; } In addition to styling an Image with a \"wrapper\" Div , Image elements have two special properties on them that control the content(the actual image) held within the Image Element object. They're called: object-fit - determines the size of the content(image) inside the Image object/element. object-position - determines the position of the content(image) inside or outside the Image object/element. The following code snippet would be paired with the code snippets you just saw above: 1 2 3 4 5 6 7 /* styles.css file */ # image-container > img { object-fit : contain ; object-position : 50 % 50 % ; width : 250 px ; /* <-- image height is proportionally controlled with the width property */ } Try it. Go to the MDN Docs on object-position & object-fit and play! Image as Background Technique An alternative to styling an Image Element is setting the background of a Div Element to the image you want displayed: The HTML 1 2 <!-- HTML --> < div id = 'elephant-pic' ></ div > The CSS 1 2 3 4 5 6 7 8 /* the CSS */ . elephant-pic { width : 300 pt ; height : 200 pt ; background-image : url ( ./images/Elephant-At-Sunrise.png ); background-size : cover ; background-repeat : no-repeat ; } The Result This last technique is convenient but comes with the drawback of not being Semantic . For now, that's shouldn't be of high concern to you though. The videos below demonstrate how you would use both techniques. Additional Resources on Styling Images YT, Dani Krossing - Inserting Images YT, Chris Walker - IMG for Images Know Your Docs MDN Docs - Replaced Elements W3S Docs - Image Element MDN Docs - object-position MDN Docs - object-fit","title":"Image Element"},{"location":"module-2/imageElement/#the-image-element","text":"\u201cHope can be a powerful force. Maybe there's no actual magic in it, but when you know what you hope for most and hold it like a light within you, you can make things happen, almost like magic.\u201d \u2015Laini Taylor, Daughter of Smoke & Bone HTML is the only language that web content is encoded in. No matter what programming language you work in, if you're serving your software through the web you'll be encoding that software's content to the user in HTML. Because HTML is the only language for the web, it has to be super flexible to handle all of the crazy cool stuff we see on the web. Just stop and think for a moment about some of the coolest websites you've seen. All of that was built in HTML!! So when you're wondering when you'll know everything there is to know about HTML, well maybe never...but the upside is that there is always something to learn! In this lesson, we'll spend time on the Image Element, <img /> because during class and your upcoming career you'll need to display the images. We won't cover all of the \"special HTML elements\" a.k.a Replaced Elements : in this lesson like: <video> , <embed> and <iframe> but just know if you're wanting to build videos into a web page you can read the docs on these two elements and all the other HTML elements!!","title":"The Image Element"},{"location":"module-2/imageElement/#using-the-image-element","text":"You've probably already recognized the Image Element, <img /> , from a Learn-to-Code event or from your Portfolio Landing page. This takes the fear out of learning yet another Object-Thing ! To begin, the <img /> known as a self-closing or void element because it doesn't keep its content between the opening- and closing-tags like most other HTML elements do, instead it uses two properties/ attributes to source its content: src=\"\" - the source of the actual image in the form of a URL or pathname alt=\"\" - A description used to replace the image if a person who is blind is using your web page. Take a look at the following code snippet: 1 2 3 4 < img src = \"https://images.unsplash.com/photo-1590004987778-bece5c9adab6?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1502&q=80\" alt = \"Grapefruit wedges spaced evenly apart on orange background.\" /> Similar to src= attribute on the Script Element, <script src=\"\"> , the Image element sources its image with the same attribute, src=\"\" . While the alt=\"\" attribute stands for \"alternative text\" and is used in place of the image when it is not being displayed or when someone with a visual impairment visits your page. This \"alt\" text is required for screen readers\u2014accessibility devices used primarily by the visually impaired\u2014to be able to communicate image content to their users. For this reason, you should put lengthy and descriptive alternative text so that screen readers can actually communicate what is in the image. NOTE: It's important to know that a pathname and a URL are essentially the same thing but differ in a small but large ways: a pathname refers to a path from one file on your computer to another file on your computer, but a URL refers to a path from a file on your computer to a file on another computer that is connected to your computer through the internet. Both do the same thing because the storing structure of your computer, my computer, and everyone else's computers are the same. However, with a URL we use HyperText Transfer Protocol or HTTP(S). W3S Docs - Image Element","title":"Using the Image Element"},{"location":"module-2/imageElement/#styling-images","text":"Styling Images can be tricky because they are a \"special element\" known as a Replaced Element . This means they don't quite follow the same CSS rules as most other elements. So the best way style an image is to put it inside a Div element and style the Div: The HTML 1 2 3 4 5 < div id = \"image-container\" > < img src = \"https://cdn.pixabay.com/photo/2016/03/27/19/31/fashion-1283863_960_720.jpg\" alt = \"folded blue and white knit sweater on white background\" > </ div > The CSS 1 2 3 4 5 # image-container { margin : 1 % auto ; text-align : center ; padding : 5 % auto ; } In addition to styling an Image with a \"wrapper\" Div , Image elements have two special properties on them that control the content(the actual image) held within the Image Element object. They're called: object-fit - determines the size of the content(image) inside the Image object/element. object-position - determines the position of the content(image) inside or outside the Image object/element. The following code snippet would be paired with the code snippets you just saw above: 1 2 3 4 5 6 7 /* styles.css file */ # image-container > img { object-fit : contain ; object-position : 50 % 50 % ; width : 250 px ; /* <-- image height is proportionally controlled with the width property */ } Try it. Go to the MDN Docs on object-position & object-fit and play!","title":"Styling Images"},{"location":"module-2/imageElement/#image-as-background-technique","text":"An alternative to styling an Image Element is setting the background of a Div Element to the image you want displayed: The HTML 1 2 <!-- HTML --> < div id = 'elephant-pic' ></ div > The CSS 1 2 3 4 5 6 7 8 /* the CSS */ . elephant-pic { width : 300 pt ; height : 200 pt ; background-image : url ( ./images/Elephant-At-Sunrise.png ); background-size : cover ; background-repeat : no-repeat ; } The Result This last technique is convenient but comes with the drawback of not being Semantic . For now, that's shouldn't be of high concern to you though. The videos below demonstrate how you would use both techniques.","title":"Image as Background Technique"},{"location":"module-2/imageElement/#additional-resources-on-styling-images","text":"YT, Dani Krossing - Inserting Images YT, Chris Walker - IMG for Images","title":"Additional Resources on Styling Images"},{"location":"module-2/imageElement/#know-your-docs","text":"MDN Docs - Replaced Elements W3S Docs - Image Element MDN Docs - object-position MDN Docs - object-fit","title":"Know Your Docs"},{"location":"module-2/inputElement/","text":"The Input & Creating Objects With this new knowledge, you are able to build some pretty awesome stuff already, even if you don't recognize that yet. Yet, before you take on the world let's learn just two more skills: Input elements and how to create new Elements. Using the Input Element The first is actually very easy and will boost your skillset tremendously! The input element is by far the most used element on the web simply because it can be for so many things: checkboxes, radio buttons, email, password, paragraph, sliders, file uploaders, color pickers, and more!! The full list can be found at W3S Docs - Input Element . Its default mode is a short input box: <input /> . But using the type= attribute we can change it to be any of the types of input listed above including a button! Try it. In the same file create an <input type=\"submit\"></button element. The reason we have this option is that Input Elements normally go inside the Form Element and we need to distinguish them as submit buttons & reset buttons versus input type inputs. We'll get into the Form Element soon but for right now let's figure out how we can use the Input Element to take input from a human to later do something with it! The Input element, just like the Button element has many Events we can use to capture interactions and pass along data. The event we'll use for this example is the onkeydown event which gets fired when a human-user presses any key down while inside the input field. Other events get fired including onkeyup & onkeypress , you can study the full list of Global Events here, aka Event Listeners . In the same fashion, we made our Buttons call a function when they were clicked let's make our input element call a function when a human-user's key is lifted. 1 2 3 4 5 6 7 8 9 10 11 12 13 <!-- 101-onlineClothingStore/index.html --> < body > <!-- ...more code here.. --> < input value = \"\" onkeyup = \"setValue(this.value)\" /> < script > // and more JS code is here... function setValue ( input ) { console . log ({ input }) } </ script > </ body > NOTE: To view your Browser's Console object you'll need to open your DevTools (Mac) Cmd + Option + J ; (Windows) Ctrl + Shift + J ; or just right-click >> Inspect >> Console Everything works well? Can you see your input in the Console? The only new bits of syntax you see here are this. , value=\" , and {input} . this is actually pretty easy, it refers to the exact object that is calling the function. If we created a new input and it called the same function the computer wouldn't know what to do because it wouldn't know how to call it. So we use the keyword this to communicate that the context were calling the function from is this object and not that object or any other object besides this object. value= is also easy because it's an attribute just like the other attributes we've been writing and refers to the property value on that object. Its current value is an empty string , \"\" but as we type, the value will change under-the-hood. To see this change we need to pass that value along to a function to do something with it. The last bit is super easy. You can see the input appear in the console without the {} but with the curly-braces we just see the data in a cleaner format: an object with a key called input that has a value of whatever the input is. If this is confusing, just remove the {} around {input} . Using Variables To Hold Values We already know how to create variables with the let keyword and we know that we need to use variables to hold on to pieces of data. Let's create a variable that can hold onto our user's input so we can do other things besides logging it in the Console object... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <!-- 101-onlineClothingStore/index.html --> < body > <!-- more code is here.. --> < input value = \"\" onkeyup = \"setValue(this.value)\" /> < script > let usersInput ; // and more JS code is here... function setValue ( input ) { usersInput = input console . log ({ usersInput }) } </ script > </ body > Note the changes in the code: We're now saving our data to a variable and logging the value of the variable, usersInput instead of directly logging what comes into the function's parameter , input . Additional Resources Article, Geeks4Geeks - Button vs Input","title":"Input Element"},{"location":"module-2/inputElement/#the-input-creating-objects","text":"With this new knowledge, you are able to build some pretty awesome stuff already, even if you don't recognize that yet. Yet, before you take on the world let's learn just two more skills: Input elements and how to create new Elements.","title":"The Input &amp; Creating Objects"},{"location":"module-2/inputElement/#using-the-input-element","text":"The first is actually very easy and will boost your skillset tremendously! The input element is by far the most used element on the web simply because it can be for so many things: checkboxes, radio buttons, email, password, paragraph, sliders, file uploaders, color pickers, and more!! The full list can be found at W3S Docs - Input Element . Its default mode is a short input box: <input /> . But using the type= attribute we can change it to be any of the types of input listed above including a button! Try it. In the same file create an <input type=\"submit\"></button element. The reason we have this option is that Input Elements normally go inside the Form Element and we need to distinguish them as submit buttons & reset buttons versus input type inputs. We'll get into the Form Element soon but for right now let's figure out how we can use the Input Element to take input from a human to later do something with it! The Input element, just like the Button element has many Events we can use to capture interactions and pass along data. The event we'll use for this example is the onkeydown event which gets fired when a human-user presses any key down while inside the input field. Other events get fired including onkeyup & onkeypress , you can study the full list of Global Events here, aka Event Listeners . In the same fashion, we made our Buttons call a function when they were clicked let's make our input element call a function when a human-user's key is lifted. 1 2 3 4 5 6 7 8 9 10 11 12 13 <!-- 101-onlineClothingStore/index.html --> < body > <!-- ...more code here.. --> < input value = \"\" onkeyup = \"setValue(this.value)\" /> < script > // and more JS code is here... function setValue ( input ) { console . log ({ input }) } </ script > </ body > NOTE: To view your Browser's Console object you'll need to open your DevTools (Mac) Cmd + Option + J ; (Windows) Ctrl + Shift + J ; or just right-click >> Inspect >> Console Everything works well? Can you see your input in the Console? The only new bits of syntax you see here are this. , value=\" , and {input} . this is actually pretty easy, it refers to the exact object that is calling the function. If we created a new input and it called the same function the computer wouldn't know what to do because it wouldn't know how to call it. So we use the keyword this to communicate that the context were calling the function from is this object and not that object or any other object besides this object. value= is also easy because it's an attribute just like the other attributes we've been writing and refers to the property value on that object. Its current value is an empty string , \"\" but as we type, the value will change under-the-hood. To see this change we need to pass that value along to a function to do something with it. The last bit is super easy. You can see the input appear in the console without the {} but with the curly-braces we just see the data in a cleaner format: an object with a key called input that has a value of whatever the input is. If this is confusing, just remove the {} around {input} .","title":"Using the Input Element"},{"location":"module-2/inputElement/#using-variables-to-hold-values","text":"We already know how to create variables with the let keyword and we know that we need to use variables to hold on to pieces of data. Let's create a variable that can hold onto our user's input so we can do other things besides logging it in the Console object... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <!-- 101-onlineClothingStore/index.html --> < body > <!-- more code is here.. --> < input value = \"\" onkeyup = \"setValue(this.value)\" /> < script > let usersInput ; // and more JS code is here... function setValue ( input ) { usersInput = input console . log ({ usersInput }) } </ script > </ body > Note the changes in the code: We're now saving our data to a variable and logging the value of the variable, usersInput instead of directly logging what comes into the function's parameter , input .","title":"Using Variables To Hold Values"},{"location":"module-2/inputElement/#additional-resources","text":"Article, Geeks4Geeks - Button vs Input","title":"Additional Resources"},{"location":"module-2/introToJavaScript/","text":"Intro To JavaScript \u201cI believe that imagination is stronger than knowledge. That myth is more potent than history. That dreams are more powerful than facts. That hope always triumphs over experience. That laughter is the only cure for grief. And I believe that love is stronger than death.\u201d \u2015Robert Fulghum, All I Really Need to Know I Learned in Kindergarten: Uncommon Thoughts On Common Things Intro to JavaScript First off, JavaScript(a front-end language) is nothing even close to Java(a back-end language). Please do not confuse the two . The naming of JavaScript was a marketing tactic at the time of creation to make programmers feel comfortable with the new language and increase its popularity. This marketing ploy worked and now its the only programming language browsers can read, but, from here on out remember: Java is to JavaScript as car is to carpet . So, HTML creates a structure of \"things\", or objects/elements for us to manipulate the properties and methods of. Remember, HTML stands for Hyper Text Markup Language . This means that the elements we create with it do much more than just create text or images on a screen, they are interactive, they have properties that can be changed with CSS, and methods that can be used with JavaScript. In this way, each of these HTML elements are pieces that can be played with to do what we want. We're just learning a new language that will launch us into a new way to access and play with these Hyper-Text Elements!! So let's get to it...but first, let's take a high perspective look at what's going on.","title":"Intro to JavaScript"},{"location":"module-2/introToJavaScript/#intro-to-javascript","text":"\u201cI believe that imagination is stronger than knowledge. That myth is more potent than history. That dreams are more powerful than facts. That hope always triumphs over experience. That laughter is the only cure for grief. And I believe that love is stronger than death.\u201d \u2015Robert Fulghum, All I Really Need to Know I Learned in Kindergarten: Uncommon Thoughts On Common Things","title":"Intro To JavaScript"},{"location":"module-2/introToJavaScript/#intro-to-javascript_1","text":"First off, JavaScript(a front-end language) is nothing even close to Java(a back-end language). Please do not confuse the two . The naming of JavaScript was a marketing tactic at the time of creation to make programmers feel comfortable with the new language and increase its popularity. This marketing ploy worked and now its the only programming language browsers can read, but, from here on out remember: Java is to JavaScript as car is to carpet . So, HTML creates a structure of \"things\", or objects/elements for us to manipulate the properties and methods of. Remember, HTML stands for Hyper Text Markup Language . This means that the elements we create with it do much more than just create text or images on a screen, they are interactive, they have properties that can be changed with CSS, and methods that can be used with JavaScript. In this way, each of these HTML elements are pieces that can be played with to do what we want. We're just learning a new language that will launch us into a new way to access and play with these Hyper-Text Elements!! So let's get to it...but first, let's take a high perspective look at what's going on.","title":"Intro to JavaScript"},{"location":"module-2/ourJobAsWebDevelopers/","text":"Our Job as Web Developers At any given point of a web developer's typical work day they are doing one these three jobs: Storing Data Moving & Manipulating Data Rendering Data Data & Our Three Jobs These are the three jobs of a web developer(along with researching how to store, move, or render data ;). These three tasks might not mean much to you right now but moving forward we will use these as template for solving any problem we come across while developing web-based software. Let's clear up the meaning of these jobs so we can come back to them again and again in the future: First, data is another word for information. It's a broadly used term to describe anything that describes something else. I.e. data about you could be your age, address, phone number, email, parents, list of friends, type of car you drive, pets, books you've read, etc... Other data might include how many people have entered and exited a store within a window of time(COVID-19) or how many purchase someone has made online versus in stores. Data also includes the colors we see on our screen and scrolling effects and the font sizes. For now, all of it is data to us and we must learn to think of it as a ubiquitous term that is omnipresent in all future work. Second Storing Data has to do with holding data in a certain place whether that be a database, local storage, cookies, or a variable. Store data is critically important because we need to use that data later and computers can only do one thing at a time. (more on this later!) Next, Moving & Manipulating Data means that data has to move from storage to render or render to storage and all other place in-between. But sometimes, the data we get is hard to give to the browser so we have to kneed it a little to get the exact bits of data we want and leave the bits we don't want. Moving & Manipulating is where we'll spend the first part of this course and most of 211 learning and practicing. Finally, Rendering Data is the act of converting numbers and letters into visual and auditory elements that people(users) can see, hear, and interact with. When we say render the data, we mean, \"get it on the screen\".","title":"Our Job"},{"location":"module-2/ourJobAsWebDevelopers/#our-job-as-web-developers","text":"At any given point of a web developer's typical work day they are doing one these three jobs: Storing Data Moving & Manipulating Data Rendering Data","title":"Our Job as Web Developers"},{"location":"module-2/ourJobAsWebDevelopers/#data-our-three-jobs","text":"These are the three jobs of a web developer(along with researching how to store, move, or render data ;). These three tasks might not mean much to you right now but moving forward we will use these as template for solving any problem we come across while developing web-based software. Let's clear up the meaning of these jobs so we can come back to them again and again in the future: First, data is another word for information. It's a broadly used term to describe anything that describes something else. I.e. data about you could be your age, address, phone number, email, parents, list of friends, type of car you drive, pets, books you've read, etc... Other data might include how many people have entered and exited a store within a window of time(COVID-19) or how many purchase someone has made online versus in stores. Data also includes the colors we see on our screen and scrolling effects and the font sizes. For now, all of it is data to us and we must learn to think of it as a ubiquitous term that is omnipresent in all future work. Second Storing Data has to do with holding data in a certain place whether that be a database, local storage, cookies, or a variable. Store data is critically important because we need to use that data later and computers can only do one thing at a time. (more on this later!) Next, Moving & Manipulating Data means that data has to move from storage to render or render to storage and all other place in-between. But sometimes, the data we get is hard to give to the browser so we have to kneed it a little to get the exact bits of data we want and leave the bits we don't want. Moving & Manipulating is where we'll spend the first part of this course and most of 211 learning and practicing. Finally, Rendering Data is the act of converting numbers and letters into visual and auditory elements that people(users) can see, hear, and interact with. When we say render the data, we mean, \"get it on the screen\".","title":"Data &amp; Our Three Jobs"},{"location":"module-2/table-nthChild/","text":"Table Element + nth Child Selector \u201cIt's really a wonder that I haven't dropped all my ideals, because they seem so absurd and impossible to carry out. Yet I keep them, because in spite of everything, I still believe that people are really good at heart.\u201d \u2015Anne Frank Overview Before the days of grid and flex many developers used <table> to position elements on a \"grid-like\" structure. It was very hacky but it got the job done. Today, <table> isn't used as often but it is still a viable way to structure pieces of our page especially if we need to represent something in a table chart. We'll learn to use the <table> element and its dedicated child elements as we build our Tic Tac Toe board next class!! What Are HTML Tables But first, what is an HTML Table? Well, it looks a lot like a spreadsheet: HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 < table > < thead > < th > Company </ th > < th > Contact </ th > < th > Country </ th > </ thead > < tbody > < tr > < td > Alfreds Futterkiste </ td > < td > Maria Anders </ td > < td > Germany </ td > </ tr > < tr > < td > Centro comercial Moctezuma </ td > < td > Francisco Chang </ td > < td > Mexico </ td > </ tr > < tr > < td > Ernst Handel </ td > < td > Roland Mendel </ td > < td > Austria </ td > </ tr > < tr > < td > Island Trading </ td > < td > Helen Bennett </ td > < td > UK </ td > </ tr > < tr > < td > Laughing Bacchus Winecellars </ td > < td > Yoshi Tannamuri </ td > < td > Canada </ td > </ tr > < tr > < td > Magazzini Alimentari Riuniti </ td > < td > Giovanni Rovelli </ td > < td > Italy </ td > </ tr > </ tbody > < tfoot > Notes about the companies would go here. </ tfoot > </ table > Result The Tags of the Table So what's happening? Notice how there are HTML tags you haven't seen before like: <td> , <tr> , and <th> ? These elements are reserved for use only within the <table></table> element because the <table> element has properties reserved for those elements: <td> , <tr> , and <th> , so that each of them \"snaps\" into place when they're written inside the dedicated parent element, <table> . Check it out: the <tr> element stands for Table Row which, as you guessed, creates a row in our tables. The <th> element creates another table row but is actually called a Table Header because it labels the columns of our table. The <td> element creates the columns within each row. This element is used within the <tr></tr> element. Then, of course, there's <thead> , <tbody> , and <tfoot> which you might have guessed stand for Table Head , Table Body, and Table Footer. These elements are used as sort of a \"Parent Row\" to section off the top of the table, then the main part of table: <tbody> , and the footer of the table: <tfoot> . They are optional elements but very useful when creating an organized table. Special Attributes The child elements of <table> : <tr> and <td> have the same styling properties as the other elements you've learned about so far like border , padding , text-align and so forth. In addition to those typical properties we have the option to use the two attributes: colspan and rowspan . We might use colspan to create a header that covers multiple columns like: <th colspan=\"2\">Employee Name</th> where the first column might be the employee's first name and the second column could be their last name but we want them both to be labeled under one cell: \"Employee Name\". Essentially, it just makes that specific \"cell\" traverse or \"span\" the number of columns specified in the value. The same goes for rowspan . When using this attribute, the cell will traverse multiple rows: <tr rowspan=\"3\"> Top Three Earners: </tr> could be a cell on the far left of your table that relates to the three rows to the right of it... as in, it spans the height of three rows! A new CSS selector: :nth-child() The :nth-child() selector isn't specific to the <table> element but this is a nice place to learn about it because of the nature of a table chart: many rows and columns. With the :nth-child() pseudo selector we can select a specific number (n) of child elements. Let's say in the table we want the rows to be easier to read by having differently shaded backgrounds. In the () of :nth-child() we can specify odd and even to apply the background color we want for any number of rows that might be present in the table. The following code snippets will produce the screenshot you see below them: HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < table > < tr > < th > Firstname </ th > < th > Lastname </ th > < th > Age </ th > </ tr > < tr > < td > Jill </ td > < td > Smith </ td > < td > 50 </ td > </ tr > < tr > < td > Eve </ td > < td > Jackson </ td > < td > 94 </ td > </ tr > < tr > < td > John </ td > < td > Doe </ td > < td > 80 </ td > </ tr > </ table > CSS 1 2 3 4 5 6 7 8 9 10 11 12 table tr : nth-child ( even ) { background-color : lightgrey ; } table tr : nth-child ( odd ) { background-color : white ; } table th { background-color : black ; color : white ; } Result Did you notice in the CSS how the :nth-child() is placed on the tr element which is the one we want to be colored? Then did you notice how it was placed after the parent element: table ? If not, go back and look at how the CSS code is laid out. Try it yourself. And lastly, don't be scared of this selector. n just stands for a number to be specified, th is just a stand-in suffix for the general numbers like -nd , -rd , and -st as in \"2nd\" , \"3rd\" , and \"1st\" . But \"th\" is the most common so the developers of CSS decided on th . And -child just means its meant to be used on child elements, and with the exception of <body> , all elements are children of some other element/object. Know Your Docs As you already know, the best place to learn about everything web development - is in the docs! Here are the docs for: W3S Docs - HTML Tables W3S Docs - nth Child Selector Practice It Rebuild the :nth-child() example from above in a CodePen or a new repo. 2, Next, using a new CodePen or a new Repo build the mockup below. Start first with the top row. Then build your second row. Use a class name to color your first column in CSS Remember, break it down into smaller pieces. Can you use the <caption></caption> element to make the title of the table? How can you build the borders? Can you use Google Fonts to get a font similar to the one you see? Can you use :nth-child() to color your columns?","title":"Table and nth Child"},{"location":"module-2/table-nthChild/#table-element-nth-child-selector","text":"\u201cIt's really a wonder that I haven't dropped all my ideals, because they seem so absurd and impossible to carry out. Yet I keep them, because in spite of everything, I still believe that people are really good at heart.\u201d \u2015Anne Frank","title":"Table Element + nth Child Selector"},{"location":"module-2/table-nthChild/#overview","text":"Before the days of grid and flex many developers used <table> to position elements on a \"grid-like\" structure. It was very hacky but it got the job done. Today, <table> isn't used as often but it is still a viable way to structure pieces of our page especially if we need to represent something in a table chart. We'll learn to use the <table> element and its dedicated child elements as we build our Tic Tac Toe board next class!!","title":"Overview"},{"location":"module-2/table-nthChild/#what-are-html-tables","text":"But first, what is an HTML Table? Well, it looks a lot like a spreadsheet: HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 < table > < thead > < th > Company </ th > < th > Contact </ th > < th > Country </ th > </ thead > < tbody > < tr > < td > Alfreds Futterkiste </ td > < td > Maria Anders </ td > < td > Germany </ td > </ tr > < tr > < td > Centro comercial Moctezuma </ td > < td > Francisco Chang </ td > < td > Mexico </ td > </ tr > < tr > < td > Ernst Handel </ td > < td > Roland Mendel </ td > < td > Austria </ td > </ tr > < tr > < td > Island Trading </ td > < td > Helen Bennett </ td > < td > UK </ td > </ tr > < tr > < td > Laughing Bacchus Winecellars </ td > < td > Yoshi Tannamuri </ td > < td > Canada </ td > </ tr > < tr > < td > Magazzini Alimentari Riuniti </ td > < td > Giovanni Rovelli </ td > < td > Italy </ td > </ tr > </ tbody > < tfoot > Notes about the companies would go here. </ tfoot > </ table > Result","title":"What Are HTML Tables"},{"location":"module-2/table-nthChild/#the-tags-of-the-table","text":"So what's happening? Notice how there are HTML tags you haven't seen before like: <td> , <tr> , and <th> ? These elements are reserved for use only within the <table></table> element because the <table> element has properties reserved for those elements: <td> , <tr> , and <th> , so that each of them \"snaps\" into place when they're written inside the dedicated parent element, <table> . Check it out: the <tr> element stands for Table Row which, as you guessed, creates a row in our tables. The <th> element creates another table row but is actually called a Table Header because it labels the columns of our table. The <td> element creates the columns within each row. This element is used within the <tr></tr> element. Then, of course, there's <thead> , <tbody> , and <tfoot> which you might have guessed stand for Table Head , Table Body, and Table Footer. These elements are used as sort of a \"Parent Row\" to section off the top of the table, then the main part of table: <tbody> , and the footer of the table: <tfoot> . They are optional elements but very useful when creating an organized table.","title":"The Tags of the Table"},{"location":"module-2/table-nthChild/#special-attributes","text":"The child elements of <table> : <tr> and <td> have the same styling properties as the other elements you've learned about so far like border , padding , text-align and so forth. In addition to those typical properties we have the option to use the two attributes: colspan and rowspan . We might use colspan to create a header that covers multiple columns like: <th colspan=\"2\">Employee Name</th> where the first column might be the employee's first name and the second column could be their last name but we want them both to be labeled under one cell: \"Employee Name\". Essentially, it just makes that specific \"cell\" traverse or \"span\" the number of columns specified in the value. The same goes for rowspan . When using this attribute, the cell will traverse multiple rows: <tr rowspan=\"3\"> Top Three Earners: </tr> could be a cell on the far left of your table that relates to the three rows to the right of it... as in, it spans the height of three rows!","title":"Special Attributes"},{"location":"module-2/table-nthChild/#a-new-css-selector-nth-child","text":"The :nth-child() selector isn't specific to the <table> element but this is a nice place to learn about it because of the nature of a table chart: many rows and columns. With the :nth-child() pseudo selector we can select a specific number (n) of child elements. Let's say in the table we want the rows to be easier to read by having differently shaded backgrounds. In the () of :nth-child() we can specify odd and even to apply the background color we want for any number of rows that might be present in the table. The following code snippets will produce the screenshot you see below them: HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 < table > < tr > < th > Firstname </ th > < th > Lastname </ th > < th > Age </ th > </ tr > < tr > < td > Jill </ td > < td > Smith </ td > < td > 50 </ td > </ tr > < tr > < td > Eve </ td > < td > Jackson </ td > < td > 94 </ td > </ tr > < tr > < td > John </ td > < td > Doe </ td > < td > 80 </ td > </ tr > </ table > CSS 1 2 3 4 5 6 7 8 9 10 11 12 table tr : nth-child ( even ) { background-color : lightgrey ; } table tr : nth-child ( odd ) { background-color : white ; } table th { background-color : black ; color : white ; } Result Did you notice in the CSS how the :nth-child() is placed on the tr element which is the one we want to be colored? Then did you notice how it was placed after the parent element: table ? If not, go back and look at how the CSS code is laid out. Try it yourself. And lastly, don't be scared of this selector. n just stands for a number to be specified, th is just a stand-in suffix for the general numbers like -nd , -rd , and -st as in \"2nd\" , \"3rd\" , and \"1st\" . But \"th\" is the most common so the developers of CSS decided on th . And -child just means its meant to be used on child elements, and with the exception of <body> , all elements are children of some other element/object.","title":"A new CSS selector: :nth-child()"},{"location":"module-2/table-nthChild/#know-your-docs","text":"As you already know, the best place to learn about everything web development - is in the docs! Here are the docs for: W3S Docs - HTML Tables W3S Docs - nth Child Selector","title":"Know Your Docs"},{"location":"module-2/table-nthChild/#practice-it","text":"Rebuild the :nth-child() example from above in a CodePen or a new repo. 2, Next, using a new CodePen or a new Repo build the mockup below. Start first with the top row. Then build your second row. Use a class name to color your first column in CSS Remember, break it down into smaller pieces. Can you use the <caption></caption> element to make the title of the table? How can you build the borders? Can you use Google Fonts to get a font similar to the one you see? Can you use :nth-child() to color your columns?","title":"Practice It"},{"location":"module-2/theDOM-jsIntro-pt2/","text":"The DOM + JS Intro Part Two The Document The document or document is the Mother of All Objects . It is where your body , header , footer , title , meta , and all other HTML elements are created. This \"Mother of All Objects\" has a whole list of properties and methods we can use, some of which you'll see in the video below. In this video , we'll cover a few things in a slow and careful way. Take your time through it and make sure you re-create the task on your own either in a new repo or a codePen. The following will make more sense if you watch the video above first. To begin, a Method is a special type of Property; in that, a property just holds a value like: font-size: 12pt . While a method looks the same as a property it is actually a Function stored in the value of the property name, i.e. write: function(){// code that writes to the document} . This subtle difference helps us understand what we're talking about in the future. Property - holds a value that represents a particular attribute. Method - a functionality of the object stored in an accessible location. Event Listener - a special function that \"listens\" for certain events, or interactions, in order to trigger a specified action when the \"event\" happens. In either case, when we access a property or a method we use Dot-Notation , aka the Member Operator . It looks like this: . . Seriously, to get the property write() on the Document Object, we type document.write() . Remember, the Document Object Model is a way we, as humans, can visualize the way these HTML Elements are written under-the-hood. NOTE: The following code snippet is not real code, just a representation that can help you visualize what methods look like on the Document Object: 1 2 3 4 5 6 7 8 9 10 docume nt = { addEve nt Lis tener : // a fun c t io n t ha t a tta ches a n eve nt ha n dler t o t he docume nt adop t Node : // a fun c t io n t ha t adop ts a n ode fr om a n o t her docume nt close : // a fun c t io n t ha t closes t he ou t pu t s trea m previously ope ne d wi t h docume nt .ope n () crea te A ttr ibu te : // a fun c t io n t ha t crea tes a n a ttr ibu te n ode // crea te Comme nt : a fun c t io n t ha t crea tes a Comme nt n ode wi t h t he speci f ied te x t crea te Docume nt Fragme nt : // a fun c t io n t ha t crea tes a n emp t y Docume nt Fragme nt n ode crea te Eleme nt : // a fun c t io n t ha t crea tes a n Eleme nt n ode crea te Eve nt : // a fun c t io n t ha t crea tes a ne w eve nt } STOP! It's important you don't get overwhelmed with all of these methods . You don't need to know all of them or even most of them. You'll only use a few of them for the majority of your career. In the video above we only use document.getElementById() . For a full list of the available document methods visit and bookmark the docs page . document.getElementById() Just like we use Selectors in CSS to access a specific element and change its properties, in JavaScript, we have access to a few methods that help us get elements by their specific attributes or type. The getElementById() method is a very common method that accesses an element by an id. In the video above we use it to \"grab\" an element then change its style.display property. There are many other methods to get an element by its class name or data or type. For now, all you need to know is that they exist and when you need to use them there are docs you can reference . onclick= & Event Listeners It's a little confusing at first but I think you'll get the hang of it. While the Document Object has methods like the one we just discussed, each and every HTML element also has methods available to them. The methods are usually associated with the action of a user interacting with it so we call them Event Listeners . They listen for Events , or interactions, between the user and objects in the Document Object Model( DOM ). One of the most common Event Listeners to use is onclick . It, of course, listens for a click from the user's mouse. When the user clicks on that element an event bubbles up and we we can point that action to trigger something to happen, like a function to load more pictures or login. In the video above, we use the user's click to trigger a function that sets the element's display property to none so it disappears from the page. HTML 1 < button onlick = \"sayHello()\" > Click To See a Greeting </ button > JS 1 2 3 function sayHello () { window . alert ( \"Hello\" ) } There are many Event Listeners so just breathe for now and be happy that you know this one. But if you're looking for more there are always more docs to study . JS Keywords Use let to Declare Variables Just the same way CSS and HTML have specific words that mean something to the browser, so does JavaScript. In HTML we have words like <section> and class=\"\" and in CSS we have color: and solid . JavaScript has a whole set of keywords we'll learn to use in time but the first one we need is: let , as in let me store something here. When we program we usually need a place to store data. This data could be a number, a word, an HTML Element, or a function. Whatever it is, we need to store it for later use. In the above video we used two variables to hold two numbers: 70 & 5 . Then we add them together by referencing their variable name and not the numbers themselves. We also used the keyword const but you'll regularly see let and var . I will now break these three words down once and for all while I continue to reinforce how/when to use them as we learn more about programming. var is the old way to declare a variable. We don't use it anymore but you will still see it in old code bases. let is used when we expect for the value of the variable to change. we use const when we expect for the value to stay the same. We'll get into the nitty gritty of this later on but for now just know that's why there are two different words to do the \"same\" thing. For now, let 's just use the keyword let to declare and define all of our variables. 1 2 let aVariable = 7 let anotherVariable = \"hello\" Function Signatures In the video you two different ways to declare functions: 1 2 3 4 5 6 7 function myFunction () { // this is the old way of declaring a function in JS } const myFunction2 = () => { // this is the new and preferred way of declaring a function in JS } Again, there is an old way and a new way to write functions in JS. You'll still see the old way so we must teach you it but you'll learn to write functions in the new format. You also so something like this written in the HTML: 1 2 myFunction () // this is how we invoke a function in JS myFunction2 () // no matter how the function is declared in JS The difference between these two examples is subtle but vastly different! The first, const myFunction2 = () => {} & function myFunction() {} , is a Function Signature or Function Declaration . This is where we write the instructions to be used later. The second, myFunction() & myFunction2() , is a Function Invocation which means we're calling the function or saying, \"Hey, do your thing now!\" This is when we use the instructions previously written. If none of that made sense, here's Joe, who might be able to explain it better. Know Your Docs W3S Docs - Document Object W3S Docs - DOM Event Listeners","title":"The DOM + JS Intro pt.2"},{"location":"module-2/theDOM-jsIntro-pt2/#the-dom-js-intro-part-two","text":"","title":"The DOM + JS Intro Part Two"},{"location":"module-2/theDOM-jsIntro-pt2/#the-document","text":"The document or document is the Mother of All Objects . It is where your body , header , footer , title , meta , and all other HTML elements are created. This \"Mother of All Objects\" has a whole list of properties and methods we can use, some of which you'll see in the video below. In this video , we'll cover a few things in a slow and careful way. Take your time through it and make sure you re-create the task on your own either in a new repo or a codePen. The following will make more sense if you watch the video above first. To begin, a Method is a special type of Property; in that, a property just holds a value like: font-size: 12pt . While a method looks the same as a property it is actually a Function stored in the value of the property name, i.e. write: function(){// code that writes to the document} . This subtle difference helps us understand what we're talking about in the future. Property - holds a value that represents a particular attribute. Method - a functionality of the object stored in an accessible location. Event Listener - a special function that \"listens\" for certain events, or interactions, in order to trigger a specified action when the \"event\" happens. In either case, when we access a property or a method we use Dot-Notation , aka the Member Operator . It looks like this: . . Seriously, to get the property write() on the Document Object, we type document.write() . Remember, the Document Object Model is a way we, as humans, can visualize the way these HTML Elements are written under-the-hood. NOTE: The following code snippet is not real code, just a representation that can help you visualize what methods look like on the Document Object: 1 2 3 4 5 6 7 8 9 10 docume nt = { addEve nt Lis tener : // a fun c t io n t ha t a tta ches a n eve nt ha n dler t o t he docume nt adop t Node : // a fun c t io n t ha t adop ts a n ode fr om a n o t her docume nt close : // a fun c t io n t ha t closes t he ou t pu t s trea m previously ope ne d wi t h docume nt .ope n () crea te A ttr ibu te : // a fun c t io n t ha t crea tes a n a ttr ibu te n ode // crea te Comme nt : a fun c t io n t ha t crea tes a Comme nt n ode wi t h t he speci f ied te x t crea te Docume nt Fragme nt : // a fun c t io n t ha t crea tes a n emp t y Docume nt Fragme nt n ode crea te Eleme nt : // a fun c t io n t ha t crea tes a n Eleme nt n ode crea te Eve nt : // a fun c t io n t ha t crea tes a ne w eve nt } STOP! It's important you don't get overwhelmed with all of these methods . You don't need to know all of them or even most of them. You'll only use a few of them for the majority of your career. In the video above we only use document.getElementById() . For a full list of the available document methods visit and bookmark the docs page .","title":"The Document"},{"location":"module-2/theDOM-jsIntro-pt2/#documentgetelementbyid","text":"Just like we use Selectors in CSS to access a specific element and change its properties, in JavaScript, we have access to a few methods that help us get elements by their specific attributes or type. The getElementById() method is a very common method that accesses an element by an id. In the video above we use it to \"grab\" an element then change its style.display property. There are many other methods to get an element by its class name or data or type. For now, all you need to know is that they exist and when you need to use them there are docs you can reference .","title":"document.getElementById()"},{"location":"module-2/theDOM-jsIntro-pt2/#onclick-event-listeners","text":"It's a little confusing at first but I think you'll get the hang of it. While the Document Object has methods like the one we just discussed, each and every HTML element also has methods available to them. The methods are usually associated with the action of a user interacting with it so we call them Event Listeners . They listen for Events , or interactions, between the user and objects in the Document Object Model( DOM ). One of the most common Event Listeners to use is onclick . It, of course, listens for a click from the user's mouse. When the user clicks on that element an event bubbles up and we we can point that action to trigger something to happen, like a function to load more pictures or login. In the video above, we use the user's click to trigger a function that sets the element's display property to none so it disappears from the page. HTML 1 < button onlick = \"sayHello()\" > Click To See a Greeting </ button > JS 1 2 3 function sayHello () { window . alert ( \"Hello\" ) } There are many Event Listeners so just breathe for now and be happy that you know this one. But if you're looking for more there are always more docs to study .","title":"onclick= &amp; Event Listeners"},{"location":"module-2/theDOM-jsIntro-pt2/#js-keywords","text":"","title":"JS Keywords"},{"location":"module-2/theDOM-jsIntro-pt2/#use-let-to-declare-variables","text":"Just the same way CSS and HTML have specific words that mean something to the browser, so does JavaScript. In HTML we have words like <section> and class=\"\" and in CSS we have color: and solid . JavaScript has a whole set of keywords we'll learn to use in time but the first one we need is: let , as in let me store something here. When we program we usually need a place to store data. This data could be a number, a word, an HTML Element, or a function. Whatever it is, we need to store it for later use. In the above video we used two variables to hold two numbers: 70 & 5 . Then we add them together by referencing their variable name and not the numbers themselves. We also used the keyword const but you'll regularly see let and var . I will now break these three words down once and for all while I continue to reinforce how/when to use them as we learn more about programming. var is the old way to declare a variable. We don't use it anymore but you will still see it in old code bases. let is used when we expect for the value of the variable to change. we use const when we expect for the value to stay the same. We'll get into the nitty gritty of this later on but for now just know that's why there are two different words to do the \"same\" thing. For now, let 's just use the keyword let to declare and define all of our variables. 1 2 let aVariable = 7 let anotherVariable = \"hello\"","title":"Use let to Declare Variables"},{"location":"module-2/theDOM-jsIntro-pt2/#function-signatures","text":"In the video you two different ways to declare functions: 1 2 3 4 5 6 7 function myFunction () { // this is the old way of declaring a function in JS } const myFunction2 = () => { // this is the new and preferred way of declaring a function in JS } Again, there is an old way and a new way to write functions in JS. You'll still see the old way so we must teach you it but you'll learn to write functions in the new format. You also so something like this written in the HTML: 1 2 myFunction () // this is how we invoke a function in JS myFunction2 () // no matter how the function is declared in JS The difference between these two examples is subtle but vastly different! The first, const myFunction2 = () => {} & function myFunction() {} , is a Function Signature or Function Declaration . This is where we write the instructions to be used later. The second, myFunction() & myFunction2() , is a Function Invocation which means we're calling the function or saying, \"Hey, do your thing now!\" This is when we use the instructions previously written. If none of that made sense, here's Joe, who might be able to explain it better.","title":"Function Signatures"},{"location":"module-2/theDOM-jsIntro-pt2/#know-your-docs","text":"W3S Docs - Document Object W3S Docs - DOM Event Listeners","title":"Know Your Docs"},{"location":"module-2/twoPerspectives/","text":"The Two Perspectives + Object Modeling Perspective One: Objects are how the computer keeps up with memory and interacts with the world and people around it? Perspective Two: We use code to organize our thoughts about how to access that memory and give instructions on what to do with that memory to both the computer and other human-beings(fellow developers). In the next session we'll explore the following questions: How do we accomplish the invisible task of seeing the memory of computers? How does code represent our programming intentions to the computer? To do this we'll break them down in three parts: Objects , Object Modeling , Code as Communication . Part One: Objects Computers don't have eyes or ears...yet. They can't see a dog and hear a bark; therefore, they can't perceive the animal before them is a canine and not a feline. Instead they rely on objects, and categories of objects to interact with the world. So that dog would become an object with properties like: wagsTail=true, barks=true, licks=true, species=\"canine\" . With this object and its properties the computer could categorize the animal as a dog type object but when it is given another animal with properties: wagsTail=false, barks=false, licks=true, species=\"feline\", isSelfCentered=true then it can categorize that animal as a cat type object. Everything is an object to the computer. It's how it relates to the world around it. People are objects, foods are objects, vehicles are objects. With so many objects, it would stand to reason that there would be types of objects/categories to put similarly related types of objects in. So cars, trucks, motorcycles, buses, scooters they could all be Vehicle type objects, objects that are of Vehicle type. This is the same with the components you see on your screen when you open a page. Your browser creates an object called window . And the website you navigate to sends information back to your browser to create another object called document which gets mounted inside of window . Inside this document object there are many other objects. Typical objects inside the document object include header , body , and footer , among many more. These are by no means all of the possible objects but they are the general first objects to build a web page. Try it out: Go to any website and right-click your mouse, Then click \"Inspect\" to open your Developer Tools. Next click on Console and type window + ENTER where the cursor is flashing. You should get something like this returned on the next line: Window {window: Window, self: Window, document: document, name: \"\", location: Location, \u2026} What you did was ask the console object to access the window object and give you information about it. What you're seeing is the object literal (literally the object written in JS) with its properties: window , self , document , location , etc... We'll be using the console much more in the future and diving much deeper into all the objects mentioned above but before we do we have to get a mental \"model\" of all of these objects in our minds! The third thing to keep in mind ! Part Two: Object Modeling Object Modeling is the process of seeing the objects of the computer and how they relate to one another in our minds so we can effectively communicate with ourselves and one another about what is happening inside and between computers. To model these objects, we can imagine them in our minds, draw them on whiteboards, and even have graphic representations for them on our screen. This type of thinking is the intermediary between what the computer understands and what we humans understand. It is imperative that we practice Object Modeling every time we approach the building of a site or page because it will act as our map and compass for solving problems we've never seen. Objects are just slots of memory that represent real-world things. So what does an object look like? What model can we use to describe them? Try first to write it down, draw it, and then imagine it. This will take some time. But try! Draw a large box nearly the size of a sheet of notebook paper. At the top label it window . Inside draw another box nearly 3/4 the size of the first box. Label this one document . Inside the window box create two lists titled: \"Properties\" & \"Methods\" Under the \"Properties\" list write down the first five properties you find at this website: W3S Window Object NOTICE: The 2nd property is \"Console\" and the 4th is \"Document\" These are two objects you've already come across; the \"Console\" is the one you opened in your Inspect > Developer Tools earlier and typed \"window\". And the \"Document\" is the other box on your page!! In the \"Methods\" list write the first 5 methods you see on that same website: W3S Window Object Repeat these steps for the smaller box, the \"Document\" object, but with this page instead: W3S Document Object NOTE: the ones with parenthesis, () following them are methods and the ones without are properties. What you see on your paper is a simple model of two objects, Window and Document, and shorts lists of each of their properties and methods. This is Object Modeling. And this is how we will talk about EVERYTHING we learn. Everything is an object with properties, methods, and events. To continue on this Object Modeling exploration we'll need to cover some new terms: Properties , Methods , and Events . These three new terms are called the members of an object. Properties All objects have properties . Properties are descriptions of the object. If you were an object you would have properties that might include: name: , gender: , height: , weight: , age: , DOB: , job: . The same goes for our web page objects. All visible objects have color: , height: , width: , z-index: , font-size: , etc... Properties are things that describe what something is, what it contains, and what it looks like when rendered. You'll also see properties referred to as attributes and keys while the value that is assigned to each of them (the part after the colon and before comma) is called a value leading to the common expression: key/value pairs , i.e. name: \"Rebecca\", , age: 33, or width: 500px, Methods Most objects have methods . Methods are like special properties in that they don't describe the object but instead they describe actions the object can do! You might have methods like eat() , sleep() , run() , and beStill() . However, as you saw in your exercise, objects on our web pages might have methods like: confirm() , clearInterval() , createElement() , execCommand() and open() because they are computer object-things and not human-being things with needs like food, water, and shelter. Methods are also called built-in functions because they work like functions. They're small sets of instructions that can be executed just like other functions. Now, we haven't fully covered functions yet but suffice it to say that if you just learned how to mix cocktails you would now have two new functions written into your system that are maybe called: mixIngredients() and shakeVigoursly() . So every time you need to make a cocktail for your party you would first call mixIngredients() then shakeVigoursly() . Not everyone needs or wants to learn how to make cocktails but everyone needs to eat, sleep, and drink. So the good Lord gave us all built-in functions/ methods called: sleep() , eat() , and drink() . In web development, the reason we have methods is because some functions need to be called regularly, by all developers for most apps and don't need to be special or customized. So the engineers of HTML created \"built-in functions\" that are readily available to be used by us. The \"built-in\" functions are methods . Events Most objects also have a third category of members called Events . You can think of events as interactions. Interactions that happen between objects and other objects or objects and humans. See, we can move our mouse, place our cursor on an element on our screen, and click on that element. In that single move there are three distinct events/interactions that happen: 1) onmousemove , onmouseenter , and onmousedown . The events are built into objects so that they can be interacted with. We people have events like: lookedAt , smiledAt , handShaked , poked , hugged , shoved , greeted . All of these are ways in which our bodies are interacted with in the world around them. In web development terms, these Events are used to \"capture\" an interaction and then trigger an action because of it. For the most part all of these built-in events are attached to a \"blank\"; in that, they fire every time the event happens but nothing is triggered. It's up to us, the developer to create the reactions and then attach them to the events. So we might say something like: onmouseenter=\"openGreetingWindow()\" . This could be equivalent to our bodies being programmed with: smiledAt=\"smileBack()\" . At this point you may be a bit confused on the difference between methods and events so for now separate them by this distinctions: Events capture interactions with the object from the outside world, in order for us to attach instructions to be carried out when the event happens. Methods are actions(built-in functions) the object can use to outwardly interact with its world. And properties are bits of information that describe the object. Often called attributes , as well. While object modeling is a great way to understand how a computer interacts with the world it is not how we communicate to the computer our programming intentions. The computer, frankly doesn't know anything about this Object Modeling stuff. It just knows about objects because what we interpret as a \"model\" is the complete and total reality of a computer. It knows nothing else. Because of this, we have to use a language that communicates to the computer our intentions with its objects and their subsequent properties, methods, and events. This language is what we generally call code . The great thing about you learning code now is that you've already built things with three different coding languages and you've been reading code in all of these textual examples. Part Three: Code as Communication In order for us to communicate our programming needs and intentions we need a language that can be interpreted by the computer and understood by humans. This is what we call code . Code comes in many different names and flavors that we call languages, or programming languages . We use programming languages to communicate to both humans and computers what our programming needs and intentions are. Notice earlier, we used the word \"interpret\" for computers and \"understand\" for humans. This is because, as long as your fellow developers know the syntax and semantics of the language you chose to write, they will understand what you meant. But the computer must \"interpret\" what you wrote because the computer doesn't actually know JavaScript from Closure or Haskell. Our computers use interpreters that convert your programming language of choice to binary before it executes the program you built. Programming languages are similar to our human languages in that they were all created to represent and communicate our needs and intentions. It doesn't matter what language you are speaking...as long as you are speaking to someone who understands the language they will know what you're saying. This goes for computers as well. When we're building websites and web app we're talking to web browsers who know three languages: HTML, JS, and CSS. If we are building iOS apps we're talking to an operating system that understands Swift and if we're build apps for Android we're talking to a system that understands Java. All languages are built in similar ways because they all have to accomplish the same goals: store data, move data, and render data. In this way, you can feel confident that once you now how to program in JavaScript, learning to program with Python, Swift, Java, Go, or C# will come much easier! This layer of \"abstraction\" is not so important for us to learn, so much, as it is helpful for us to understand that programming languages like JavaScript are just languages with nouns, verbs, sentence structure, actions, and objects that all represent to the computer our programming needs and intention of how to we would like to move, manipulate, and display the objects our computers know about. In Summary: Our Three Jobs, Object Modeling & Code as Communication Now that we've learned our three jobs as web developers are to store, move, and render data inside an invisible world with 10 levels of abstractions on a computer that sees only objects with properties, methods, & events and interprets only code it recognizes we have our work cut out for us. How do we do it? We first have to remember that our three jobs as web developers is to store data, move data, and render data. The next is to always draw out our objects on paper, whiteboard and in our mind so we don't forget that everything is an object. Third, we have to practice gratitude for the languages we get to learn and be happy that we get to create stories and books with these programming languages instead of new words for every thought. After that, we must always reference our docs. Docs are how to learn and remember object, properties, methods, and events . And lastly, we have to keep learning and trusting that you can do this !","title":"Two Perspectives"},{"location":"module-2/twoPerspectives/#the-two-perspectives-object-modeling","text":"Perspective One: Objects are how the computer keeps up with memory and interacts with the world and people around it? Perspective Two: We use code to organize our thoughts about how to access that memory and give instructions on what to do with that memory to both the computer and other human-beings(fellow developers). In the next session we'll explore the following questions: How do we accomplish the invisible task of seeing the memory of computers? How does code represent our programming intentions to the computer? To do this we'll break them down in three parts: Objects , Object Modeling , Code as Communication .","title":"The Two Perspectives + Object Modeling"},{"location":"module-2/twoPerspectives/#part-one-objects","text":"Computers don't have eyes or ears...yet. They can't see a dog and hear a bark; therefore, they can't perceive the animal before them is a canine and not a feline. Instead they rely on objects, and categories of objects to interact with the world. So that dog would become an object with properties like: wagsTail=true, barks=true, licks=true, species=\"canine\" . With this object and its properties the computer could categorize the animal as a dog type object but when it is given another animal with properties: wagsTail=false, barks=false, licks=true, species=\"feline\", isSelfCentered=true then it can categorize that animal as a cat type object. Everything is an object to the computer. It's how it relates to the world around it. People are objects, foods are objects, vehicles are objects. With so many objects, it would stand to reason that there would be types of objects/categories to put similarly related types of objects in. So cars, trucks, motorcycles, buses, scooters they could all be Vehicle type objects, objects that are of Vehicle type. This is the same with the components you see on your screen when you open a page. Your browser creates an object called window . And the website you navigate to sends information back to your browser to create another object called document which gets mounted inside of window . Inside this document object there are many other objects. Typical objects inside the document object include header , body , and footer , among many more. These are by no means all of the possible objects but they are the general first objects to build a web page. Try it out: Go to any website and right-click your mouse, Then click \"Inspect\" to open your Developer Tools. Next click on Console and type window + ENTER where the cursor is flashing. You should get something like this returned on the next line: Window {window: Window, self: Window, document: document, name: \"\", location: Location, \u2026} What you did was ask the console object to access the window object and give you information about it. What you're seeing is the object literal (literally the object written in JS) with its properties: window , self , document , location , etc... We'll be using the console much more in the future and diving much deeper into all the objects mentioned above but before we do we have to get a mental \"model\" of all of these objects in our minds! The third thing to keep in mind !","title":"Part One: Objects"},{"location":"module-2/twoPerspectives/#part-two-object-modeling","text":"Object Modeling is the process of seeing the objects of the computer and how they relate to one another in our minds so we can effectively communicate with ourselves and one another about what is happening inside and between computers. To model these objects, we can imagine them in our minds, draw them on whiteboards, and even have graphic representations for them on our screen. This type of thinking is the intermediary between what the computer understands and what we humans understand. It is imperative that we practice Object Modeling every time we approach the building of a site or page because it will act as our map and compass for solving problems we've never seen. Objects are just slots of memory that represent real-world things. So what does an object look like? What model can we use to describe them? Try first to write it down, draw it, and then imagine it. This will take some time. But try! Draw a large box nearly the size of a sheet of notebook paper. At the top label it window . Inside draw another box nearly 3/4 the size of the first box. Label this one document . Inside the window box create two lists titled: \"Properties\" & \"Methods\" Under the \"Properties\" list write down the first five properties you find at this website: W3S Window Object NOTICE: The 2nd property is \"Console\" and the 4th is \"Document\" These are two objects you've already come across; the \"Console\" is the one you opened in your Inspect > Developer Tools earlier and typed \"window\". And the \"Document\" is the other box on your page!! In the \"Methods\" list write the first 5 methods you see on that same website: W3S Window Object Repeat these steps for the smaller box, the \"Document\" object, but with this page instead: W3S Document Object NOTE: the ones with parenthesis, () following them are methods and the ones without are properties. What you see on your paper is a simple model of two objects, Window and Document, and shorts lists of each of their properties and methods. This is Object Modeling. And this is how we will talk about EVERYTHING we learn. Everything is an object with properties, methods, and events. To continue on this Object Modeling exploration we'll need to cover some new terms: Properties , Methods , and Events . These three new terms are called the members of an object.","title":"Part Two: Object Modeling"},{"location":"module-2/twoPerspectives/#properties","text":"All objects have properties . Properties are descriptions of the object. If you were an object you would have properties that might include: name: , gender: , height: , weight: , age: , DOB: , job: . The same goes for our web page objects. All visible objects have color: , height: , width: , z-index: , font-size: , etc... Properties are things that describe what something is, what it contains, and what it looks like when rendered. You'll also see properties referred to as attributes and keys while the value that is assigned to each of them (the part after the colon and before comma) is called a value leading to the common expression: key/value pairs , i.e. name: \"Rebecca\", , age: 33, or width: 500px,","title":"Properties"},{"location":"module-2/twoPerspectives/#methods","text":"Most objects have methods . Methods are like special properties in that they don't describe the object but instead they describe actions the object can do! You might have methods like eat() , sleep() , run() , and beStill() . However, as you saw in your exercise, objects on our web pages might have methods like: confirm() , clearInterval() , createElement() , execCommand() and open() because they are computer object-things and not human-being things with needs like food, water, and shelter. Methods are also called built-in functions because they work like functions. They're small sets of instructions that can be executed just like other functions. Now, we haven't fully covered functions yet but suffice it to say that if you just learned how to mix cocktails you would now have two new functions written into your system that are maybe called: mixIngredients() and shakeVigoursly() . So every time you need to make a cocktail for your party you would first call mixIngredients() then shakeVigoursly() . Not everyone needs or wants to learn how to make cocktails but everyone needs to eat, sleep, and drink. So the good Lord gave us all built-in functions/ methods called: sleep() , eat() , and drink() . In web development, the reason we have methods is because some functions need to be called regularly, by all developers for most apps and don't need to be special or customized. So the engineers of HTML created \"built-in functions\" that are readily available to be used by us. The \"built-in\" functions are methods .","title":"Methods"},{"location":"module-2/twoPerspectives/#events","text":"Most objects also have a third category of members called Events . You can think of events as interactions. Interactions that happen between objects and other objects or objects and humans. See, we can move our mouse, place our cursor on an element on our screen, and click on that element. In that single move there are three distinct events/interactions that happen: 1) onmousemove , onmouseenter , and onmousedown . The events are built into objects so that they can be interacted with. We people have events like: lookedAt , smiledAt , handShaked , poked , hugged , shoved , greeted . All of these are ways in which our bodies are interacted with in the world around them. In web development terms, these Events are used to \"capture\" an interaction and then trigger an action because of it. For the most part all of these built-in events are attached to a \"blank\"; in that, they fire every time the event happens but nothing is triggered. It's up to us, the developer to create the reactions and then attach them to the events. So we might say something like: onmouseenter=\"openGreetingWindow()\" . This could be equivalent to our bodies being programmed with: smiledAt=\"smileBack()\" . At this point you may be a bit confused on the difference between methods and events so for now separate them by this distinctions: Events capture interactions with the object from the outside world, in order for us to attach instructions to be carried out when the event happens. Methods are actions(built-in functions) the object can use to outwardly interact with its world. And properties are bits of information that describe the object. Often called attributes , as well. While object modeling is a great way to understand how a computer interacts with the world it is not how we communicate to the computer our programming intentions. The computer, frankly doesn't know anything about this Object Modeling stuff. It just knows about objects because what we interpret as a \"model\" is the complete and total reality of a computer. It knows nothing else. Because of this, we have to use a language that communicates to the computer our intentions with its objects and their subsequent properties, methods, and events. This language is what we generally call code . The great thing about you learning code now is that you've already built things with three different coding languages and you've been reading code in all of these textual examples.","title":"Events"},{"location":"module-2/twoPerspectives/#part-three-code-as-communication","text":"In order for us to communicate our programming needs and intentions we need a language that can be interpreted by the computer and understood by humans. This is what we call code . Code comes in many different names and flavors that we call languages, or programming languages . We use programming languages to communicate to both humans and computers what our programming needs and intentions are. Notice earlier, we used the word \"interpret\" for computers and \"understand\" for humans. This is because, as long as your fellow developers know the syntax and semantics of the language you chose to write, they will understand what you meant. But the computer must \"interpret\" what you wrote because the computer doesn't actually know JavaScript from Closure or Haskell. Our computers use interpreters that convert your programming language of choice to binary before it executes the program you built. Programming languages are similar to our human languages in that they were all created to represent and communicate our needs and intentions. It doesn't matter what language you are speaking...as long as you are speaking to someone who understands the language they will know what you're saying. This goes for computers as well. When we're building websites and web app we're talking to web browsers who know three languages: HTML, JS, and CSS. If we are building iOS apps we're talking to an operating system that understands Swift and if we're build apps for Android we're talking to a system that understands Java. All languages are built in similar ways because they all have to accomplish the same goals: store data, move data, and render data. In this way, you can feel confident that once you now how to program in JavaScript, learning to program with Python, Swift, Java, Go, or C# will come much easier! This layer of \"abstraction\" is not so important for us to learn, so much, as it is helpful for us to understand that programming languages like JavaScript are just languages with nouns, verbs, sentence structure, actions, and objects that all represent to the computer our programming needs and intention of how to we would like to move, manipulate, and display the objects our computers know about.","title":"Part Three: Code as Communication"},{"location":"module-2/twoPerspectives/#in-summary-our-three-jobs-object-modeling-code-as-communication","text":"Now that we've learned our three jobs as web developers are to store, move, and render data inside an invisible world with 10 levels of abstractions on a computer that sees only objects with properties, methods, & events and interprets only code it recognizes we have our work cut out for us. How do we do it? We first have to remember that our three jobs as web developers is to store data, move data, and render data. The next is to always draw out our objects on paper, whiteboard and in our mind so we don't forget that everything is an object. Third, we have to practice gratitude for the languages we get to learn and be happy that we get to create stories and books with these programming languages instead of new words for every thought. After that, we must always reference our docs. Docs are how to learn and remember object, properties, methods, and events . And lastly, we have to keep learning and trusting that you can do this !","title":"In Summary: Our Three Jobs, Object Modeling &amp; Code as Communication"},{"location":"module-2/video-iframe-elements/","text":"The Video Element \u201cIn a time of destruction, create something.\u201d \u2015Maxine Hong Kingston Overview Continuing on with our Special HTML Element Week , we're going to cover two important elements today: <video> & <iframe> . These elements are similar to the <img/> element but have some funny but useful attributes to play with. The Video Element & Its Attributes The <video> tag creates an HTML Video Element that will embed a media player into a page. This allows the user to interact with video playback inside the document . Just as you learned with the <img /> element, the video element will get its content via the path to the media file specified inside a src=\"\" attribute. Videos also come with the width & height attribute just like the element. But a few more attributes you haven't seen before include: autoplay - sets the element's autoplay property to true which tells the browser to play the video as soon as the page loads. controls - sets the element's controls property to true which provides built-in play/pause buttons and a tracking slider. poster - means thumbnail, which is the initial image you see before a video plays. If this attribute isn't specified the browser will use the first frame in the video. This attribute takes a pathname or URL. muted - sets the element's muted property to true which means the video will begin with no volume. loop - sets the element's loop property to true which means the video will play again when it finishes. 1 2 3 4 5 6 7 < video src = \"./videos/myMovie.mp4\" width = \"320\" height = \"240\" poster = \"./images/myMovieThumbnail.png\" autoplay controls > < video > Video Sources The <video> element is pretty versatile. In fact, you can use it to provide multiple types of video files for multiple browsers. Say if you used .webm as a video format for Chrome but a user came to your site using Safari which only supports .mp4 format you could deliver to them the \"same video\" through different formats by creating two <source> elements as child elements inside the parent <video> element. Check it out. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!-- HTML for Multiple Possible Sources Video Elements --> < video width = \"320\" height = \"240\" poster = \"./images/myMovieThumbnail.png\" autoplay controls muted > <!-- If using Chrome, this video will be shown --> < source src = \"./videos/myMovie.webm\" type = \"video/webm\" /> <!-- If using Safari or other browsers that don't support .webm then use this video --> < source src = \"./videos/myMovie.mp4\" type = \"video/mp4\" /> <!-- And if neither are supported, give them this text as a default. --> < p > Your browser doesn't support the HTML5 Video Element. Here is a < a href = \"https://www.youtube.com/myhandle/myVideo\" > link to the video instead. </ a > </ p > </ video > NOTE: the <source /> tag, like <img /> , is self-closing, having no closing tag paired with it. In the new HTML5 specifications, it is optional to include the slash (conventionally written with a space preceding it) before the final angle bracket ( i.e., <source> works just as well as <source /> ). HTML5 simply ignores the slash, but some technologies that intersect with HTML ( such as XML, and the JSX language used with React ) do require the slash; so it doesn't hurt to develop the habit of using it in elements that don't have closing tags, which are called void elements . NOTE 2: Do you see where we placed a <p> tag in our <video> element? This serves as something like an alt=\"\" text? In case the video doesn't load for the user, we explain the reason for this in the <p> tag, and provide a URL link to the youTube version of the same video in the <a> tag. The IFrame Element So the <video> element is pretty straight-forward but remember, it is only used when you own the content, as in, it resides on your server. So what do you do if you don't own the content? Say for a youTube video? Well, that's where we use an Inline Frame element . The <iframe> represents a nested browsing window, which effectively embeds another HTML page within the current page. You can include any number of <iframe> elements inside the <body> of a document, each of them displaying a separate page in the area covered by the <iframe> . While it can be used to display video, the <iframe> can also be used for things like games, code snippets for CodePen or Repl.it, and advertising. When it comes to video, <iframe> is used primarily when we are linking to the video on YouTube or Vimeo rather than storing the file on our server. IFrame Caution You should know there are some security risks involved with the <iframe> element. The risk revolve around the fact that you are \"effectively embed[ding] another HTML page within the current page\". We won't go into the technicalities of this because it is beyond the scope of this course but you should be aware as you move forward. Read this short article, 3 Reasons You Might Not Want To Use Iframes by Alex Smirnov to get an idea of the problems surrounding this special element. Additional Resources YT, Kody Simpson - How to Use Video Tag YT, tipswithpunch - Embed YouTube Video YT, Dani Krossing - HTML5 Video Embed NOTE: In the last video you'll learn about the CSS property position which is very useful hack to making element do what we want! Know Your Docs MDN Docs - iFrame Element MDN Docs - Video Element W3S Docs - Getting Elements from inside an IFrame Element","title":"Video & Iframe Elements"},{"location":"module-2/video-iframe-elements/#the-video-element","text":"\u201cIn a time of destruction, create something.\u201d \u2015Maxine Hong Kingston","title":"The Video Element"},{"location":"module-2/video-iframe-elements/#overview","text":"Continuing on with our Special HTML Element Week , we're going to cover two important elements today: <video> & <iframe> . These elements are similar to the <img/> element but have some funny but useful attributes to play with.","title":"Overview"},{"location":"module-2/video-iframe-elements/#the-video-element-its-attributes","text":"The <video> tag creates an HTML Video Element that will embed a media player into a page. This allows the user to interact with video playback inside the document . Just as you learned with the <img /> element, the video element will get its content via the path to the media file specified inside a src=\"\" attribute. Videos also come with the width & height attribute just like the element. But a few more attributes you haven't seen before include: autoplay - sets the element's autoplay property to true which tells the browser to play the video as soon as the page loads. controls - sets the element's controls property to true which provides built-in play/pause buttons and a tracking slider. poster - means thumbnail, which is the initial image you see before a video plays. If this attribute isn't specified the browser will use the first frame in the video. This attribute takes a pathname or URL. muted - sets the element's muted property to true which means the video will begin with no volume. loop - sets the element's loop property to true which means the video will play again when it finishes. 1 2 3 4 5 6 7 < video src = \"./videos/myMovie.mp4\" width = \"320\" height = \"240\" poster = \"./images/myMovieThumbnail.png\" autoplay controls > < video >","title":"The Video Element &amp; Its Attributes"},{"location":"module-2/video-iframe-elements/#video-sources","text":"The <video> element is pretty versatile. In fact, you can use it to provide multiple types of video files for multiple browsers. Say if you used .webm as a video format for Chrome but a user came to your site using Safari which only supports .mp4 format you could deliver to them the \"same video\" through different formats by creating two <source> elements as child elements inside the parent <video> element. Check it out. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!-- HTML for Multiple Possible Sources Video Elements --> < video width = \"320\" height = \"240\" poster = \"./images/myMovieThumbnail.png\" autoplay controls muted > <!-- If using Chrome, this video will be shown --> < source src = \"./videos/myMovie.webm\" type = \"video/webm\" /> <!-- If using Safari or other browsers that don't support .webm then use this video --> < source src = \"./videos/myMovie.mp4\" type = \"video/mp4\" /> <!-- And if neither are supported, give them this text as a default. --> < p > Your browser doesn't support the HTML5 Video Element. Here is a < a href = \"https://www.youtube.com/myhandle/myVideo\" > link to the video instead. </ a > </ p > </ video > NOTE: the <source /> tag, like <img /> , is self-closing, having no closing tag paired with it. In the new HTML5 specifications, it is optional to include the slash (conventionally written with a space preceding it) before the final angle bracket ( i.e., <source> works just as well as <source /> ). HTML5 simply ignores the slash, but some technologies that intersect with HTML ( such as XML, and the JSX language used with React ) do require the slash; so it doesn't hurt to develop the habit of using it in elements that don't have closing tags, which are called void elements . NOTE 2: Do you see where we placed a <p> tag in our <video> element? This serves as something like an alt=\"\" text? In case the video doesn't load for the user, we explain the reason for this in the <p> tag, and provide a URL link to the youTube version of the same video in the <a> tag.","title":"Video Sources"},{"location":"module-2/video-iframe-elements/#the-iframe-element","text":"So the <video> element is pretty straight-forward but remember, it is only used when you own the content, as in, it resides on your server. So what do you do if you don't own the content? Say for a youTube video? Well, that's where we use an Inline Frame element . The <iframe> represents a nested browsing window, which effectively embeds another HTML page within the current page. You can include any number of <iframe> elements inside the <body> of a document, each of them displaying a separate page in the area covered by the <iframe> . While it can be used to display video, the <iframe> can also be used for things like games, code snippets for CodePen or Repl.it, and advertising. When it comes to video, <iframe> is used primarily when we are linking to the video on YouTube or Vimeo rather than storing the file on our server.","title":"The IFrame Element"},{"location":"module-2/video-iframe-elements/#iframe-caution","text":"You should know there are some security risks involved with the <iframe> element. The risk revolve around the fact that you are \"effectively embed[ding] another HTML page within the current page\". We won't go into the technicalities of this because it is beyond the scope of this course but you should be aware as you move forward. Read this short article, 3 Reasons You Might Not Want To Use Iframes by Alex Smirnov to get an idea of the problems surrounding this special element.","title":"IFrame Caution"},{"location":"module-2/video-iframe-elements/#additional-resources","text":"YT, Kody Simpson - How to Use Video Tag YT, tipswithpunch - Embed YouTube Video YT, Dani Krossing - HTML5 Video Embed NOTE: In the last video you'll learn about the CSS property position which is very useful hack to making element do what we want!","title":"Additional Resources"},{"location":"module-2/video-iframe-elements/#know-your-docs","text":"MDN Docs - iFrame Element MDN Docs - Video Element W3S Docs - Getting Elements from inside an IFrame Element","title":"Know Your Docs"},{"location":"module-2/waysOfThinking/","text":"Ways Of Thinking Now that we have a better understanding of what we'll be doing in our next job role let's get into ways of thinking that will help us grasp the invisible medium we will be working with: electrons & binary! Electrons. The way computers work does seem like magic. There's a lot going on \"under-the-hood\" that most of us have never been introduced to. Don't worry, most people have no idea that there is a grid underneath their phone's screen that catches their finger presses in an x-y coordinate and uses resistors to interpret where the press was and where the swipe ends. No doubt, there's some seriously fancy engineering going on in there that we don't need to understand but nevertheless, the data that results from those gestures ends up on the developers desk where we get to build software that can interact with a human and their fingers. Binary. You've probably heard of binary, the language of computers! Yes, it is real and is still used. Thankfully, we as web developers don't need to understand binary because we get to develop software while standing on the shoulders of giants, who over decades have developed tools, or abstractions, of the basics of computer science. These abstractions are useful for more rapid development of software because we don't have to figure out how to communicate to our computer the color of red in binary, 111111110000000000000000 or the action of a button every time we have a new idea for an app. Instead, we build with these abstractions like HTML, JS, & CSS that already have pre-built definitions of the color red or the action of a button. All we have to do is learn the languages...these abstracted tools that help us develop faster! What Layer of Abstraction are We? Since we're not physicist observing electrons passing through our phone screen and binary representing red actions, where are we actually developing? What level of abstraction are we working in if not in electrons or binary? In this course and the entire program, we'll be building websites and web apps that depend on the pre-determined structure of a computer and the HTTProtocol we've just learned about earlier. That structure and protocol are just two of the many layers of abstracted tools that we get to use to build! To answer the question, in web development we are working at about the 10th layer of abstraction. 1st - Electrons and Transistors 2nd - DRAM memory and a CPU using binary(1s & 0s) 3rd - Bits & Bytes 4th - Logic Gates - AND, NOT, NAND, OR, XOR, ADDER 5th - Functions - small packets of instructions 6th - Operating System - computing the memory with functions 7th - Service Workers - small but massively important programs that keep your computer running smoothly 8th - Interpreters - programs used to interpret instructions from other apps into binary 9th - Browser App - an app that interprets your HTML, CSS, and JavaScript into visual elements with executable actions. 10th - HTTP, HTML, CSS, JS <-- where we are now! 11th - Libraries and Frameworks <-- where we'll be in 211, 311, & 411 IT IS MOST IMPORTANT THAT YOU REALIZE YOU DON'T NEED TO UNDERSTAND THE FIRST 9 LAYERS OF ABSTRACTION! Use this list to appreciate the work many scientists and engineers have done to create the environment we are lucky to inherit and develop within AND to know that these layers of abstraction create the fundamentals of how computers operate and communicate with one another. This means that our HTML, CSS, and JS code is just following the same foundational principals of computer science. Now all that's left to do is learn to use these abstracted tools(layers) to build website and web apps! To learn and use these tools/abstractions doesn't require a CS degrees or knowledge of bits, bytes, interpreters, or service workers. It only requires you to see this development world from two perspectives at the same time while keeping another idea in mind, Object Modeling.","title":"Ways Of Thinking"},{"location":"module-2/waysOfThinking/#ways-of-thinking","text":"Now that we have a better understanding of what we'll be doing in our next job role let's get into ways of thinking that will help us grasp the invisible medium we will be working with: electrons & binary! Electrons. The way computers work does seem like magic. There's a lot going on \"under-the-hood\" that most of us have never been introduced to. Don't worry, most people have no idea that there is a grid underneath their phone's screen that catches their finger presses in an x-y coordinate and uses resistors to interpret where the press was and where the swipe ends. No doubt, there's some seriously fancy engineering going on in there that we don't need to understand but nevertheless, the data that results from those gestures ends up on the developers desk where we get to build software that can interact with a human and their fingers. Binary. You've probably heard of binary, the language of computers! Yes, it is real and is still used. Thankfully, we as web developers don't need to understand binary because we get to develop software while standing on the shoulders of giants, who over decades have developed tools, or abstractions, of the basics of computer science. These abstractions are useful for more rapid development of software because we don't have to figure out how to communicate to our computer the color of red in binary, 111111110000000000000000 or the action of a button every time we have a new idea for an app. Instead, we build with these abstractions like HTML, JS, & CSS that already have pre-built definitions of the color red or the action of a button. All we have to do is learn the languages...these abstracted tools that help us develop faster!","title":"Ways Of Thinking"},{"location":"module-2/waysOfThinking/#what-layer-of-abstraction-are-we","text":"Since we're not physicist observing electrons passing through our phone screen and binary representing red actions, where are we actually developing? What level of abstraction are we working in if not in electrons or binary? In this course and the entire program, we'll be building websites and web apps that depend on the pre-determined structure of a computer and the HTTProtocol we've just learned about earlier. That structure and protocol are just two of the many layers of abstracted tools that we get to use to build! To answer the question, in web development we are working at about the 10th layer of abstraction. 1st - Electrons and Transistors 2nd - DRAM memory and a CPU using binary(1s & 0s) 3rd - Bits & Bytes 4th - Logic Gates - AND, NOT, NAND, OR, XOR, ADDER 5th - Functions - small packets of instructions 6th - Operating System - computing the memory with functions 7th - Service Workers - small but massively important programs that keep your computer running smoothly 8th - Interpreters - programs used to interpret instructions from other apps into binary 9th - Browser App - an app that interprets your HTML, CSS, and JavaScript into visual elements with executable actions. 10th - HTTP, HTML, CSS, JS <-- where we are now! 11th - Libraries and Frameworks <-- where we'll be in 211, 311, & 411 IT IS MOST IMPORTANT THAT YOU REALIZE YOU DON'T NEED TO UNDERSTAND THE FIRST 9 LAYERS OF ABSTRACTION! Use this list to appreciate the work many scientists and engineers have done to create the environment we are lucky to inherit and develop within AND to know that these layers of abstraction create the fundamentals of how computers operate and communicate with one another. This means that our HTML, CSS, and JS code is just following the same foundational principals of computer science. Now all that's left to do is learn to use these abstracted tools(layers) to build website and web apps! To learn and use these tools/abstractions doesn't require a CS degrees or knowledge of bits, bytes, interpreters, or service workers. It only requires you to see this development world from two perspectives at the same time while keeping another idea in mind, Object Modeling.","title":"What Layer of Abstraction are We?"},{"location":"module-2/windowMethods/","text":"The Window Object A few lesson earlier you used the alert() method on the Window object but the Window object has far more abilities than just signaling an alert! In fact, it has 31 properties, 26 methods, and 80 events in total. You can learn to use each of them by reading the documentation on them. For now, let's look at two of them .open() and .close() just to get familiar with the process of using them. Window.open & Window.close Methods These methods, respectively, open and close a new window. Use that code you've been playing with to follow along: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!-- 101-onlineClothingStore/index.html --> < body > < button onclick = \"sayHello();\" > Click Me </ button > < button onclick = \"sayHi();\" > Click Me Too </ button > < button onclick = \"openANewWindow();\" > Open </ button > < script > let secondWindow ; function sayHello (){ alert ( 'Hello, Window.alert Method!' ) }; function sayHi (){ console . log ( 'Hi, Console.log Method!' ) }; function openANewWindow () { secondWindow = window . open ( \"\" , \"myWindow\" , \"width=400, height=300\" ); } </ script > </ body > There are a few more bits of syntax to take in. We created a new function called openANewWindow and call it with a new button to onclick event. But there's something new going on at the top of the Script element and inside the openANewWindow function declaration. The let keyword you see up there signifies a place to hold a bit of data. We call this a variable because the bit of data that's held in these things usually change and we don't always know what value will be there, we just know we'll need to reference it later. Think of how you might build a calculator. When the user types the first input you only know the number could be between -\u221e and \u221e; the same goes for the second input. Because of this programming challenge we have to create a place for the values the user inputs to be held until we know if we're going to add, subtract, multiply, or divide the numbers. This \"place to hold values\" is called a variable and we use the keyword let to communicate that in JavaScript. After the keyword let we see secondWindow . This is the name of the variable and it\u2019s used just the same way we name our functions, so we can reference them later in our program. It's important to know you can name your variables anything you want as long as they don't begin with a number(0-9) and are not one of JavaScript's keywords . The second guideline about naming variables is that they usually have descriptive names and are camelCased ; secondWindow is a descriptive name for this variable it starts with a lower-case letter and has a capitalized letter at the beginning of its next word. This particular variable would be described as declared but not defined . Try it. Go to your DevTools, open the console tab and type secondWindow + Enter . What do you get? You should get \"undefined\" as a return value. This is because the variable, the space for data, is declared but it has no value. Click the \"Open\" Button and re-type secondWindow in the console. What do you get? You should get something like: Window {window: Window, self: Window, document: document, name: \"myWindow\", location: Location, \u2026} - This is another Window object opened by the browser and the properties and values you see listed are the key/value pairs of that new Window Object. The reason you're able to see these properties is because you saved a reference to this new Window object in the variable secondWindow and are now listing that data out in the Console. Window.Close As you would expect there is an opposite method to the Open method, close() . Go ahead and create a function that calls window.close() and run it 1 2 3 4 5 6 7 8 <!-- 101-onlineClothingStore/index.html --> < button onclick = \"closeTheNewWindow();\" > Close </ button > < script > function closeTheNewWindow () { window . close (); } </ script > What happened? Yeah, I tricked you. This code tells our current window to execute its own close() method. But we want instead for this Window to close the other window. Hold Cmd + Shift + T (Macs) or Ctrl + Shift + T (Windows) to reopen that tab or simply relaunch Live Server. The way we close this second window from our current window is to use that same variable we referenced in the Console to list out its properties. If we can get to its properties, we can get to its methods! Replace window. with secondWindow. and see what happens. NOTE: You'll have to open the second smaller window before you can close it again. Know your Docs W3S Docs - HTML Events W3S Docs - Window Object","title":"Window Methods"},{"location":"module-2/windowMethods/#the-window-object","text":"A few lesson earlier you used the alert() method on the Window object but the Window object has far more abilities than just signaling an alert! In fact, it has 31 properties, 26 methods, and 80 events in total. You can learn to use each of them by reading the documentation on them. For now, let's look at two of them .open() and .close() just to get familiar with the process of using them.","title":"The Window Object"},{"location":"module-2/windowMethods/#windowopen-windowclose-methods","text":"These methods, respectively, open and close a new window. Use that code you've been playing with to follow along: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!-- 101-onlineClothingStore/index.html --> < body > < button onclick = \"sayHello();\" > Click Me </ button > < button onclick = \"sayHi();\" > Click Me Too </ button > < button onclick = \"openANewWindow();\" > Open </ button > < script > let secondWindow ; function sayHello (){ alert ( 'Hello, Window.alert Method!' ) }; function sayHi (){ console . log ( 'Hi, Console.log Method!' ) }; function openANewWindow () { secondWindow = window . open ( \"\" , \"myWindow\" , \"width=400, height=300\" ); } </ script > </ body > There are a few more bits of syntax to take in. We created a new function called openANewWindow and call it with a new button to onclick event. But there's something new going on at the top of the Script element and inside the openANewWindow function declaration. The let keyword you see up there signifies a place to hold a bit of data. We call this a variable because the bit of data that's held in these things usually change and we don't always know what value will be there, we just know we'll need to reference it later. Think of how you might build a calculator. When the user types the first input you only know the number could be between -\u221e and \u221e; the same goes for the second input. Because of this programming challenge we have to create a place for the values the user inputs to be held until we know if we're going to add, subtract, multiply, or divide the numbers. This \"place to hold values\" is called a variable and we use the keyword let to communicate that in JavaScript. After the keyword let we see secondWindow . This is the name of the variable and it\u2019s used just the same way we name our functions, so we can reference them later in our program. It's important to know you can name your variables anything you want as long as they don't begin with a number(0-9) and are not one of JavaScript's keywords . The second guideline about naming variables is that they usually have descriptive names and are camelCased ; secondWindow is a descriptive name for this variable it starts with a lower-case letter and has a capitalized letter at the beginning of its next word. This particular variable would be described as declared but not defined . Try it. Go to your DevTools, open the console tab and type secondWindow + Enter . What do you get? You should get \"undefined\" as a return value. This is because the variable, the space for data, is declared but it has no value. Click the \"Open\" Button and re-type secondWindow in the console. What do you get? You should get something like: Window {window: Window, self: Window, document: document, name: \"myWindow\", location: Location, \u2026} - This is another Window object opened by the browser and the properties and values you see listed are the key/value pairs of that new Window Object. The reason you're able to see these properties is because you saved a reference to this new Window object in the variable secondWindow and are now listing that data out in the Console.","title":"Window.open &amp; Window.close Methods"},{"location":"module-2/windowMethods/#windowclose","text":"As you would expect there is an opposite method to the Open method, close() . Go ahead and create a function that calls window.close() and run it 1 2 3 4 5 6 7 8 <!-- 101-onlineClothingStore/index.html --> < button onclick = \"closeTheNewWindow();\" > Close </ button > < script > function closeTheNewWindow () { window . close (); } </ script > What happened? Yeah, I tricked you. This code tells our current window to execute its own close() method. But we want instead for this Window to close the other window. Hold Cmd + Shift + T (Macs) or Ctrl + Shift + T (Windows) to reopen that tab or simply relaunch Live Server. The way we close this second window from our current window is to use that same variable we referenced in the Console to list out its properties. If we can get to its properties, we can get to its methods! Replace window. with secondWindow. and see what happens. NOTE: You'll have to open the second smaller window before you can close it again.","title":"Window.Close"},{"location":"module-2/windowMethods/#know-your-docs","text":"W3S Docs - HTML Events W3S Docs - Window Object","title":"Know your Docs"},{"location":"module-3/asynchronousCode/","text":"Asynchronous Code \u201cTalent is cheaper than table salt. What separates the talented individual from the successful one is a lot of hard work.\u201d \u2013Stephen King Overview Additional Resources YT, Web Dev Simplified - Asynchronous vs Synchronous Reference, Eloquent JavaScript - Async/Sync Code Blog, GitHub - States & Fates Don't worry, if all of this is a little more heady than it needs to be right now, you'll be practicing it more in your 200 Level class and building servers that return data to these promises in your 300 level class. In this course, you're just getting introduced and asked to request data to build simple web pages. Know Your Docs MDN Docs - title","title":"Asynchronous Code"},{"location":"module-3/asynchronousCode/#asynchronous-code","text":"\u201cTalent is cheaper than table salt. What separates the talented individual from the successful one is a lot of hard work.\u201d \u2013Stephen King","title":"Asynchronous Code"},{"location":"module-3/asynchronousCode/#overview","text":"","title":"Overview"},{"location":"module-3/asynchronousCode/#additional-resources","text":"YT, Web Dev Simplified - Asynchronous vs Synchronous Reference, Eloquent JavaScript - Async/Sync Code Blog, GitHub - States & Fates Don't worry, if all of this is a little more heady than it needs to be right now, you'll be practicing it more in your 200 Level class and building servers that return data to these promises in your 300 level class. In this course, you're just getting introduced and asked to request data to build simple web pages.","title":"Additional Resources"},{"location":"module-3/asynchronousCode/#know-your-docs","text":"MDN Docs - title","title":"Know Your Docs"},{"location":"module-3/buildYourNetwork/","text":"Build Your Network I don't like the term networking. It makes connection sound phony and cheap. Instead I like to think of it as building my network. Above you learned that we're all connected in more ways than we can imagine. So when you're talking to people truly reach out to them. Care for them. Practice genuine curiosity in them and I promise you won't have a hard time talk with people. Join a Meetup This is the part of the course we'd suggest our students to begin attending a meetup. Obviously in the current pandemic we can't do that. For now, read about why you should plan to attend them in the future and set a reminder on your calendar in a few months to look for a meetup of interest. Meetups are a wonderful way to meet people with interests similar to yours. At meetup.com , you can find reasons to get out of the house and talk to new people every day. Use this to your advantage, and meet other developers, coding students, and recruiters! Remember, this industry is so new, and so full of people tired of the typical corporate world, that it naturally invites \"n00bs.\" The majority of people who work for tech companies are friendly, and willing to share their experience and knowledge to bring everyone around them up. Schedule a reminder to find a meetup. Find a meetup group. Reach out to someone in your class, and plan to go/zoom to a coding meetup together. Attend regularly.","title":"Develop - Build Your Network"},{"location":"module-3/buildYourNetwork/#build-your-network","text":"I don't like the term networking. It makes connection sound phony and cheap. Instead I like to think of it as building my network. Above you learned that we're all connected in more ways than we can imagine. So when you're talking to people truly reach out to them. Care for them. Practice genuine curiosity in them and I promise you won't have a hard time talk with people.","title":"Build Your Network"},{"location":"module-3/buildYourNetwork/#join-a-meetup","text":"This is the part of the course we'd suggest our students to begin attending a meetup. Obviously in the current pandemic we can't do that. For now, read about why you should plan to attend them in the future and set a reminder on your calendar in a few months to look for a meetup of interest. Meetups are a wonderful way to meet people with interests similar to yours. At meetup.com , you can find reasons to get out of the house and talk to new people every day. Use this to your advantage, and meet other developers, coding students, and recruiters! Remember, this industry is so new, and so full of people tired of the typical corporate world, that it naturally invites \"n00bs.\" The majority of people who work for tech companies are friendly, and willing to share their experience and knowledge to bring everyone around them up. Schedule a reminder to find a meetup. Find a meetup group. Reach out to someone in your class, and plan to go/zoom to a coding meetup together. Attend regularly.","title":"Join a Meetup"},{"location":"module-3/class-10/","text":"Class 10: TicTacToe \u201cThere is no royal road to anything. One thing at a time, all things in succession. That which grows fast, withers as rapidly. That which grows slowly, endures.\u201d \u2013Josiah Gilbert Holland Greet, Outline, and Objectify Today we're going to: OBJECTIVE: After this class students will have a firm understanding of: Multi-Dimensional Arrays Representational Data Conditional Programming Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time TTT Fun Time - 60 mins Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins TicTacToe Back in Class 5 you built a simple TicTacToe Game . If you remember, it didn't have logic that told who or when someone won. Today, let's have some fun playing with JavaScript and let's see if we can all learn how to think a little more programmatically!! Before we begin, let's create a new branch on our TicTacToe-101 repo. Go find its directory. Make sure you're on the master / main branch. Use the proper command to create a new branch named TTT-Logic and switch to it. Once you've done that let's move ahead! When you finish your TTT board you were able to add \"X\"s and \"O\"s as well as clear the board. But now we'll need to compare the data inside those boxes to a set of \"rules\" to know if there is a win. To do this we have two problems to overcome: We have to access the data. We have to know the rules. Let's start with the rules. The \"set of rules\" might look something like this: Horizontal Win, a.k.a, If row 0 equals all \"X\"s or \"O\"s: 1 2 3 if (( board [ 0 ][ 0 ] == \"X\" && board [ 0 ][ 1 ] == \"X\" && board [ 0 ][ 2 ] == \"X\" ) || ( board [ 0 ][ 0 ] == \"O\" && board [ 0 ][ 1 ] == \"O\" && board [ 0 ][ 2 ] == \"O\" ) ) This could be repeated for rows 1 and 2. Vertical Wins, a.k.a, if column 0 equals all \"X\"s or \"O\"s: 1 2 3 if (( board [ 0 ][ 0 ] == \"X\" && board [ 1 ][ 0 ] == \"X\" && board [ 2 ][ 0 ] == \"X\" ) || ( board [ 0 ][ 0 ] == \"O\" && board [ 1 ][ 0 ] == \"O\" && board [ 2 ][ 0 ] == \"O\" ) ) This could be repeated for the next two columns. Diagonal Wins, a.k.a, If there is a line created diagonally across the board with \"X\"s or with \"O\"s: 1 2 3 if (( board [ 0 ][ 0 ] == \"X\" && board [ 1 ][ 1 ] == \"X\" && board [ 2 ][ 2 ] == \"X\" ) || ( board [ 0 ][ 0 ] == \"O\" && board [ 1 ][ 1 ] == \"O\" && board [ 2 ][ 2 ] == \"O\" ) ) This would be reversed for the opposite direction. NOTE: You just saw new characters: == , || and && . If you look at the docs on W3S about Comparison Operators you'll see that == means \"is-equal-to\", || means \"or\" while && means \"and\". Now back to the first problem: Accessing the Data. We could use the getElementById method to access each box on the screen by it's value or innerHTML but this would be very expensive for computing power. So instead let's create a multi-dimensional array that can hold a representational data structure for our TTT board. Go to the top your scripts.js file and create an array called board with three arrays inside of it. Each of these inner arrays should have three places held with empty quotes: \"\" , separated by commas, , . If you look back up at those if statements you might be able to interpret that each one is checking to see what is inside each of the indexes of the arrays. How do you create the representation of the data? In your addMarker function in scripts.js can you use the following code to set the value of each index in the board array to match what's on the screen? So in the end your addMarker function will insert an \"X\" or \"O\" in the DOM for the user to see as well as in the multi-dimensional array, board for your JavaScript to easily access. Inside addMarker add this line: board[row][column] = currentMarker But how do you get the row and column ? If you change the ids of each of the <td> s in the TTT board from top-left to say 0-0 & middle-middle to maybe 1-1 , etc... You could create id s that match their bracket-notation location in the board array. Then you could use the parseInt method to create numbers that you could use to access the arrays and indexes of board: These variables hold the first and third letters in the element's id. const row = parseInt(element.id.charAt(0)) const column = parseInt(element.id.charAt(2)) What's charAt() doing? But now you might have another problem, you're onclick might not work with your addMarker function because you've changed class names. If it's not, stop here and make sure you do get it working before moving on. Why isn't it working? Now for the checkForWin . This bit will seem a little complicated at first but stay cool and breath. Copy/Paste the following code snippet into the bottom of your scripts.js file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const checkForWin = () => { if ( horizontalWin () || verticalWin () || diagonalWin ()) { window . alert ( `Player ${ currentMarker } won!` ) } else { changeMarker () } } const horizontalWin = () => { // Your code here to check for horizontal wins } const verticalWin = () => { // Your code here to check for vertical wins } const diagonalWin = () => { // Your code here to check for diagonal wins } Currently, at the end of your addMarker function you tell the computer to change the currentMarker from \"X\" to \"O\" or \"O\" to \"X\" . But you wouldn't want to do that if the game was won. So before telling the computer to change the currentMarker you would want it to first checkForWin . The code snippet you copy/pasted has a function called checkForWin which you'll notice calls changeMarker if none of the winning rules(see above), are met. So inside addMarker you can replace the changeMarker call out for checkForWin because changeMarker will still be called if the other functions don't return true . Now for the last part... Look back at the rules laid out above in those long if statements. Can you figure out how to write the if statements that will go inside horizontalWin , verticalWin , and diagonalWin using the exact code given to you in the rules and the code snippet? You'll have to expand upon these rules to make multiple if/if else/else statements for each to work. HAVE FUN and DON'T STRESS if you don't figure it out yet. Follow Up Can a group show their code off to the class? Can one of the groups walk us through how this app works? Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create TTT-Logic Assignment Create Class 10 Blog Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) You've been working on your Barbershop Capstone Projects for a week now but if you have a little bit of time you should jump back on it! It's due this Sunday! Next week we'll take our JavaScript skills to a whole new level when we start fetching data and rendering it on our web pages!!!","title":"Class 10 TicTacToe"},{"location":"module-3/class-10/#class-10-tictactoe","text":"\u201cThere is no royal road to anything. One thing at a time, all things in succession. That which grows fast, withers as rapidly. That which grows slowly, endures.\u201d \u2013Josiah Gilbert Holland","title":"Class 10: TicTacToe"},{"location":"module-3/class-10/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: After this class students will have a firm understanding of: Multi-Dimensional Arrays Representational Data Conditional Programming Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time TTT Fun Time - 60 mins Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-10/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-3/class-10/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-10/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-10/#creation-time-60-90-mins","text":"","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-10/#tictactoe","text":"Back in Class 5 you built a simple TicTacToe Game . If you remember, it didn't have logic that told who or when someone won. Today, let's have some fun playing with JavaScript and let's see if we can all learn how to think a little more programmatically!! Before we begin, let's create a new branch on our TicTacToe-101 repo. Go find its directory. Make sure you're on the master / main branch. Use the proper command to create a new branch named TTT-Logic and switch to it. Once you've done that let's move ahead! When you finish your TTT board you were able to add \"X\"s and \"O\"s as well as clear the board. But now we'll need to compare the data inside those boxes to a set of \"rules\" to know if there is a win. To do this we have two problems to overcome: We have to access the data. We have to know the rules. Let's start with the rules. The \"set of rules\" might look something like this: Horizontal Win, a.k.a, If row 0 equals all \"X\"s or \"O\"s: 1 2 3 if (( board [ 0 ][ 0 ] == \"X\" && board [ 0 ][ 1 ] == \"X\" && board [ 0 ][ 2 ] == \"X\" ) || ( board [ 0 ][ 0 ] == \"O\" && board [ 0 ][ 1 ] == \"O\" && board [ 0 ][ 2 ] == \"O\" ) ) This could be repeated for rows 1 and 2. Vertical Wins, a.k.a, if column 0 equals all \"X\"s or \"O\"s: 1 2 3 if (( board [ 0 ][ 0 ] == \"X\" && board [ 1 ][ 0 ] == \"X\" && board [ 2 ][ 0 ] == \"X\" ) || ( board [ 0 ][ 0 ] == \"O\" && board [ 1 ][ 0 ] == \"O\" && board [ 2 ][ 0 ] == \"O\" ) ) This could be repeated for the next two columns. Diagonal Wins, a.k.a, If there is a line created diagonally across the board with \"X\"s or with \"O\"s: 1 2 3 if (( board [ 0 ][ 0 ] == \"X\" && board [ 1 ][ 1 ] == \"X\" && board [ 2 ][ 2 ] == \"X\" ) || ( board [ 0 ][ 0 ] == \"O\" && board [ 1 ][ 1 ] == \"O\" && board [ 2 ][ 2 ] == \"O\" ) ) This would be reversed for the opposite direction. NOTE: You just saw new characters: == , || and && . If you look at the docs on W3S about Comparison Operators you'll see that == means \"is-equal-to\", || means \"or\" while && means \"and\". Now back to the first problem: Accessing the Data. We could use the getElementById method to access each box on the screen by it's value or innerHTML but this would be very expensive for computing power. So instead let's create a multi-dimensional array that can hold a representational data structure for our TTT board. Go to the top your scripts.js file and create an array called board with three arrays inside of it. Each of these inner arrays should have three places held with empty quotes: \"\" , separated by commas, , . If you look back up at those if statements you might be able to interpret that each one is checking to see what is inside each of the indexes of the arrays. How do you create the representation of the data? In your addMarker function in scripts.js can you use the following code to set the value of each index in the board array to match what's on the screen? So in the end your addMarker function will insert an \"X\" or \"O\" in the DOM for the user to see as well as in the multi-dimensional array, board for your JavaScript to easily access. Inside addMarker add this line: board[row][column] = currentMarker But how do you get the row and column ? If you change the ids of each of the <td> s in the TTT board from top-left to say 0-0 & middle-middle to maybe 1-1 , etc... You could create id s that match their bracket-notation location in the board array. Then you could use the parseInt method to create numbers that you could use to access the arrays and indexes of board: These variables hold the first and third letters in the element's id. const row = parseInt(element.id.charAt(0)) const column = parseInt(element.id.charAt(2)) What's charAt() doing? But now you might have another problem, you're onclick might not work with your addMarker function because you've changed class names. If it's not, stop here and make sure you do get it working before moving on. Why isn't it working? Now for the checkForWin . This bit will seem a little complicated at first but stay cool and breath. Copy/Paste the following code snippet into the bottom of your scripts.js file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const checkForWin = () => { if ( horizontalWin () || verticalWin () || diagonalWin ()) { window . alert ( `Player ${ currentMarker } won!` ) } else { changeMarker () } } const horizontalWin = () => { // Your code here to check for horizontal wins } const verticalWin = () => { // Your code here to check for vertical wins } const diagonalWin = () => { // Your code here to check for diagonal wins } Currently, at the end of your addMarker function you tell the computer to change the currentMarker from \"X\" to \"O\" or \"O\" to \"X\" . But you wouldn't want to do that if the game was won. So before telling the computer to change the currentMarker you would want it to first checkForWin . The code snippet you copy/pasted has a function called checkForWin which you'll notice calls changeMarker if none of the winning rules(see above), are met. So inside addMarker you can replace the changeMarker call out for checkForWin because changeMarker will still be called if the other functions don't return true . Now for the last part... Look back at the rules laid out above in those long if statements. Can you figure out how to write the if statements that will go inside horizontalWin , verticalWin , and diagonalWin using the exact code given to you in the rules and the code snippet? You'll have to expand upon these rules to make multiple if/if else/else statements for each to work. HAVE FUN and DON'T STRESS if you don't figure it out yet.","title":"TicTacToe"},{"location":"module-3/class-10/#follow-up","text":"Can a group show their code off to the class? Can one of the groups walk us through how this app works?","title":"Follow Up"},{"location":"module-3/class-10/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-3/class-10/#exit-recap-attendance-and-reminders-5-mins","text":"Create TTT-Logic Assignment Create Class 10 Blog Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) You've been working on your Barbershop Capstone Projects for a week now but if you have a little bit of time you should jump back on it! It's due this Sunday! Next week we'll take our JavaScript skills to a whole new level when we start fetching data and rendering it on our web pages!!!","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/class-11/","text":"Class 11: ToDo List \u201cHe who has a why to live can bear almost any how.\u201c \u2013Friedrich Nietzsche Greet, Outline, and Objectify Today we're going to: OBJECTIVE: After this class students will have a firm understanding of: Using Fetch API to interact with APIs outside of the browser Read documentation and use APIs Loop over JavaScript arrays and create multiple items Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Todo List - 80 mins Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today you're going to use the Fetch API on the browser to fetch data from the JSON Placeholder API which will provide you with dummy data to create a todo list which will get you ready for next class, where you'll be filtering those todos!! Create and clone a new repo with a README called: \" Dummy-Data-Todo-List \". Go ahead and turn in your homework now (if you're instructor creates the place for it. ;) Create files for HTML and JavaScript. (You can add CSS later.) You'll start with some code like this: The JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // We'll pre-populate this array with a couple objects just so it's not undefined if your internet connection isn't working properly. let arrayOfTodos = [ { \"userId\" : 14 , \"id\" : 1 , \"title\" : \"delectus aut autem\" , \"completed\" : false }, { \"userId\" : 20 , \"id\" : 2 , \"title\" : \"delectus aut autem\" , \"completed\" : false }] const fetchTodos = () => { fetch ( 'https://jsonplaceholder.typicode.com/todos' ) . then ( ( response ) => response . json ()) . then ( ( json ) => arrayOfTodos = json ) } const logTodos = () => { console . log ( arrayOfTodos ) } const populateTodos = () => { } The HTML 1 2 3 4 5 6 < button onclick = \"fetchTodos()\" > Fetch Todos </ button > < button onclick = \"logTodos()\" > Log Todos </ button > < button onclick = \"populateTodos()\" > Populate Todos </ button > < ol id = \"todo-list\" > <!-- LIs will go here --> </ ol > Notice the <ol></ol> element. This is an Ordered List that takes only <li></li> elements, or List Items . Use the Ol element to insert new Li element for each todo in the arrayOfTodos . Notice to that each object comes inside curly-braces , { } . This is called a JavaScript Object. You can access an object's properties with dot-notation . See the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const arrayOfTodos1 = [ { \"userId\" : 14 , \"id\" : 1 , \"title\" : \"delectus aut autem\" , \"completed\" : false }, { \"userId\" : 20 , \"id\" : 2 , \"title\" : \"delectus aut autem\" , \"completed\" : false } ] console . log ( arrayOfTodos [ 0 ]. userId ) // => 14 console . log ( arrayOfTodos [ 1 ]. userId ) // => 20 After you've been able to access and console the properties on any object in the array your next step is to insert that data into an li element and insert the li into the ol . Start with getting just the first item and its title property. Then capture the ol item into a variable (getElementById) createElement to make a new LI createTextNode inside the li using the title property. Now append the text to the new element Then append the element to the ol element. Put all of that inside your populateTodos function. git status , add , commit , push Now that you have one element created and showing up on the screen, put the same code inside a for loop and iterate over the length of the array. But now just change out [0] for [i] ! (Refer back to your for loop lesson if needed) Remember to commit often. Exit Recap, Attendance, and Reminders, 5 mins Create JS-ToDo List Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable)","title":"Class 11 ToDo List"},{"location":"module-3/class-11/#class-11-todo-list","text":"\u201cHe who has a why to live can bear almost any how.\u201c \u2013Friedrich Nietzsche","title":"Class 11: ToDo List"},{"location":"module-3/class-11/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: After this class students will have a firm understanding of: Using Fetch API to interact with APIs outside of the browser Read documentation and use APIs Loop over JavaScript arrays and create multiple items Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Todo List - 80 mins Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-11/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-3/class-11/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-11/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-11/#creation-time-60-90-mins","text":"Today you're going to use the Fetch API on the browser to fetch data from the JSON Placeholder API which will provide you with dummy data to create a todo list which will get you ready for next class, where you'll be filtering those todos!! Create and clone a new repo with a README called: \" Dummy-Data-Todo-List \". Go ahead and turn in your homework now (if you're instructor creates the place for it. ;) Create files for HTML and JavaScript. (You can add CSS later.) You'll start with some code like this: The JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // We'll pre-populate this array with a couple objects just so it's not undefined if your internet connection isn't working properly. let arrayOfTodos = [ { \"userId\" : 14 , \"id\" : 1 , \"title\" : \"delectus aut autem\" , \"completed\" : false }, { \"userId\" : 20 , \"id\" : 2 , \"title\" : \"delectus aut autem\" , \"completed\" : false }] const fetchTodos = () => { fetch ( 'https://jsonplaceholder.typicode.com/todos' ) . then ( ( response ) => response . json ()) . then ( ( json ) => arrayOfTodos = json ) } const logTodos = () => { console . log ( arrayOfTodos ) } const populateTodos = () => { } The HTML 1 2 3 4 5 6 < button onclick = \"fetchTodos()\" > Fetch Todos </ button > < button onclick = \"logTodos()\" > Log Todos </ button > < button onclick = \"populateTodos()\" > Populate Todos </ button > < ol id = \"todo-list\" > <!-- LIs will go here --> </ ol > Notice the <ol></ol> element. This is an Ordered List that takes only <li></li> elements, or List Items . Use the Ol element to insert new Li element for each todo in the arrayOfTodos . Notice to that each object comes inside curly-braces , { } . This is called a JavaScript Object. You can access an object's properties with dot-notation . See the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const arrayOfTodos1 = [ { \"userId\" : 14 , \"id\" : 1 , \"title\" : \"delectus aut autem\" , \"completed\" : false }, { \"userId\" : 20 , \"id\" : 2 , \"title\" : \"delectus aut autem\" , \"completed\" : false } ] console . log ( arrayOfTodos [ 0 ]. userId ) // => 14 console . log ( arrayOfTodos [ 1 ]. userId ) // => 20 After you've been able to access and console the properties on any object in the array your next step is to insert that data into an li element and insert the li into the ol . Start with getting just the first item and its title property. Then capture the ol item into a variable (getElementById) createElement to make a new LI createTextNode inside the li using the title property. Now append the text to the new element Then append the element to the ol element. Put all of that inside your populateTodos function. git status , add , commit , push Now that you have one element created and showing up on the screen, put the same code inside a for loop and iterate over the length of the array. But now just change out [0] for [i] ! (Refer back to your for loop lesson if needed) Remember to commit often.","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-11/#exit-recap-attendance-and-reminders-5-mins","text":"Create JS-ToDo List Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable)","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/class-12/","text":"Class 12: Filtering ToDo List \u201cWhen written in Chinese the word \u201ccrisis\u201d is composed of two characters \u2013 one represents danger and the other represents opportunity. \u201c \u2013John F. Kennedy Greet, Outline, and Objectify Today we're going to: OBJECTIVE: After this class students will have a firm understanding of: Using callback functions Filtering Data Project Planning Final 101 Project Planning Discussion Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Filter Dummy API ToDos Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Final 101 Project Planning Discussion As you saw in your homework, next week you'll begin work on your new Portfolio Website, before we get to that let's gave a quick talk about what this is: Why: you will need to have a very sharp portfolio to represent you out there in the job market and you're first site is likely not to be your best work. What? A responsive portfolio website that includes, A Landing page An About page A Resume page A Contact Me page An image gallery, so to speak, that will serve as your Portfolio Page. It will have thumbnails of all the websites you've built and hosted up to this point, that when clicked they will take you to those websites. design for phone, tablet, and laptop How: Team work and planning. So let's partner up: First based on similar work schedules Secondly, based on similar ideas of their website....so Let's have students that are willing to show their ideas off. Spend a few minutes chatting to find a partner. RocketChat/Chat your instructor you and your partner's name (one per group is fine.) With that, let's move to Trello and continue our discussion on planning. Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins We'll still be using the same JSON Placeholder API and the same /todos endpoint but this time you're going to only show/ filter todos created by one user, i.e. in the 200 todos you fetch you'll see there are 10 different userIds . With the input of a number and the click of a button your todo list should only show the todos of a selected userId . The Specifications/Specs Using the assignment from yesterday, create a branch called: \" Todo-Filtering \". Fetch the same data. Store the data in a variable. Add an input for the userID . This input should only take in a number from 1 - 10 . Add a button that when clicked will: clear the previous todos from the view and populate it with only todos with the userID that matches the number inputted. then stores the currently filtered todos in a variable so that ... You can create two more buttons that when clicked: removes those todos from the view and shows only todos that are either: completed not completed HINT-1: When you're removing and repopulating, remember that you're removing them from the DOM and not the array. HINT-2: Take these tasks one at a time. Push Yourself Further Build another column for Complete todos. Sort the todos on just one click, Show only the selected userID's todos displays the Completed todos in one column and the incomplete todos in another. Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Filter Todos Assignment Create Class 12 Blog Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) In the next two week, you'll have class time to work on your Portfolio Website Rebuild but it won't be enough time to complete it because we'll be learning new tricks that will spiff up your pages. Talk with your partner over the next few days so you have a good idea of what you'd like to start on first thing next week!","title":"Class 12 Filtering ToDos"},{"location":"module-3/class-12/#class-12-filtering-todo-list","text":"\u201cWhen written in Chinese the word \u201ccrisis\u201d is composed of two characters \u2013 one represents danger and the other represents opportunity. \u201c \u2013John F. Kennedy","title":"Class 12: Filtering ToDo List"},{"location":"module-3/class-12/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: After this class students will have a firm understanding of: Using callback functions Filtering Data Project Planning Final 101 Project Planning Discussion Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Filter Dummy API ToDos Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-12/#final-101-project-planning-discussion","text":"As you saw in your homework, next week you'll begin work on your new Portfolio Website, before we get to that let's gave a quick talk about what this is: Why: you will need to have a very sharp portfolio to represent you out there in the job market and you're first site is likely not to be your best work. What? A responsive portfolio website that includes, A Landing page An About page A Resume page A Contact Me page An image gallery, so to speak, that will serve as your Portfolio Page. It will have thumbnails of all the websites you've built and hosted up to this point, that when clicked they will take you to those websites. design for phone, tablet, and laptop How: Team work and planning. So let's partner up: First based on similar work schedules Secondly, based on similar ideas of their website....so Let's have students that are willing to show their ideas off. Spend a few minutes chatting to find a partner. RocketChat/Chat your instructor you and your partner's name (one per group is fine.) With that, let's move to Trello and continue our discussion on planning.","title":"Final 101 Project Planning Discussion"},{"location":"module-3/class-12/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-3/class-12/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-12/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-12/#creation-time-60-90-mins","text":"We'll still be using the same JSON Placeholder API and the same /todos endpoint but this time you're going to only show/ filter todos created by one user, i.e. in the 200 todos you fetch you'll see there are 10 different userIds . With the input of a number and the click of a button your todo list should only show the todos of a selected userId .","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-12/#the-specificationsspecs","text":"Using the assignment from yesterday, create a branch called: \" Todo-Filtering \". Fetch the same data. Store the data in a variable. Add an input for the userID . This input should only take in a number from 1 - 10 . Add a button that when clicked will: clear the previous todos from the view and populate it with only todos with the userID that matches the number inputted. then stores the currently filtered todos in a variable so that ... You can create two more buttons that when clicked: removes those todos from the view and shows only todos that are either: completed not completed HINT-1: When you're removing and repopulating, remember that you're removing them from the DOM and not the array. HINT-2: Take these tasks one at a time.","title":"The Specifications/Specs"},{"location":"module-3/class-12/#push-yourself-further","text":"Build another column for Complete todos. Sort the todos on just one click, Show only the selected userID's todos displays the Completed todos in one column and the incomplete todos in another.","title":"Push Yourself Further"},{"location":"module-3/class-12/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-3/class-12/#exit-recap-attendance-and-reminders-5-mins","text":"Create Filter Todos Assignment Create Class 12 Blog Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) In the next two week, you'll have class time to work on your Portfolio Website Rebuild but it won't be enough time to complete it because we'll be learning new tricks that will spiff up your pages. Talk with your partner over the next few days so you have a good idea of what you'd like to start on first thing next week!","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/class-9/","text":"Class 9: Even-Odd List \u201cWhat the caterpillar calls the end of the world, the master calls a butterfly. \u201c \u2014Richard Bach Greet, Outline, and Objectify Today we're going to: OBJECTIVE: After this class students will have a firm understanding of: Changing HTML Element Properties with JavaScript How JavaScript allows us to interact with the DOM Capturing DOM Events like onclick and onkeyup Questions for Student Led Discussion Student Presentations Creation Time Even-Odd List Follow Along Interview Challenge Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Student Presentations, 15 mins See Student Presentations List Creation Time, 30 mins Divide the class into pairs and work together. This is going to be a follow along so go ahead and create a new repo named evenOdd-lists . git clone Follow these instructions . Optional : If you'd like, you can copy/paste the CSS file, generic-styles.css , from this repo and link it to your index.html Follow Up Questions What methods are new to us here? What is the modulus? How does this relate to the CSS and HTML we've learned? How is JavaScript used in web page development? What did we learn? Interview Challenge, 15 mins See Your Challenge Here Exit Recap, Attendance, and Reminders, 5 mins Create EvenOdd Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable)","title":"Class 9 EvenOdd List"},{"location":"module-3/class-9/#class-9-even-odd-list","text":"\u201cWhat the caterpillar calls the end of the world, the master calls a butterfly. \u201c \u2014Richard Bach","title":"Class 9: Even-Odd List"},{"location":"module-3/class-9/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: After this class students will have a firm understanding of: Changing HTML Element Properties with JavaScript How JavaScript allows us to interact with the DOM Capturing DOM Events like onclick and onkeyup Questions for Student Led Discussion Student Presentations Creation Time Even-Odd List Follow Along Interview Challenge Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-9/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-3/class-9/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-9/#creation-time-30-mins","text":"Divide the class into pairs and work together. This is going to be a follow along so go ahead and create a new repo named evenOdd-lists . git clone Follow these instructions . Optional : If you'd like, you can copy/paste the CSS file, generic-styles.css , from this repo and link it to your index.html","title":"Creation Time, 30 mins"},{"location":"module-3/class-9/#follow-up-questions","text":"What methods are new to us here? What is the modulus? How does this relate to the CSS and HTML we've learned? How is JavaScript used in web page development? What did we learn?","title":"Follow Up Questions"},{"location":"module-3/class-9/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-9/#exit-recap-attendance-and-reminders-5-mins","text":"Create EvenOdd Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable)","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/consoleObject/","text":"The Console Object \u201cMost of us, swimming against the tides of trouble the world knows nothing about, need only a bit of praise or encouragement \u2013 and we will make the goal. \u201c \u2013Jerome Fleishman Overview Practice It Fork & Clone the 101-ConsoleIntro Repo . Open it in your text editor and use Live-Server to open it in your browser. Open the Inspector Tools and find the Console Tab Back in your text editor, go to the README file and work through the 5 challenges. Working with the Console If you practiced in the Try It Yourself section above you got used to writing the console.log() statement which will be the most prevalent command you'll use in the console. But moving forward, it's important to remember that the Console, like each of the HTML Elements, is just another object-thing that has properties and methods you can set and call when you need. We'll not cover them all but here are the common ones to remember: log() - Outputs a message to the console assert() - Takes two arguments. The first is a callback function and the second is a condition to be compared to. warn() - Writes a warning message labeled in yellow; .err() writes in red clear() - Clears the console count() - Logs the number of times that this particular call to count() has been called time() - Starts a timer (can track how long an operation takes) Take each of these methods into the repo you just cloned and write them throughout the code. Use count inside one of the functions that's called when you click a button. Use time at the top of each of those functions to time how long they take to execute. Add a button into your html file that calls the clear() method to wipe your console. Don't worry about assert you can use that in your projects in class if you like. Know Your Docs MDN Docs - Console Object(API) MDN Docs - window.onload MDN Docs - addEventListener MDN Docs - preventDefault JavaScript.info - Forms: Event and Method Submit Additional Resources YT, Zenva - How to Use the Console","title":"The Console Object"},{"location":"module-3/consoleObject/#the-console-object","text":"\u201cMost of us, swimming against the tides of trouble the world knows nothing about, need only a bit of praise or encouragement \u2013 and we will make the goal. \u201c \u2013Jerome Fleishman","title":"The Console Object"},{"location":"module-3/consoleObject/#overview","text":"","title":"Overview"},{"location":"module-3/consoleObject/#practice-it","text":"Fork & Clone the 101-ConsoleIntro Repo . Open it in your text editor and use Live-Server to open it in your browser. Open the Inspector Tools and find the Console Tab Back in your text editor, go to the README file and work through the 5 challenges.","title":"Practice It"},{"location":"module-3/consoleObject/#working-with-the-console","text":"If you practiced in the Try It Yourself section above you got used to writing the console.log() statement which will be the most prevalent command you'll use in the console. But moving forward, it's important to remember that the Console, like each of the HTML Elements, is just another object-thing that has properties and methods you can set and call when you need. We'll not cover them all but here are the common ones to remember: log() - Outputs a message to the console assert() - Takes two arguments. The first is a callback function and the second is a condition to be compared to. warn() - Writes a warning message labeled in yellow; .err() writes in red clear() - Clears the console count() - Logs the number of times that this particular call to count() has been called time() - Starts a timer (can track how long an operation takes) Take each of these methods into the repo you just cloned and write them throughout the code. Use count inside one of the functions that's called when you click a button. Use time at the top of each of those functions to time how long they take to execute. Add a button into your html file that calls the clear() method to wipe your console. Don't worry about assert you can use that in your projects in class if you like.","title":"Working with the Console"},{"location":"module-3/consoleObject/#know-your-docs","text":"MDN Docs - Console Object(API) MDN Docs - window.onload MDN Docs - addEventListener MDN Docs - preventDefault JavaScript.info - Forms: Event and Method Submit","title":"Know Your Docs"},{"location":"module-3/consoleObject/#additional-resources","text":"YT, Zenva - How to Use the Console","title":"Additional Resources"},{"location":"module-3/developSeries-attentionAndCollaboration/","text":"Collaborators over Competitors. Paying Attention over Getting Attention. For most of us, the world seems set up in a certain way. I am me and everyone else is they. I must survive, thrive, fight, and defend against they. They are against me and anyone that tries to help me is deceitful and manipulative. But why is this? Why do we strike out on the road of our life thinking every weary traveler we meet will somehow have been plotting against us even before we met them? Why is it that we think we must dominant and subdue those that are outside of us. Obviously, this doesn't mean physical domination but more of a mental, emotional, and financial domination. WE typically see others as a person that can give us money or take money from us. WE see others as a thing that can give us undying love and comfort. WE see others as competitive force that we must conquer. But what if it wasn't this way at all? What if actually the world is filled with a community of members that haven't spoken yet? That haven't dreamed together yet? They haven't communed together yet? In the TedTalk below, Joseph Gordon-Levitt speaks openly and honestly about the traps we fall into while seeking creative attention. There are trials we all face and pitfall we all will make but knowing about them will give us the opportunity to pick ourselves up when we fall into traps. Follow-Up Questions What are some potential benefits of Attention Giving to creative processes? What are some ways Attention Seeking can impact your life? When have you experienced Attention Seeking? Why do you think it comes up? When do you experience Attention Giving? How do you think you got there?","title":"Develop - Attention & Collaborators"},{"location":"module-3/developSeries-attentionAndCollaboration/#collaborators-over-competitors-paying-attention-over-getting-attention","text":"For most of us, the world seems set up in a certain way. I am me and everyone else is they. I must survive, thrive, fight, and defend against they. They are against me and anyone that tries to help me is deceitful and manipulative. But why is this? Why do we strike out on the road of our life thinking every weary traveler we meet will somehow have been plotting against us even before we met them? Why is it that we think we must dominant and subdue those that are outside of us. Obviously, this doesn't mean physical domination but more of a mental, emotional, and financial domination. WE typically see others as a person that can give us money or take money from us. WE see others as a thing that can give us undying love and comfort. WE see others as competitive force that we must conquer. But what if it wasn't this way at all? What if actually the world is filled with a community of members that haven't spoken yet? That haven't dreamed together yet? They haven't communed together yet? In the TedTalk below, Joseph Gordon-Levitt speaks openly and honestly about the traps we fall into while seeking creative attention. There are trials we all face and pitfall we all will make but knowing about them will give us the opportunity to pick ourselves up when we fall into traps.","title":"Collaborators over Competitors. Paying Attention over Getting Attention."},{"location":"module-3/developSeries-attentionAndCollaboration/#follow-up-questions","text":"What are some potential benefits of Attention Giving to creative processes? What are some ways Attention Seeking can impact your life? When have you experienced Attention Seeking? Why do you think it comes up? When do you experience Attention Giving? How do you think you got there?","title":"Follow-Up Questions"},{"location":"module-3/developSeries-cureImposterSyndrome/","text":"Develop Series: Curing Imposter Syndrome You might have heard of this at some point in your life and maybe you don't/didn't believe in it. Maybe you are skeptical and think that everything that we can accomplish is what is directly available to us. I hope to help you change that. I hope to guide you to finding that really and truly, the mind manifests sickness in the body as much as it manifests growth, change, and ability in the body. Think of the body as this gooey robot-avatar thing and the mind is the OS or Operating System of this gooey robot-avatar thing. It can be updated, reprogrammed, and optimized to run the body more efficiently. Truly! See how Dr. Alia Crum describes and PROVES it!! You're Not an Imposter As you make the transition from your past job to a career in this new and challenging field, you may at times doubt your ability to do the work \u2014 solving problems with software. This is normal; these doubts trouble or even plague people at the every-level of experience. ( If you never feel this way you're one of very few lucky ones. ) If you're not one of the lucky ones...read on. Look, right now you're learning a skill that you might have zero familiarity with. It requires a different, programmatic way of thinking and you might subconsciously believe you don't deserve good pay and a healthy creative work environment. Maybe you're allowing past experiences to shape your experience with learning to code. That's okay, forgive yourself and recognize that almost all of our students struggle with Imposter Syndrome . It's a real thing and people struggle with it even after they're hired!! In the talk below, Lou Solomon discusses how she first learned that anxiety, perfectionism, fear of failure, and self-doubt are the triggers and symptoms of Imposter Syndrome but moreover, she discusses why it's important to overcome this negative self-image and HOW she works on it everyday for herself. You're not an imposter. You're not in-over-your-head. And you're not a failure. And you're not a finished product! You're a human that is constantly being shaped, changed, improved, and currently learning something new and that always comes with challenges. Breathe, give yourself a break and later, when you need a reminder read this article on How To Deal with Imposter Syndrome . Imposter Action Item Post to @all in RocketChat that you are not an imposter. Go! Do it now! Find a place to write down for yourself this short message: \"I have not learned everything I need, yet!\" Place that message where you will see it every day for the rest of your time in code school. Maybe the bathroom mirror.... Find a Podcast Lastly, find a podcast to help you learn to code. A survey unveiled a staggering figure: 74% of Coding Students don't listen to podcasts to learn to code ! Don't be one of those students! Instead, take a look at a few of the podcasts below and begin listening to them in your car. Replace your radio noise with people talking about the thing you want to get good at and get paid to do! Try it out and let us know what you find. ShopTalk is probably the easiest podcast to get into. It focuses on Front-End development and involves listeners by answering their questions. If some of the things don't make sense when you first start, stick with it for a little while trying to figure it out. In this moment you're also learning to piece together information on your own. You're just learning a skill you didn't realize you actually needed. CodeNewbie is a great place to get encouragement and perspective. SOOOO many people, like you, have and are switching careers. Listening to their stories will help create a sense of place, purpose, and direction for you. Remember, you are part of a community whether you know it or not. Start listening to that community so you can benefit from knowing you're part of the community! There are plenty of other Web Development podcasts to follow and listen to but I recommend these two mentioned above first. As you mature as a web developer you will find yourself looking for more challenging topics and ideas to consider which you can find on other podcasts .","title":"Develop - Cure Imposter Syndrome"},{"location":"module-3/developSeries-cureImposterSyndrome/#develop-series-curing-imposter-syndrome","text":"You might have heard of this at some point in your life and maybe you don't/didn't believe in it. Maybe you are skeptical and think that everything that we can accomplish is what is directly available to us. I hope to help you change that. I hope to guide you to finding that really and truly, the mind manifests sickness in the body as much as it manifests growth, change, and ability in the body. Think of the body as this gooey robot-avatar thing and the mind is the OS or Operating System of this gooey robot-avatar thing. It can be updated, reprogrammed, and optimized to run the body more efficiently. Truly! See how Dr. Alia Crum describes and PROVES it!!","title":"Develop Series: Curing Imposter Syndrome"},{"location":"module-3/developSeries-cureImposterSyndrome/#youre-not-an-imposter","text":"As you make the transition from your past job to a career in this new and challenging field, you may at times doubt your ability to do the work \u2014 solving problems with software. This is normal; these doubts trouble or even plague people at the every-level of experience. ( If you never feel this way you're one of very few lucky ones. ) If you're not one of the lucky ones...read on. Look, right now you're learning a skill that you might have zero familiarity with. It requires a different, programmatic way of thinking and you might subconsciously believe you don't deserve good pay and a healthy creative work environment. Maybe you're allowing past experiences to shape your experience with learning to code. That's okay, forgive yourself and recognize that almost all of our students struggle with Imposter Syndrome . It's a real thing and people struggle with it even after they're hired!! In the talk below, Lou Solomon discusses how she first learned that anxiety, perfectionism, fear of failure, and self-doubt are the triggers and symptoms of Imposter Syndrome but moreover, she discusses why it's important to overcome this negative self-image and HOW she works on it everyday for herself. You're not an imposter. You're not in-over-your-head. And you're not a failure. And you're not a finished product! You're a human that is constantly being shaped, changed, improved, and currently learning something new and that always comes with challenges. Breathe, give yourself a break and later, when you need a reminder read this article on How To Deal with Imposter Syndrome .","title":"You're Not an Imposter"},{"location":"module-3/developSeries-cureImposterSyndrome/#imposter-action-item","text":"Post to @all in RocketChat that you are not an imposter. Go! Do it now! Find a place to write down for yourself this short message: \"I have not learned everything I need, yet!\" Place that message where you will see it every day for the rest of your time in code school. Maybe the bathroom mirror....","title":"Imposter Action Item"},{"location":"module-3/developSeries-cureImposterSyndrome/#find-a-podcast","text":"Lastly, find a podcast to help you learn to code. A survey unveiled a staggering figure: 74% of Coding Students don't listen to podcasts to learn to code ! Don't be one of those students! Instead, take a look at a few of the podcasts below and begin listening to them in your car. Replace your radio noise with people talking about the thing you want to get good at and get paid to do! Try it out and let us know what you find. ShopTalk is probably the easiest podcast to get into. It focuses on Front-End development and involves listeners by answering their questions. If some of the things don't make sense when you first start, stick with it for a little while trying to figure it out. In this moment you're also learning to piece together information on your own. You're just learning a skill you didn't realize you actually needed. CodeNewbie is a great place to get encouragement and perspective. SOOOO many people, like you, have and are switching careers. Listening to their stories will help create a sense of place, purpose, and direction for you. Remember, you are part of a community whether you know it or not. Start listening to that community so you can benefit from knowing you're part of the community! There are plenty of other Web Development podcasts to follow and listen to but I recommend these two mentioned above first. As you mature as a web developer you will find yourself looking for more challenging topics and ideas to consider which you can find on other podcasts .","title":"Find a Podcast"},{"location":"module-3/developSeries-handleFeelings/","text":"Handle Your Feelings Before They Handle You Feelings are a squishy topics. They slip out of our fingers as we grasp to reach them and dart this way an that any time words attempt to define them. Yet, they are fundamental currents of energy flowing inside of every one of us. As promised, this course isn't only about learning to code but also about learning to be a better human being, learning more about yourself, learning about be a better collaborator, contributor, and community member. Below is a speech given by Therapist Mandy Saligari who knows all about feelings and their potential for growth and detriment. Listen close to the way she talks about the patterns of childhood experiences causing teenage rebellion to childish relations in adulthood. This might be one of the greatest lessons to be learned. Follow-Up Questions As you've worked through the class lesson and pre-homeworks you've most certainly felt some sort of frustration. How would you describe the feelings that are flowing underneath? What did you do to be with them? In relation to the speech, why do you think we're talking about feelings here?","title":"Develop - Handle Your Feeling"},{"location":"module-3/developSeries-handleFeelings/#handle-your-feelings-before-they-handle-you","text":"Feelings are a squishy topics. They slip out of our fingers as we grasp to reach them and dart this way an that any time words attempt to define them. Yet, they are fundamental currents of energy flowing inside of every one of us. As promised, this course isn't only about learning to code but also about learning to be a better human being, learning more about yourself, learning about be a better collaborator, contributor, and community member. Below is a speech given by Therapist Mandy Saligari who knows all about feelings and their potential for growth and detriment. Listen close to the way she talks about the patterns of childhood experiences causing teenage rebellion to childish relations in adulthood. This might be one of the greatest lessons to be learned.","title":"Handle Your Feelings Before They Handle You"},{"location":"module-3/developSeries-handleFeelings/#follow-up-questions","text":"As you've worked through the class lesson and pre-homeworks you've most certainly felt some sort of frustration. How would you describe the feelings that are flowing underneath? What did you do to be with them? In relation to the speech, why do you think we're talking about feelings here?","title":"Follow-Up Questions"},{"location":"module-3/gitBranchReview/","text":"Git Branch Review \u201cThere is in every true woman\u2019s heart a spark of heavenly fire, which lies dormant in the broad daylight of prosperity; but which kindles up, and beams and blazes in the dark hour of adversity. \u201c \u2013Washington Irving Overview So far we've used the git software for it bare minimum capabilities: add files, commit them to the staging area, check the status of our changed files, and push the changes to a remote repository. This is great, btw! Mastering these commands is crucial to your success because you'll be using them everyday of your development career. However there are three command we need to introduce now so you can further grow as a developer. They are: git branch , git checkout , and git pull . Branching Throughout each of your projects you've been working on your own in a single branch: master / main . And this is fine if you're working by yourself because you don't have other developers changing the code causing merge conflicts . But, next week you'll begin collaboratively working with classmates on projects to prepare you for working on teams in your career. Remember, websites are not built by a single person, they have many teams, each with multiple people working on specific aspects of the website. In order for these teams to work together and not mess each other up as they do it, they use a functionality of git called branching . Branching means that we create an identical copy of the current code base onto a virtual branch that is connected to the main branch. Let's say you and your nearest classmate began working on a project, you or they could create a repo that includes a README.md file and an index.html file. Then you both clone it to your local computers. If you open it up it will be on the master / main branch and so will theirs. If you both code on this same branch then try to push the code up, it won't allow you to because there will be a conflict in the files. To safely, prevent against this you could create a branch off of master / main called something like: jills_landing-page-branch and your partner could create another branch off of master called: jacks_gallery-page-branch . Then you both could code up what you need to do. When you're finished, git push to add the code to the repo, but on a different branch than master or jacks_gallery-page-branch . Before you two merge these branches into master / main you would review Jack's code and Jack would review your code. The point of branching & reviewing is that each of the developers on a team get to work with the same code base but not introduce bugs as easily. Note: As of the writing of this ebook, gitHub is in the process of switching the name of master branch to main branch. Henceforth, we shall call master as main . How to Branch It's actually just as easy as any of the other git commands. Once you've cloned a repo you can: create a new branch: git branch jills_landing-page-branch switch to that new branch: git checkout jills_landing-page-branch or do both at the same time: git checkout -b jills_landing-page-branch Look at those three commands one more time. One creates a new branch, another changes your workspace to the branch, and the other does both at the same time. NOTE: If you've created a new branch you can't create the same branch again. You'll just use git checkout to switch between it and main , git checkout master MAJOR NOTE: When you read off of main above, this means that you should only create a branch while in main , not off of another branch. If you do that, you'll create a branch off of main , then another branch off of that new branch and so forth and so forth. This is not good and you'll loose track of where your code is. DO YOURSELF A FAVOR, only create a new branch if you're currently on main . What you should have learned: Why we need branches. When to branch. The difference between each of these commands: git branch branch-name git checkout branch-name git checkout -b branch-name Only branch off of main Merging & Pulling Merging usually only happens in GitHub not on the terminal. After you push up the changes from your personal branch to the repo, you can go to the repo on GitHub and create a Pull Request (PR). This is your request for the code base administrator, i.e. your partner or team lead, to pull your code into the main branch. If they review your code and determine that it is clean, bug free, and accomplishes the tasks it is suppose to do then they will merge it into main and normally delete your personal branch from the repo. Then you will go to your terminal and find the code base your team is working on and switch to the main branch ( git checkout main ) so you're back in the main code base. Since your team lead has merged your latest changes to main you can run the command git pull to pull all of the code that was merged to main since you cloned it. These merged changes would include your code and all of your teammates' code as well. The process would continue from there when you received your next task where you would create a new branch off of main , make your changes, git push , create a PR , wait for the merge to be approved, then checkout main , and git pull the changes again. Repeat, over and over again for the rest of your career. What you should have learned: We create new branches to have a personal sandbox for us to build our code. When we're finished we push those changes and create a Pull Request . Then our team lead approves and merges that branch into main After that, we checkout back to main and git pull all the latest changes. Then we start over again by git checkout -b new-branch-name . One Small Gotcha After you've created your new branch, the remote repo won't know about it because it currently only exist on your local machine . This means that when you attempt to git push you'll get an error that looks something like this: 1 2 3 4 5 \u279c 101-git-practice git:(jills_landing-page-branch) git push fatal: The current branch jills_landing-page-branch has no upstream branch. To push the current branch and set the remote as upstream, use git push --set-upstream origin jills_landing-page-branch Yes, the fatal : sounds terrifying but all it really means is that the command you last put in didn't resolve/complete. And, git is so nice that it gives you the fix with the error message!!! Do you see the line that starts: git push --set-upstream ....? Just copy/paste that line back into the terminal = Enter and it will resolve the issue. STUDENT: 'What does that line do?' INSTRUCTOR: 'It creates an origin in the repo that matches what's on the local computer.' STUDENT: 'So, it creates a branch on the remote repo that's called: \"jills_landing-page-branch\" ?' INSTRUCTOR: 'Yes. Using the additional arguments: --set-upstream and origin we can tell the push function to create a place for this code to go that is on the original repo as well as push the new code up! Look at the docs for push for more information. Additional Resources YT, Jake Vanderplas - Creating a Simple PR YT, helpmecoder - Git Branching & Merging Know Your Docs git SCM Docs - branch git SCM Docs - checkout git SCM Docs - pull git SCM Docs - push What's SCM mean ?","title":"Git Branch Review"},{"location":"module-3/gitBranchReview/#git-branch-review","text":"\u201cThere is in every true woman\u2019s heart a spark of heavenly fire, which lies dormant in the broad daylight of prosperity; but which kindles up, and beams and blazes in the dark hour of adversity. \u201c \u2013Washington Irving","title":"Git Branch Review"},{"location":"module-3/gitBranchReview/#overview","text":"So far we've used the git software for it bare minimum capabilities: add files, commit them to the staging area, check the status of our changed files, and push the changes to a remote repository. This is great, btw! Mastering these commands is crucial to your success because you'll be using them everyday of your development career. However there are three command we need to introduce now so you can further grow as a developer. They are: git branch , git checkout , and git pull .","title":"Overview"},{"location":"module-3/gitBranchReview/#branching","text":"Throughout each of your projects you've been working on your own in a single branch: master / main . And this is fine if you're working by yourself because you don't have other developers changing the code causing merge conflicts . But, next week you'll begin collaboratively working with classmates on projects to prepare you for working on teams in your career. Remember, websites are not built by a single person, they have many teams, each with multiple people working on specific aspects of the website. In order for these teams to work together and not mess each other up as they do it, they use a functionality of git called branching . Branching means that we create an identical copy of the current code base onto a virtual branch that is connected to the main branch. Let's say you and your nearest classmate began working on a project, you or they could create a repo that includes a README.md file and an index.html file. Then you both clone it to your local computers. If you open it up it will be on the master / main branch and so will theirs. If you both code on this same branch then try to push the code up, it won't allow you to because there will be a conflict in the files. To safely, prevent against this you could create a branch off of master / main called something like: jills_landing-page-branch and your partner could create another branch off of master called: jacks_gallery-page-branch . Then you both could code up what you need to do. When you're finished, git push to add the code to the repo, but on a different branch than master or jacks_gallery-page-branch . Before you two merge these branches into master / main you would review Jack's code and Jack would review your code. The point of branching & reviewing is that each of the developers on a team get to work with the same code base but not introduce bugs as easily. Note: As of the writing of this ebook, gitHub is in the process of switching the name of master branch to main branch. Henceforth, we shall call master as main .","title":"Branching"},{"location":"module-3/gitBranchReview/#how-to-branch","text":"It's actually just as easy as any of the other git commands. Once you've cloned a repo you can: create a new branch: git branch jills_landing-page-branch switch to that new branch: git checkout jills_landing-page-branch or do both at the same time: git checkout -b jills_landing-page-branch Look at those three commands one more time. One creates a new branch, another changes your workspace to the branch, and the other does both at the same time. NOTE: If you've created a new branch you can't create the same branch again. You'll just use git checkout to switch between it and main , git checkout master MAJOR NOTE: When you read off of main above, this means that you should only create a branch while in main , not off of another branch. If you do that, you'll create a branch off of main , then another branch off of that new branch and so forth and so forth. This is not good and you'll loose track of where your code is. DO YOURSELF A FAVOR, only create a new branch if you're currently on main . What you should have learned: Why we need branches. When to branch. The difference between each of these commands: git branch branch-name git checkout branch-name git checkout -b branch-name Only branch off of main","title":"How to Branch"},{"location":"module-3/gitBranchReview/#merging-pulling","text":"Merging usually only happens in GitHub not on the terminal. After you push up the changes from your personal branch to the repo, you can go to the repo on GitHub and create a Pull Request (PR). This is your request for the code base administrator, i.e. your partner or team lead, to pull your code into the main branch. If they review your code and determine that it is clean, bug free, and accomplishes the tasks it is suppose to do then they will merge it into main and normally delete your personal branch from the repo. Then you will go to your terminal and find the code base your team is working on and switch to the main branch ( git checkout main ) so you're back in the main code base. Since your team lead has merged your latest changes to main you can run the command git pull to pull all of the code that was merged to main since you cloned it. These merged changes would include your code and all of your teammates' code as well. The process would continue from there when you received your next task where you would create a new branch off of main , make your changes, git push , create a PR , wait for the merge to be approved, then checkout main , and git pull the changes again. Repeat, over and over again for the rest of your career. What you should have learned: We create new branches to have a personal sandbox for us to build our code. When we're finished we push those changes and create a Pull Request . Then our team lead approves and merges that branch into main After that, we checkout back to main and git pull all the latest changes. Then we start over again by git checkout -b new-branch-name .","title":"Merging &amp; Pulling"},{"location":"module-3/gitBranchReview/#one-small-gotcha","text":"After you've created your new branch, the remote repo won't know about it because it currently only exist on your local machine . This means that when you attempt to git push you'll get an error that looks something like this: 1 2 3 4 5 \u279c 101-git-practice git:(jills_landing-page-branch) git push fatal: The current branch jills_landing-page-branch has no upstream branch. To push the current branch and set the remote as upstream, use git push --set-upstream origin jills_landing-page-branch Yes, the fatal : sounds terrifying but all it really means is that the command you last put in didn't resolve/complete. And, git is so nice that it gives you the fix with the error message!!! Do you see the line that starts: git push --set-upstream ....? Just copy/paste that line back into the terminal = Enter and it will resolve the issue. STUDENT: 'What does that line do?' INSTRUCTOR: 'It creates an origin in the repo that matches what's on the local computer.' STUDENT: 'So, it creates a branch on the remote repo that's called: \"jills_landing-page-branch\" ?' INSTRUCTOR: 'Yes. Using the additional arguments: --set-upstream and origin we can tell the push function to create a place for this code to go that is on the original repo as well as push the new code up! Look at the docs for push for more information.","title":"One Small Gotcha"},{"location":"module-3/gitBranchReview/#additional-resources","text":"YT, Jake Vanderplas - Creating a Simple PR YT, helpmecoder - Git Branching & Merging","title":"Additional Resources"},{"location":"module-3/gitBranchReview/#know-your-docs","text":"git SCM Docs - branch git SCM Docs - checkout git SCM Docs - pull git SCM Docs - push What's SCM mean ?","title":"Know Your Docs"},{"location":"module-3/howToPlan/","text":"How to Plan \u201cBig jobs usually go to the men who prove their ability to outgrow small ones.\" \u2013Ralph Emerson Overview Look, planning is everything to success! Think back on any project you've ever worked on. Did you find it hard to motivate yourself while you didn't know what to do? Did you struggle to figure out the next step? Or did you know where you were headed and were able to step through each challenge as the came? In either case, I hope you're able to see right now that having a general plan with large tasks broken into small steps will help you stay focused one step at a time that will accumulate to create one large achievement. I like to remind student's: \"Rome was not built in a day, and neither was Google.\" All of these websites, apps, and services we know as pillars in our society now were, at one point in time, nothing, and all of them were built slowly, step at a time, within an overarching vision/plan. We're introducing planning here because in the following two weeks you'll be building a new portfolio project with a partner. This additional developer will introduce new challenges for you and them that you'll need to overcome if you want to work in this industry, so let's figure it out! Breaking it Down Remember, a website is many web pages linked together through anchor tags. ( Gives you a pause to think why they were named Anchor Tags... ) In this way, we can begin breaking down the massive tasks of building a website into the pages. Practice It - What are the Needs? Go get your notepad and pencil. Your final project for this class will be a rebuild of your portfolio website that includes: A Landing page An About page A Resume page A Contact Me page An image gallery, so to speak, that will serve as your Portfolio Page. It will have thumbnails of all the websites you've built and hosted up to this point, that when clicked they will take you to those websites. Write those pages down on 5 different pages as the header for each page. Now begin with your landing page. What does it need? And what would you like to have on it. List those on the page for the Landing Page. Now think about what websites you've built and which of them will be displayed on your Portfolio Page. How would you like it to look and what does the page need to have on it? Write and draw those on the page for Portfolio Page. Resume this for your Resume Page. Write down the needed information and elements. Sketch it out if you have an idea of how it looks right now. And do the same for your About Page and for your Contact Me Form. Finish the steps above before continuing. Practice It - How Are Those Needs Expressed? We're going to get to looking at examples of Portfolio websites but right now I want you to know what you want. Be in touch with that so that you're not corrupted by someone else's vision before you know what you want; what you're capable of creating. Remember, we're not dealing with code here, we're planning out what the website should look like, what the feel of it is, how it represents you. Close your eyes and think of all 5 pages laid out in-front of you. How do you see them? What do they look like? what shapes do you see? What flow do you see? With each of these steps you should pause, close your eyes and think about them. Remember, this is the discovery of your creativity which you and everyone else has. It just takes space & time to see it. Give yourself that space & time now. Starting from your Landing page, where do you want the user to look to find your Portfolio? How do the thumbnails appear? Are they popping up with animations? Fading in? Sliding in? How does your web page feel? Once a user likes what they see how do they find your Resume? Contact Page? Once you're website has been sent from the recruiter to the hiring manager how do you want your Blog/About page to appear? Draw, however you can, sketch and find a way to capture what you see in your mind! Go!! Practice It - Getting Inspiration Now that you've envisioned what you want to represent you: Google search \"web developer portfolio websites\". Look through the results and see what you come up with. Write down and keep up with the URLs of the website you like or have elements you'd like to mimic. With each URL, write down what you like about them so you're ready to talk to your coding buddy about what you want to build together. We'll talk about wireframing later. Summary If you spent time with the steps above you see that planning is really taking large tasks and breaking them into smaller more manageable steps. You see, our minds have a finite amount of focus space. We can use that focus space to see the grand view or we can use it to focus on the details that make up that grand view, but we can't do both at the same time. Because of this, we have to learn to switch our minds focus from grand to small, then to grand and back again. This is where your meditation will pay dividends! The more you train yourself to switch your focus and not give energy to distractions the better and faster you will be at programming, coding, society, people, you, your relationships, and emitting less carbon so our children have a prosperous Earth to live on the way we were given her to live on. Additional Resources YT, Amy Landino - How to Plan Your Day YT, CharlieMarieTV - Planning & Site Mapping YT, CharlieMarieTV - Designing a Website in Webflow","title":"Code Planning"},{"location":"module-3/howToPlan/#how-to-plan","text":"\u201cBig jobs usually go to the men who prove their ability to outgrow small ones.\" \u2013Ralph Emerson","title":"How to Plan"},{"location":"module-3/howToPlan/#overview","text":"Look, planning is everything to success! Think back on any project you've ever worked on. Did you find it hard to motivate yourself while you didn't know what to do? Did you struggle to figure out the next step? Or did you know where you were headed and were able to step through each challenge as the came? In either case, I hope you're able to see right now that having a general plan with large tasks broken into small steps will help you stay focused one step at a time that will accumulate to create one large achievement. I like to remind student's: \"Rome was not built in a day, and neither was Google.\" All of these websites, apps, and services we know as pillars in our society now were, at one point in time, nothing, and all of them were built slowly, step at a time, within an overarching vision/plan. We're introducing planning here because in the following two weeks you'll be building a new portfolio project with a partner. This additional developer will introduce new challenges for you and them that you'll need to overcome if you want to work in this industry, so let's figure it out!","title":"Overview"},{"location":"module-3/howToPlan/#breaking-it-down","text":"Remember, a website is many web pages linked together through anchor tags. ( Gives you a pause to think why they were named Anchor Tags... ) In this way, we can begin breaking down the massive tasks of building a website into the pages.","title":"Breaking it Down"},{"location":"module-3/howToPlan/#practice-it-what-are-the-needs","text":"Go get your notepad and pencil. Your final project for this class will be a rebuild of your portfolio website that includes: A Landing page An About page A Resume page A Contact Me page An image gallery, so to speak, that will serve as your Portfolio Page. It will have thumbnails of all the websites you've built and hosted up to this point, that when clicked they will take you to those websites. Write those pages down on 5 different pages as the header for each page. Now begin with your landing page. What does it need? And what would you like to have on it. List those on the page for the Landing Page. Now think about what websites you've built and which of them will be displayed on your Portfolio Page. How would you like it to look and what does the page need to have on it? Write and draw those on the page for Portfolio Page. Resume this for your Resume Page. Write down the needed information and elements. Sketch it out if you have an idea of how it looks right now. And do the same for your About Page and for your Contact Me Form. Finish the steps above before continuing.","title":"Practice It - What are the Needs?"},{"location":"module-3/howToPlan/#practice-it-how-are-those-needs-expressed","text":"We're going to get to looking at examples of Portfolio websites but right now I want you to know what you want. Be in touch with that so that you're not corrupted by someone else's vision before you know what you want; what you're capable of creating. Remember, we're not dealing with code here, we're planning out what the website should look like, what the feel of it is, how it represents you. Close your eyes and think of all 5 pages laid out in-front of you. How do you see them? What do they look like? what shapes do you see? What flow do you see? With each of these steps you should pause, close your eyes and think about them. Remember, this is the discovery of your creativity which you and everyone else has. It just takes space & time to see it. Give yourself that space & time now. Starting from your Landing page, where do you want the user to look to find your Portfolio? How do the thumbnails appear? Are they popping up with animations? Fading in? Sliding in? How does your web page feel? Once a user likes what they see how do they find your Resume? Contact Page? Once you're website has been sent from the recruiter to the hiring manager how do you want your Blog/About page to appear? Draw, however you can, sketch and find a way to capture what you see in your mind! Go!!","title":"Practice It - How Are Those Needs Expressed?"},{"location":"module-3/howToPlan/#practice-it-getting-inspiration","text":"Now that you've envisioned what you want to represent you: Google search \"web developer portfolio websites\". Look through the results and see what you come up with. Write down and keep up with the URLs of the website you like or have elements you'd like to mimic. With each URL, write down what you like about them so you're ready to talk to your coding buddy about what you want to build together. We'll talk about wireframing later.","title":"Practice It - Getting Inspiration"},{"location":"module-3/howToPlan/#summary","text":"If you spent time with the steps above you see that planning is really taking large tasks and breaking them into smaller more manageable steps. You see, our minds have a finite amount of focus space. We can use that focus space to see the grand view or we can use it to focus on the details that make up that grand view, but we can't do both at the same time. Because of this, we have to learn to switch our minds focus from grand to small, then to grand and back again. This is where your meditation will pay dividends! The more you train yourself to switch your focus and not give energy to distractions the better and faster you will be at programming, coding, society, people, you, your relationships, and emitting less carbon so our children have a prosperous Earth to live on the way we were given her to live on.","title":"Summary"},{"location":"module-3/howToPlan/#additional-resources","text":"YT, Amy Landino - How to Plan Your Day YT, CharlieMarieTV - Planning & Site Mapping YT, CharlieMarieTV - Designing a Website in Webflow","title":"Additional Resources"},{"location":"module-3/html-FetchAPI/","text":"HTML Fetch API \u201cI decided, very early on, just to accept life unconditionally; I never expected it to do anything special for me, yet I seemed to accomplish far more than I had ever hoped. Most of the time it just happened to me without my ever seeking it.\u201d \u2013Audrey Hepburn What is the HTML Fetch API? The JavaScript 1 2 3 4 5 const getRemoteData = () => { fetch ( 'https://jsonplaceholder.typicode.com/todos/1' ) . then ( response => response . json ()) . then ( json => console . log ( json )) } The HTML 1 < button onclick = \"getRemoteData()\" > Get Data </ button > Take the code snippet you see above and throw it into one of your projects. Create a button and attach a function to it that when clicked will call this fetch code. Check out the JSON Placeholder Documentation . HINT: Start with changing the end of the URL in the request from 1 to 2...or something else... Additional Resources YT, Paul Halliday - How to Use Fetch YT, Web Dev Simplified - Fetch API in 6 mins Know Your Docs You've become used to W3Schools as your main documentation provider. But as you move into JavaScript, I suggest you start learning with Mozilla Developer Network(MDN) documentation. They have more robust explanations and cover deeper topics in web development. MDN Docs - Fetch API W3S Docs - JSON MDN Docs - Response JSON Placeholder Documentation","title":"HTML Fetch API"},{"location":"module-3/html-FetchAPI/#html-fetch-api","text":"\u201cI decided, very early on, just to accept life unconditionally; I never expected it to do anything special for me, yet I seemed to accomplish far more than I had ever hoped. Most of the time it just happened to me without my ever seeking it.\u201d \u2013Audrey Hepburn","title":"HTML Fetch API"},{"location":"module-3/html-FetchAPI/#what-is-the-html-fetch-api","text":"The JavaScript 1 2 3 4 5 const getRemoteData = () => { fetch ( 'https://jsonplaceholder.typicode.com/todos/1' ) . then ( response => response . json ()) . then ( json => console . log ( json )) } The HTML 1 < button onclick = \"getRemoteData()\" > Get Data </ button > Take the code snippet you see above and throw it into one of your projects. Create a button and attach a function to it that when clicked will call this fetch code. Check out the JSON Placeholder Documentation . HINT: Start with changing the end of the URL in the request from 1 to 2...or something else...","title":"What is the HTML Fetch API?"},{"location":"module-3/html-FetchAPI/#additional-resources","text":"YT, Paul Halliday - How to Use Fetch YT, Web Dev Simplified - Fetch API in 6 mins","title":"Additional Resources"},{"location":"module-3/html-FetchAPI/#know-your-docs","text":"You've become used to W3Schools as your main documentation provider. But as you move into JavaScript, I suggest you start learning with Mozilla Developer Network(MDN) documentation. They have more robust explanations and cover deeper topics in web development. MDN Docs - Fetch API W3S Docs - JSON MDN Docs - Response JSON Placeholder Documentation","title":"Know Your Docs"},{"location":"module-3/introToAPIs/","text":"Intro to APIs In the middle of every difficulty lies opportunity. \u2014Albert Einstein Overview In class we'll be writing JavaScript that will use the Fetch API of the browser which will then talk with another API that will provide to us fake todo items we can use to populate a todo list! I'll stress this now, you don't have to build an API or figure all of the pieces to it this week. Just open your mind to exploring what they look like in your mind's eye. Use the video below to help. What's An API? Know Your Docs MDN Docs - Fetch API MDN Docs - title","title":"Intro to APIs"},{"location":"module-3/introToAPIs/#intro-to-apis","text":"In the middle of every difficulty lies opportunity. \u2014Albert Einstein","title":"Intro to APIs"},{"location":"module-3/introToAPIs/#overview","text":"In class we'll be writing JavaScript that will use the Fetch API of the browser which will then talk with another API that will provide to us fake todo items we can use to populate a todo list! I'll stress this now, you don't have to build an API or figure all of the pieces to it this week. Just open your mind to exploring what they look like in your mind's eye. Use the video below to help.","title":"Overview"},{"location":"module-3/introToAPIs/#whats-an-api","text":"","title":"What's An API?"},{"location":"module-3/introToAPIs/#know-your-docs","text":"MDN Docs - Fetch API MDN Docs - title","title":"Know Your Docs"},{"location":"module-3/introToFiltering/","text":"Intro To Sorting \u201dFall seven times, stand up eight.\u201d \u2013Japanese Proverb Overview Let's start with a code snippet: 1 2 3 const words = [ 'ray' , 'limitless' , 'elite' , 'exuberant' , 'devotion' , 'presence' , 'great' ]; const result = words . filter (( word ) => word . length > 6 ); Above we see an array is created called words, that has multiple strings in it. Then we see a variable called results that is pointing to the value of words with the . filter() method called on it. .filter is another method on array object-things and it takes a special argument: a callback function WAIT! Before you get hung up on trying to figure out what that means, do you remember when we saw an anonymous function passed into a .then() method while learning fetch() ? Well...that too was a callback function . In both cases, the code snippet above and the .then() use an anonymous callback function . An Anonymous Function is a function that doesn't have a name and can be passed into another function, or method. A callback Function is a function placed into another function, or method, that will be called multiple times. It can only be used in methods or functions that use a callback functions like .filter() So, reading the code again, 1 const result = words . filter (( word ) => word . length > 6 ); We can expect whatever is returned from .filter() will be saved into the value of result . From the docs , we can also know that .filter() returns an array so results will be an array of something. What will this something be? For that we can look at what is passed into this anonymous function that will be called back, which is: 1 2 3 4 word => word . length > 6 // or in long-hand ( word ) => { word . length > 6 } The word word is not unique. We could have just as easily named it greta , so long as the next part was greta.length > 6 . word is just holding the value of each value in the array: words . Now we know that .filter() loops over an array and applies what is inside of its callback function. Which in this case is word.length > 6 . This means that all words that have more than six letters will be added to the new array, results . From all of this we find that .filter() creates a filter for large sets of data in an array! 1 2 3 4 5 6 const words = [ 'ray' , 'limitless' , 'elite' , 'exuberant' , 'devotion' , 'presence' , 'great' ]; const result = words . filter ( word => word . length > 6 ); console . log ( result ); // Try it yourself, paste this into your browser's console, repl.it, or in a new repo and let it fly Now that you know how JavaScript's .filter() works you can apply it to your todo application!! Additional Resources YT, Programming with Mosh - JavaScript Array Filter Know Your Docs There's more to filter including two other argument that filter's callback takes so make sure you checkout the docs. MDN Docs - Array.filter()","title":"Intro to Filtering"},{"location":"module-3/introToFiltering/#intro-to-sorting","text":"\u201dFall seven times, stand up eight.\u201d \u2013Japanese Proverb","title":"Intro To Sorting"},{"location":"module-3/introToFiltering/#overview","text":"Let's start with a code snippet: 1 2 3 const words = [ 'ray' , 'limitless' , 'elite' , 'exuberant' , 'devotion' , 'presence' , 'great' ]; const result = words . filter (( word ) => word . length > 6 ); Above we see an array is created called words, that has multiple strings in it. Then we see a variable called results that is pointing to the value of words with the . filter() method called on it. .filter is another method on array object-things and it takes a special argument: a callback function WAIT! Before you get hung up on trying to figure out what that means, do you remember when we saw an anonymous function passed into a .then() method while learning fetch() ? Well...that too was a callback function . In both cases, the code snippet above and the .then() use an anonymous callback function . An Anonymous Function is a function that doesn't have a name and can be passed into another function, or method. A callback Function is a function placed into another function, or method, that will be called multiple times. It can only be used in methods or functions that use a callback functions like .filter() So, reading the code again, 1 const result = words . filter (( word ) => word . length > 6 ); We can expect whatever is returned from .filter() will be saved into the value of result . From the docs , we can also know that .filter() returns an array so results will be an array of something. What will this something be? For that we can look at what is passed into this anonymous function that will be called back, which is: 1 2 3 4 word => word . length > 6 // or in long-hand ( word ) => { word . length > 6 } The word word is not unique. We could have just as easily named it greta , so long as the next part was greta.length > 6 . word is just holding the value of each value in the array: words . Now we know that .filter() loops over an array and applies what is inside of its callback function. Which in this case is word.length > 6 . This means that all words that have more than six letters will be added to the new array, results . From all of this we find that .filter() creates a filter for large sets of data in an array! 1 2 3 4 5 6 const words = [ 'ray' , 'limitless' , 'elite' , 'exuberant' , 'devotion' , 'presence' , 'great' ]; const result = words . filter ( word => word . length > 6 ); console . log ( result ); // Try it yourself, paste this into your browser's console, repl.it, or in a new repo and let it fly Now that you know how JavaScript's .filter() works you can apply it to your todo application!!","title":"Overview"},{"location":"module-3/introToFiltering/#additional-resources","text":"YT, Programming with Mosh - JavaScript Array Filter","title":"Additional Resources"},{"location":"module-3/introToFiltering/#know-your-docs","text":"There's more to filter including two other argument that filter's callback takes so make sure you checkout the docs. MDN Docs - Array.filter()","title":"Know Your Docs"},{"location":"module-3/introToLoops/","text":"Intro To Loops \u201cPress on \u2013 nothing can take the place of persistence. Talent will not; nothing is more common than unsuccessful men with talent. Genius will not; unrewarded genius is almost a proverb. Education will not; the world is full of educated derelicts. Perseverance and determination alone are omnipotent.\u201d \u2013Calvin Coolidge Overview By now you've probably understood that we write/build functions as sets of instructions that sit in storage until the computer needs to use/execute them. These sets of instructions are very useful because we can our web pages to do specific actions when a user interact with it. And so far, we've built simple actions, however, if we want to build more complex sets of instructions we'll need to learn why and how to use . Loo**ps are just like what they sound like. Under certain conditions, the tasks detailed inside the set of instruction should loop until the conditions have changed. What's a Condition? A condition is a certain state ; as in the current state or status of something. If you arrive at an intersection and the light is red then the condition is light = \"red\" . But if you arrive at the intersection and the light is green then the condition is light = \"green\" . Based on these two different states we could tell the program to do certain things. Let's pretend we're programming an driverless car! We might be able to write a conditional statement that looks like this: 1 2 3 4 5 6 7 8 9 10 11 const checkLight = () => { if ( light = \"green\" ) { accelerate () } else if ( light = \"red\" ) { stop () } else { slowDown () } } checkLight () In the code snippet above, we see a simple JS function that does one of three things based on a certain condition, the color of the light ! We are getting a little ahead of ourselves right now because today we're going to cover two different loops: while() and for() . These do loops are commonly used in programming. But to use either of these loops you'll need to have a basic understanding of conditional statements . Now that you do, let's get to it. While Loop Remembering what you just learned about conditions, look at the code snippet below and see if you can figure out how this built-in functions works. 1 2 3 4 5 let light = \"red\" while ( light === \"red\" ) { holdBrake () } A while loop is function built-in to the JavaScript language that will execute its Action Statement as long as its Conditional Statement evaluates to true. In the code above, as long as the light is red the car should holdBrake() . If the light should change the car will cease holdBrake() . Explore the example below. 1 2 3 4 5 6 7 8 9 const countOneToHundred = () => { let counter = 1 while ( counter <= 100 ) { console . log ( counter ) counter ++ } } countOneToHundred () Stop an ask yourself: What does the condition statement say? What is the line counter++ doing? Throw this into your Console Tab and try it out yourself! You'll use this loop in the next class. Make sure to spend sometime learning this for yourself. For Loop Last lesson we learned about Arrays and why they're really useful. To add to their utility, let's now learn how to use their indexes to Loop/iterate over arrays. To loop or iterate means that we ask the computer to traverse each item in the array so we can do something with each item. Like the while loop, a for loop repeats an actions over and over until a specified condition evaluates to false; the difference is that it's meant specifically for an array. What that means is that we tell the for loop how long an array is and what actions to do until we've looped over each item in the array/its traversed the length of the array. First things first: A for() loop is a built-in function that takes in arguments like any other function. The arguments of the for() loop function are always in 3 and always go in this order: 1 2 3 for ([ initialExpression ]; [ condition ]; [ incrementExpression ]) { action statement } Initial Expression declares an iterator variable that will hold a number. Condition when the iterator meets this specific value the loop will stop. Increment Expression Tells how much the iterator number should increase or decrease. Action Statement :is where we detail a set of instructions to do on every loop. Look at the syntax below: 1 2 3 4 5 const arrOfNums = [ 2 , 33 , 4 , 54 , 13 , 8 , 79 ] for ( let i = 0 ; i < arrOfNums . length ; i ++ ) { console . log ( arrOfNums [ i ]) } From the code above we can see that an array is created that hold a handful of numbers. Then, a for loop is given three argument: let i = 0; creates a variable called i and sets it to 0 i < arrOfNums.length - 1; creates a condition for the loop to stop when its met. i++ continually adds 1 to the value of i BUT WAIT!! We just saw some code we've never seen: .length ! True, this a property on arrays and string data types. We can access this value and use as we like... in this case, to evaluate when our loop should stop. Just like HTML elements have properties like color , border , and padding , so too do Arrays, Strings, and Numbers!! Everything is an object and every object has properties and methods! Check out the code below. Run it yourself : 1 2 3 4 5 6 7 8 9 10 11 let alphabet = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' ] let digits = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] const logCharacters = ( arr ) => { for ( i = 0 ; i < arr . length ; i ++ ){ console . log ( \"current character is \" + arr [ i ]); } } logCharacters ( alphabet ) logCharacters ( digits ) In the code snippet above, the for loops states: Read the for() line. What is it saying? Where is arr coming from? How does arr allow us to call the function with two different arrays passed to it? Practice It For each of these you can write them in a new .js file and run them with live-server or use Repl.it ; as long as you use console.log() to see the results in the Console Tab. Create a while loop to print out numbers from 1 - 10. Create an array and a for loop that will iterate over it backwards. Create a while loop to prints out every multiple of 3 up to 100. Additional Resources YT, whatsdev - While Loops Know Your Docs MDN Docs - While Loop MDN Docs - For Loop MDN Docs - Conditional Statement","title":"Intro To Loops"},{"location":"module-3/introToLoops/#intro-to-loops","text":"\u201cPress on \u2013 nothing can take the place of persistence. Talent will not; nothing is more common than unsuccessful men with talent. Genius will not; unrewarded genius is almost a proverb. Education will not; the world is full of educated derelicts. Perseverance and determination alone are omnipotent.\u201d \u2013Calvin Coolidge","title":"Intro To Loops"},{"location":"module-3/introToLoops/#overview","text":"By now you've probably understood that we write/build functions as sets of instructions that sit in storage until the computer needs to use/execute them. These sets of instructions are very useful because we can our web pages to do specific actions when a user interact with it. And so far, we've built simple actions, however, if we want to build more complex sets of instructions we'll need to learn why and how to use . Loo**ps are just like what they sound like. Under certain conditions, the tasks detailed inside the set of instruction should loop until the conditions have changed.","title":"Overview"},{"location":"module-3/introToLoops/#whats-a-condition","text":"A condition is a certain state ; as in the current state or status of something. If you arrive at an intersection and the light is red then the condition is light = \"red\" . But if you arrive at the intersection and the light is green then the condition is light = \"green\" . Based on these two different states we could tell the program to do certain things. Let's pretend we're programming an driverless car! We might be able to write a conditional statement that looks like this: 1 2 3 4 5 6 7 8 9 10 11 const checkLight = () => { if ( light = \"green\" ) { accelerate () } else if ( light = \"red\" ) { stop () } else { slowDown () } } checkLight () In the code snippet above, we see a simple JS function that does one of three things based on a certain condition, the color of the light ! We are getting a little ahead of ourselves right now because today we're going to cover two different loops: while() and for() . These do loops are commonly used in programming. But to use either of these loops you'll need to have a basic understanding of conditional statements . Now that you do, let's get to it.","title":"What's a Condition?"},{"location":"module-3/introToLoops/#while-loop","text":"Remembering what you just learned about conditions, look at the code snippet below and see if you can figure out how this built-in functions works. 1 2 3 4 5 let light = \"red\" while ( light === \"red\" ) { holdBrake () } A while loop is function built-in to the JavaScript language that will execute its Action Statement as long as its Conditional Statement evaluates to true. In the code above, as long as the light is red the car should holdBrake() . If the light should change the car will cease holdBrake() . Explore the example below. 1 2 3 4 5 6 7 8 9 const countOneToHundred = () => { let counter = 1 while ( counter <= 100 ) { console . log ( counter ) counter ++ } } countOneToHundred () Stop an ask yourself: What does the condition statement say? What is the line counter++ doing? Throw this into your Console Tab and try it out yourself! You'll use this loop in the next class. Make sure to spend sometime learning this for yourself.","title":"While Loop"},{"location":"module-3/introToLoops/#for-loop","text":"Last lesson we learned about Arrays and why they're really useful. To add to their utility, let's now learn how to use their indexes to Loop/iterate over arrays. To loop or iterate means that we ask the computer to traverse each item in the array so we can do something with each item. Like the while loop, a for loop repeats an actions over and over until a specified condition evaluates to false; the difference is that it's meant specifically for an array. What that means is that we tell the for loop how long an array is and what actions to do until we've looped over each item in the array/its traversed the length of the array. First things first: A for() loop is a built-in function that takes in arguments like any other function. The arguments of the for() loop function are always in 3 and always go in this order: 1 2 3 for ([ initialExpression ]; [ condition ]; [ incrementExpression ]) { action statement } Initial Expression declares an iterator variable that will hold a number. Condition when the iterator meets this specific value the loop will stop. Increment Expression Tells how much the iterator number should increase or decrease. Action Statement :is where we detail a set of instructions to do on every loop. Look at the syntax below: 1 2 3 4 5 const arrOfNums = [ 2 , 33 , 4 , 54 , 13 , 8 , 79 ] for ( let i = 0 ; i < arrOfNums . length ; i ++ ) { console . log ( arrOfNums [ i ]) } From the code above we can see that an array is created that hold a handful of numbers. Then, a for loop is given three argument: let i = 0; creates a variable called i and sets it to 0 i < arrOfNums.length - 1; creates a condition for the loop to stop when its met. i++ continually adds 1 to the value of i BUT WAIT!! We just saw some code we've never seen: .length ! True, this a property on arrays and string data types. We can access this value and use as we like... in this case, to evaluate when our loop should stop. Just like HTML elements have properties like color , border , and padding , so too do Arrays, Strings, and Numbers!! Everything is an object and every object has properties and methods! Check out the code below. Run it yourself : 1 2 3 4 5 6 7 8 9 10 11 let alphabet = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' ] let digits = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] const logCharacters = ( arr ) => { for ( i = 0 ; i < arr . length ; i ++ ){ console . log ( \"current character is \" + arr [ i ]); } } logCharacters ( alphabet ) logCharacters ( digits ) In the code snippet above, the for loops states: Read the for() line. What is it saying? Where is arr coming from? How does arr allow us to call the function with two different arrays passed to it?","title":"For Loop"},{"location":"module-3/introToLoops/#practice-it","text":"For each of these you can write them in a new .js file and run them with live-server or use Repl.it ; as long as you use console.log() to see the results in the Console Tab. Create a while loop to print out numbers from 1 - 10. Create an array and a for loop that will iterate over it backwards. Create a while loop to prints out every multiple of 3 up to 100.","title":"Practice It"},{"location":"module-3/introToLoops/#additional-resources","text":"YT, whatsdev - While Loops","title":"Additional Resources"},{"location":"module-3/introToLoops/#know-your-docs","text":"MDN Docs - While Loop MDN Docs - For Loop MDN Docs - Conditional Statement","title":"Know Your Docs"},{"location":"module-3/jsFunctionSyntax/","text":"JS Function Syntax \u201cOften we women are risk averse. I needed the push. Now, more than ever, young women need more seasoned women to provide that encouragement, to take a risk, to go for it. Once a glass ceiling is broken, it stays broken.\u201d \u2013Jennifer Grahnolm Overview Functions may seem scary at first but if you think of them in the same way CSS rules are built, they're actually the same thing! See when you select an element and give it rules those rules are like a function waiting to be called. Usually they're called when the web page loads. Or, if you use a pseudo selector, the rule is called when the user does the thing you were looking for like a :hover . In this same way, JavaScript functions are just recipes or sets of instructions waiting to be called and used when they're needed! Obviously you've already worked with some JavaScript in a few of your projects but starting today we're going to slow down a little to focus on JavaScript. It can be a little harder to grasp than CSS but I think if you work to ask questions, answer your own questions, and ask more questions then you'll get this very quickly! What is Syntax? Syntax is a funny word and not often used outside of programming. But, in fact, this word was used before programming was created. A Google Search provides the following: \"the arrangement of words and phrases to create well-formed sentences in a language. From the Greek, Suntaxis, - To arrange together.\" What this means for us is that certain keywords and characters must go in specific order for the computer to interpret what we're trying to tell it. Just the same with CSS we have a Selector , Property , Value and Declaration Block and with HTML we have an Opening Tag , <h3> and a Closing Tag , </h3> , we have specific syntax for JavaScript functions, as well. Take a look: 1 2 3 4 5 6 7 8 9 // Function Declaration const separateWord = ( word ) => { // Function Body (between the { } ) const splitUpWord = word . split ( \"\" ) // Function Return Statement return splitUpWord } The code snippet above: creates a function called separateWord which takes in a parameter named word and creates a new variable inside its Function Body called splitUpWord then assigns this new variable's value to what the method .split() returns when 5. it is called on the word that is given to the function. After this the function returns the value of splitUpWord . If we called this function with the word: \"Balloon\" like so, separateWord(\"Balloon\") we would expect it to return the following: [\"B\", \"a\", \"l\", \"l\", \"o\", \"o\", \"n\", ] 1 separateWord ( \"Balloon\" ) What Can We Learn From This? In this small example you can deduce that JavaScript, like CSS and HTML reads from top to bottom and left to right. We call this Synchronous , or that each action happens after the last action is finished, one at a time. We can also see that a function is created the same way a variable is created, using the const keyword and then naming it what we'd like to name it. Next we see that, besides having to use the JavaScript Language Specific Keywords like const , .split() and return we as the developer get to decided on the names of our functions and variable. In the snippet above we get to decide the name of separateWord , word and splitUpWord . We could have just as easily named these crumble , cookie , or chip and the program would have still done the exact same thing! Now we can focus in on the characters or tokens used in sequential order. After the name of the function, separateWord we see the following characters: = () => {} these character go in order every time you create a function and you can read them aloud to yourself like this: \"Create a variable called separateWord that equals a function and returns the following...\" Where: 1 2 3 4 5 * `const` - \"Create a variable...\" * `separateWord` - \"...called separateWord...\" * `=` - \"...that equals...\" * `()` - \"...a function...\" * `=> {}` - \"...and returns the following...\" So you see then that a pair of parenthesis, () signifies a function in JavaScript. This is where we declare parameters when we declare a functions and where to pass in arguments when we call/invoke a function. A Fat Arrow , => shows that it returns whatever follows, and a pair of curly-braces, {} , (just like CSS), is a block of code to be run when the function is called. Alternative Syntax We've just covered the preferred way to create a JavaScript function, now we'll show you the older way to create a function. This way is still used and you might even use it later on in your coursework and career but for now just know that it exists but that we'll use the preferred signature, (detailed above), throughout this course. 1 2 3 4 5 function separateWord ( word ) { const splitUpWord = word . split ( \"\" ) return splitUpWord } This method uses the reserved word function to declare the same function as we saw above. It has it's purposes but for now let's just let it reside in our awareness. Invoke a JavaScript Function Declaring a function is the hard part. It's where you write out the steps you want your computer to do when that function is called but when the computer reads the function declaration it doesn't run the code. Instead it just stores it in memory as a set of instructions to do before it's time to run them. Therefore, invoking or calling a function is when the function is actually run. The syntax of this is really simple, it looks like this: myFunction() . That's it! Seriously, when ever we want your computer to run a function you've built you give it a simple line: thFunctionsName() where the name of the function is followed by a pair of parenthesis, () . Parameters vs Arguments Not all functions have parameters . Parameter are bits of data that functions hold on to and use to make calculations or perform specific tasks on like our separateWord example above. That function example had a parameter we called word. Which means, we the function is called it needs a piece of data like a word, or string , given to it so it can perform the tasks it's supposed to perform. When we give, or pass , data to a function we call it an argument . Below is an example of two functions. One requires a parameter and the other does not. Then you'll see them both invoked, one with an argument passed to it and the other without. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // requires an argument to be passed to it because it has a parameter defined as \"username\" const sayHi = ( username ) => { greetingString = \"Hi, \" + username + \"!\" return greetingString } // doesn't require an argument because it has no parameters defined const sayHello = () => { return \"Hello!\" } // This line will return: \"Hi, Greta!\" because we passed it an argument: \"Greta\" sayHi ( \"Greta\" ) // This next line will return: \"Hello!\" sayHello () As We Move Forward As we add more to our JavaScript knowledge base you'll see methods like .split() used again and again. So let's take a minute to cover three aspects that will give us a solid foundation of what they are and how they're being used. Aspect 1 . Just like the methods you're used to on the document or on each of the HTML Elements, methods in JavaScript are built-in to the language and are specific to the Data Types just like certain methods are specific to certain HTML Elements. In the case of .split() , this method is specific to the String data type, or words/characters inside a pair of quotes, \" \" . You can't call this method on a Number data type because it doesn't exist on Number types of data! So you can start thinking of the Data Types a lot like the Elements we create on the DOM Tree. They are plain object-things we can't see but have many little properties we can access on the back side of them. Aspect 2 . The syntax of .split() looks just like the syntax of Invoking a JavaScript function we built ourselves. That's because it is. These methods were built by the developers of the JavaScript language and reside under-the-hood. We don't have to build them, all we have to do is read the docs on them and know how to use them. Aspect 3 . The .split() method returns a funny looking thing called an Array . ( Remember, [\"B\", \"a\", \"l\", \"l\", \"o\", \"o\", \"n\", ] from above? ) This is another type of data in JavaScript which we're going to dig into in the next lesson. It's important to understand simply that each type of data or data type has utility for specific scenarios. The Array data type has the most built-in methods so it's often advantageous to convert data like a string to an array. You'll see in the next lesson!! Practice It Go to W3Schools JavaScript Exercises and complete the first 15 challenges in JS Variables, JS Operators , JS Data Types , and JS Functions . HINT: in JS Data Types you'll be asked about a data type we haven't covered in length yet. It's an Object. Know Your Docs MDN Docs - Old-School Function Syntaxt","title":"JS Function Syntax"},{"location":"module-3/jsFunctionSyntax/#js-function-syntax","text":"\u201cOften we women are risk averse. I needed the push. Now, more than ever, young women need more seasoned women to provide that encouragement, to take a risk, to go for it. Once a glass ceiling is broken, it stays broken.\u201d \u2013Jennifer Grahnolm","title":"JS Function Syntax"},{"location":"module-3/jsFunctionSyntax/#overview","text":"Functions may seem scary at first but if you think of them in the same way CSS rules are built, they're actually the same thing! See when you select an element and give it rules those rules are like a function waiting to be called. Usually they're called when the web page loads. Or, if you use a pseudo selector, the rule is called when the user does the thing you were looking for like a :hover . In this same way, JavaScript functions are just recipes or sets of instructions waiting to be called and used when they're needed! Obviously you've already worked with some JavaScript in a few of your projects but starting today we're going to slow down a little to focus on JavaScript. It can be a little harder to grasp than CSS but I think if you work to ask questions, answer your own questions, and ask more questions then you'll get this very quickly!","title":"Overview"},{"location":"module-3/jsFunctionSyntax/#what-is-syntax","text":"Syntax is a funny word and not often used outside of programming. But, in fact, this word was used before programming was created. A Google Search provides the following: \"the arrangement of words and phrases to create well-formed sentences in a language. From the Greek, Suntaxis, - To arrange together.\" What this means for us is that certain keywords and characters must go in specific order for the computer to interpret what we're trying to tell it. Just the same with CSS we have a Selector , Property , Value and Declaration Block and with HTML we have an Opening Tag , <h3> and a Closing Tag , </h3> , we have specific syntax for JavaScript functions, as well. Take a look: 1 2 3 4 5 6 7 8 9 // Function Declaration const separateWord = ( word ) => { // Function Body (between the { } ) const splitUpWord = word . split ( \"\" ) // Function Return Statement return splitUpWord } The code snippet above: creates a function called separateWord which takes in a parameter named word and creates a new variable inside its Function Body called splitUpWord then assigns this new variable's value to what the method .split() returns when 5. it is called on the word that is given to the function. After this the function returns the value of splitUpWord . If we called this function with the word: \"Balloon\" like so, separateWord(\"Balloon\") we would expect it to return the following: [\"B\", \"a\", \"l\", \"l\", \"o\", \"o\", \"n\", ] 1 separateWord ( \"Balloon\" )","title":"What is Syntax?"},{"location":"module-3/jsFunctionSyntax/#what-can-we-learn-from-this","text":"In this small example you can deduce that JavaScript, like CSS and HTML reads from top to bottom and left to right. We call this Synchronous , or that each action happens after the last action is finished, one at a time. We can also see that a function is created the same way a variable is created, using the const keyword and then naming it what we'd like to name it. Next we see that, besides having to use the JavaScript Language Specific Keywords like const , .split() and return we as the developer get to decided on the names of our functions and variable. In the snippet above we get to decide the name of separateWord , word and splitUpWord . We could have just as easily named these crumble , cookie , or chip and the program would have still done the exact same thing! Now we can focus in on the characters or tokens used in sequential order. After the name of the function, separateWord we see the following characters: = () => {} these character go in order every time you create a function and you can read them aloud to yourself like this: \"Create a variable called separateWord that equals a function and returns the following...\" Where: 1 2 3 4 5 * `const` - \"Create a variable...\" * `separateWord` - \"...called separateWord...\" * `=` - \"...that equals...\" * `()` - \"...a function...\" * `=> {}` - \"...and returns the following...\" So you see then that a pair of parenthesis, () signifies a function in JavaScript. This is where we declare parameters when we declare a functions and where to pass in arguments when we call/invoke a function. A Fat Arrow , => shows that it returns whatever follows, and a pair of curly-braces, {} , (just like CSS), is a block of code to be run when the function is called.","title":"What Can We Learn From This?"},{"location":"module-3/jsFunctionSyntax/#alternative-syntax","text":"We've just covered the preferred way to create a JavaScript function, now we'll show you the older way to create a function. This way is still used and you might even use it later on in your coursework and career but for now just know that it exists but that we'll use the preferred signature, (detailed above), throughout this course. 1 2 3 4 5 function separateWord ( word ) { const splitUpWord = word . split ( \"\" ) return splitUpWord } This method uses the reserved word function to declare the same function as we saw above. It has it's purposes but for now let's just let it reside in our awareness.","title":"Alternative Syntax"},{"location":"module-3/jsFunctionSyntax/#invoke-a-javascript-function","text":"Declaring a function is the hard part. It's where you write out the steps you want your computer to do when that function is called but when the computer reads the function declaration it doesn't run the code. Instead it just stores it in memory as a set of instructions to do before it's time to run them. Therefore, invoking or calling a function is when the function is actually run. The syntax of this is really simple, it looks like this: myFunction() . That's it! Seriously, when ever we want your computer to run a function you've built you give it a simple line: thFunctionsName() where the name of the function is followed by a pair of parenthesis, () .","title":"Invoke a JavaScript Function"},{"location":"module-3/jsFunctionSyntax/#parameters-vs-arguments","text":"Not all functions have parameters . Parameter are bits of data that functions hold on to and use to make calculations or perform specific tasks on like our separateWord example above. That function example had a parameter we called word. Which means, we the function is called it needs a piece of data like a word, or string , given to it so it can perform the tasks it's supposed to perform. When we give, or pass , data to a function we call it an argument . Below is an example of two functions. One requires a parameter and the other does not. Then you'll see them both invoked, one with an argument passed to it and the other without. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // requires an argument to be passed to it because it has a parameter defined as \"username\" const sayHi = ( username ) => { greetingString = \"Hi, \" + username + \"!\" return greetingString } // doesn't require an argument because it has no parameters defined const sayHello = () => { return \"Hello!\" } // This line will return: \"Hi, Greta!\" because we passed it an argument: \"Greta\" sayHi ( \"Greta\" ) // This next line will return: \"Hello!\" sayHello ()","title":"Parameters vs Arguments"},{"location":"module-3/jsFunctionSyntax/#as-we-move-forward","text":"As we add more to our JavaScript knowledge base you'll see methods like .split() used again and again. So let's take a minute to cover three aspects that will give us a solid foundation of what they are and how they're being used. Aspect 1 . Just like the methods you're used to on the document or on each of the HTML Elements, methods in JavaScript are built-in to the language and are specific to the Data Types just like certain methods are specific to certain HTML Elements. In the case of .split() , this method is specific to the String data type, or words/characters inside a pair of quotes, \" \" . You can't call this method on a Number data type because it doesn't exist on Number types of data! So you can start thinking of the Data Types a lot like the Elements we create on the DOM Tree. They are plain object-things we can't see but have many little properties we can access on the back side of them. Aspect 2 . The syntax of .split() looks just like the syntax of Invoking a JavaScript function we built ourselves. That's because it is. These methods were built by the developers of the JavaScript language and reside under-the-hood. We don't have to build them, all we have to do is read the docs on them and know how to use them. Aspect 3 . The .split() method returns a funny looking thing called an Array . ( Remember, [\"B\", \"a\", \"l\", \"l\", \"o\", \"o\", \"n\", ] from above? ) This is another type of data in JavaScript which we're going to dig into in the next lesson. It's important to understand simply that each type of data or data type has utility for specific scenarios. The Array data type has the most built-in methods so it's often advantageous to convert data like a string to an array. You'll see in the next lesson!!","title":"As We Move Forward"},{"location":"module-3/jsFunctionSyntax/#practice-it","text":"Go to W3Schools JavaScript Exercises and complete the first 15 challenges in JS Variables, JS Operators , JS Data Types , and JS Functions . HINT: in JS Data Types you'll be asked about a data type we haven't covered in length yet. It's an Object.","title":"Practice It"},{"location":"module-3/jsFunctionSyntax/#know-your-docs","text":"MDN Docs - Old-School Function Syntaxt","title":"Know Your Docs"},{"location":"module-3/nestedArrays/","text":"Nested Arrays \u201cDo one thing every day that scares you.\u201d\u2015Eleanor Roosevelt Overview Nested Arrays or Multi-Dimensional Arrays at first sound scary and crazy. But, rest assured, they are simple and very easy to use. Remember how we learned that Array data types are really lists of other objects like Numbers, Strings, Functions, and yes, even other Arrays? When we have an array nested inside of another array we call them Nested or Multi-Dimensional Arrays. 1 2 3 4 5 6 const myArr = [ [ 1 , 2 , 4 , 88 , 54 , 91 , 3 ], [ \"let\" , \"live\" , \"love\" , \"leadership\" , \"last\" , \"lofty\" , \"leader\" ], [ personObj , personTalkFunc , addPersonFunc , removePersonFunc ], [[ 3 , 5 , 6 , 99 ], [ 100 , 6 , 4 , 2 ], [ 77 , 81 , 9 ]] ] The array, myArr , from the snippet above has 4 objects inside of it; the fact that each of those objects is an array makes it an array of 4 arrays. Do you see them? Each is separated by a comma, , . If we logged each of these arrays to the console we'd see the following: myArr[0] => [1, 2, 4, 88, 54, 91, 3] myArr[1] => [\"let\", \"live\", \"love\", \"leadership\", \"last\", \"lofty\", \"leader\"] myArr[2] => [personObj, personTalkFunc, addPersonFunc, removePersonFunc] myArr[3] => [[3, 5, 6, 99], [100, 6, 4, 2], [77, 81, 9]] Do you see it? The beauty of Multi-Dimensional Arrays is that we can continue stacking, or chaining bracket-notation on top of other brackets!! For example, if we wanted to access the first number in the first object of myArr we'd write: myArr[0][0] which would be 1 . But if we wanted to access the first number of the first array of the last object in myArr we'd write myArr[3][0][0] which would be 3 ; but if we just wrote myArr[3][0] would equal [3, 5, 6, 99] . See that? To get to the word \"lofty\" in the second object of myArr : myArr[1][5] . Are you catching on? Below you'll see an example that relates directly to your Tic Tac Toe game in class but it's important to remember that these Data Structures are similar to the data structures you'll see when you retrieve data from a database . Knowing how to access the data inside nested arrays is crucial to your future job! Practice It To complete the logic of your Tic Tac Toe game you'll need to know how to access Nested Arrays because the Data Structure we would use to represent a Tic Tac Toe board would be a Nested Array like: 1 2 3 4 5 let board = [ [ \"\" , \"\" , \"\" ], // <-- Row 1, index 0 [ \"\" , \"\" , \"\" ], // <-- Row 2, index 1 [ \"\" , \"\" , \"\" ] // <-- Row 3, index 2 ] Where each index in the board array represents a row on the Tic Tac Toe board and each \"\" , or index of the inner arrays, represents column on the Tic Tac Toe board. Try it yourself . Go to the console in your browser and: Copy/paste the board example into it. Hit Enter . Then run board[0][0] = \"X\" Then run board . What do you see? It should be something like: \"(3) [Array(3), Array(3),Array(3)]\" Click on the drop-down arrow to open the array. What changed? Try it again but this time, change the position you want to change: board[1][2] , board[2][1] , etc. Play and see what you can figure out. Try .push() , .pop() , shift and unshift Go to W3Schools to practice on these three Array Exercises","title":"Nested Arrays"},{"location":"module-3/nestedArrays/#nested-arrays","text":"\u201cDo one thing every day that scares you.\u201d\u2015Eleanor Roosevelt","title":"Nested Arrays"},{"location":"module-3/nestedArrays/#overview","text":"Nested Arrays or Multi-Dimensional Arrays at first sound scary and crazy. But, rest assured, they are simple and very easy to use. Remember how we learned that Array data types are really lists of other objects like Numbers, Strings, Functions, and yes, even other Arrays? When we have an array nested inside of another array we call them Nested or Multi-Dimensional Arrays. 1 2 3 4 5 6 const myArr = [ [ 1 , 2 , 4 , 88 , 54 , 91 , 3 ], [ \"let\" , \"live\" , \"love\" , \"leadership\" , \"last\" , \"lofty\" , \"leader\" ], [ personObj , personTalkFunc , addPersonFunc , removePersonFunc ], [[ 3 , 5 , 6 , 99 ], [ 100 , 6 , 4 , 2 ], [ 77 , 81 , 9 ]] ] The array, myArr , from the snippet above has 4 objects inside of it; the fact that each of those objects is an array makes it an array of 4 arrays. Do you see them? Each is separated by a comma, , . If we logged each of these arrays to the console we'd see the following: myArr[0] => [1, 2, 4, 88, 54, 91, 3] myArr[1] => [\"let\", \"live\", \"love\", \"leadership\", \"last\", \"lofty\", \"leader\"] myArr[2] => [personObj, personTalkFunc, addPersonFunc, removePersonFunc] myArr[3] => [[3, 5, 6, 99], [100, 6, 4, 2], [77, 81, 9]] Do you see it? The beauty of Multi-Dimensional Arrays is that we can continue stacking, or chaining bracket-notation on top of other brackets!! For example, if we wanted to access the first number in the first object of myArr we'd write: myArr[0][0] which would be 1 . But if we wanted to access the first number of the first array of the last object in myArr we'd write myArr[3][0][0] which would be 3 ; but if we just wrote myArr[3][0] would equal [3, 5, 6, 99] . See that? To get to the word \"lofty\" in the second object of myArr : myArr[1][5] . Are you catching on? Below you'll see an example that relates directly to your Tic Tac Toe game in class but it's important to remember that these Data Structures are similar to the data structures you'll see when you retrieve data from a database . Knowing how to access the data inside nested arrays is crucial to your future job!","title":"Overview"},{"location":"module-3/nestedArrays/#practice-it","text":"To complete the logic of your Tic Tac Toe game you'll need to know how to access Nested Arrays because the Data Structure we would use to represent a Tic Tac Toe board would be a Nested Array like: 1 2 3 4 5 let board = [ [ \"\" , \"\" , \"\" ], // <-- Row 1, index 0 [ \"\" , \"\" , \"\" ], // <-- Row 2, index 1 [ \"\" , \"\" , \"\" ] // <-- Row 3, index 2 ] Where each index in the board array represents a row on the Tic Tac Toe board and each \"\" , or index of the inner arrays, represents column on the Tic Tac Toe board. Try it yourself . Go to the console in your browser and: Copy/paste the board example into it. Hit Enter . Then run board[0][0] = \"X\" Then run board . What do you see? It should be something like: \"(3) [Array(3), Array(3),Array(3)]\" Click on the drop-down arrow to open the array. What changed? Try it again but this time, change the position you want to change: board[1][2] , board[2][1] , etc. Play and see what you can figure out. Try .push() , .pop() , shift and unshift Go to W3Schools to practice on these three Array Exercises","title":"Practice It"},{"location":"module-3/objectLiterals/","text":"Type Object-Literal \u201cHe who refuses to embrace a unique opportunity loses the prize as surely as if he had failed.\u201c \u2013 William James Overview The reason we've held off teach JavaScript Objects until now is because in JavaScript, everything is a object: Strings, Numbers, Arrays, Functions, Arrays, and yes, Objects. This is also why we refer to everything as object-things, because they're all just chunks of data held within the program we're building. So a pure JavaScript Object is a way to group multiple bits of data that are all related to one another. For instance, if we were cataloging types of trees for people to contribute to the 1 Trillion Tree Need you might want to offer them things like: grow Zone Mature Height in feet Special Care Soil Type as well as name and catalogID To offer an easier way to structure the data we'd need to display on the web page for them we wouldn't want an array because those are for lists, not necessarily related items. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 const arrayOfTree = [{ catalogID : 38 , name : \"American Beech\" , growZone : \"4-9\" , matureHeightFT : 40 , specialCare : \"Full Sun\" , soilType : [ \"Acidic\" , \"Clay\" , \"Loamy\" , \"Moist\" , \"Sandy\" , \"Well-drained\" ] }, { catalogID : 81 , name : \"River Birch\" , growZone : \"4-9\" , matureHeightFT : 70 , specialCare : \"Partial Shade\" soilType : [ \"Acidic\" , \"Clay\" , \"Drought-Tolerant\" , \"Loamy\" , \"Moist\" , \"Sandy\" , \"Well-drained\" , \"Wet\" ] }, { catalogID : 90 , name : \"Northern Catalpa\" , growZone : 4 - 8 , matureHeightFT : 60 , specialCare : \"Partial Shade\" , soilType : [ \"Acidic\" , \"Alkaline\" , \"Clay\" , \"Drought-Tolerant\" , \"Loamy\" , \"Moist\" , \"Rich\" , \"Sandy\" , \"Well-drained\" , \"Wet\" ] }] Above we see an array of three objects that each contain information on three different trees. We can loop over the object themselves but we cannot loop over the keys inside them. However, we can still access the values with dot-notation. 1 2 console . log ( arrayOfTree [ 2 ]. name ) // => Northern Catalpa console . log ( arrayOfTree [ 1 ]. matureHeightFT ) // => 70 If you're confused, think of them just like CSS, on the left-side of the : is the key /property and on the right-side is value . Additional Resources TheNetNinja goes a little further than you need to know at this point in your career but at least you can see how an objects is created in the first 10 minutes. YT, The Net Ninja - JS Tutorial 5: Objects Know Your Docs MDN Docs - Object Initializer","title":"Type Object-Literal"},{"location":"module-3/objectLiterals/#type-object-literal","text":"\u201cHe who refuses to embrace a unique opportunity loses the prize as surely as if he had failed.\u201c \u2013 William James","title":"Type Object-Literal"},{"location":"module-3/objectLiterals/#overview","text":"The reason we've held off teach JavaScript Objects until now is because in JavaScript, everything is a object: Strings, Numbers, Arrays, Functions, Arrays, and yes, Objects. This is also why we refer to everything as object-things, because they're all just chunks of data held within the program we're building. So a pure JavaScript Object is a way to group multiple bits of data that are all related to one another. For instance, if we were cataloging types of trees for people to contribute to the 1 Trillion Tree Need you might want to offer them things like: grow Zone Mature Height in feet Special Care Soil Type as well as name and catalogID To offer an easier way to structure the data we'd need to display on the web page for them we wouldn't want an array because those are for lists, not necessarily related items. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 const arrayOfTree = [{ catalogID : 38 , name : \"American Beech\" , growZone : \"4-9\" , matureHeightFT : 40 , specialCare : \"Full Sun\" , soilType : [ \"Acidic\" , \"Clay\" , \"Loamy\" , \"Moist\" , \"Sandy\" , \"Well-drained\" ] }, { catalogID : 81 , name : \"River Birch\" , growZone : \"4-9\" , matureHeightFT : 70 , specialCare : \"Partial Shade\" soilType : [ \"Acidic\" , \"Clay\" , \"Drought-Tolerant\" , \"Loamy\" , \"Moist\" , \"Sandy\" , \"Well-drained\" , \"Wet\" ] }, { catalogID : 90 , name : \"Northern Catalpa\" , growZone : 4 - 8 , matureHeightFT : 60 , specialCare : \"Partial Shade\" , soilType : [ \"Acidic\" , \"Alkaline\" , \"Clay\" , \"Drought-Tolerant\" , \"Loamy\" , \"Moist\" , \"Rich\" , \"Sandy\" , \"Well-drained\" , \"Wet\" ] }] Above we see an array of three objects that each contain information on three different trees. We can loop over the object themselves but we cannot loop over the keys inside them. However, we can still access the values with dot-notation. 1 2 console . log ( arrayOfTree [ 2 ]. name ) // => Northern Catalpa console . log ( arrayOfTree [ 1 ]. matureHeightFT ) // => 70 If you're confused, think of them just like CSS, on the left-side of the : is the key /property and on the right-side is value .","title":"Overview"},{"location":"module-3/objectLiterals/#additional-resources","text":"TheNetNinja goes a little further than you need to know at this point in your career but at least you can see how an objects is created in the first 10 minutes. YT, The Net Ninja - JS Tutorial 5: Objects","title":"Additional Resources"},{"location":"module-3/objectLiterals/#know-your-docs","text":"MDN Docs - Object Initializer","title":"Know Your Docs"},{"location":"module-3/typeArray/","text":"Type Array \u201cIt is time for us all to stand and cheer for the doer, the achiever \u2013 the one who recognizes the challenges and does something about it.\u201d \u2013Vince Lombardi Overview Up to this point you've seen a couple types of data including String and Number . Just like we have different element types to work with in the DOM, in JavaScript we have different types of data to work with. Each comes with its own properties and methods available to adjust and call. FYI: Last lesson we learned about the syntax of a Function but we didn't even mention that itself is a type of data(data type)! Now we have three types of data: Number, String, and Function. In this lesson we'll add one more type of data, Array ! What's An Array? The words array and list are interchangeable. In fact, in other languages like C#, they are called lists instead of arrays. If this is true, we can think of the data type, Array as a way to group many items together in the form of a list. Let's say we're creating a todo list. We wouldn't want to create a new variable to hold each todo as String types: 1 2 3 4 5 6 7 // Inefficient way to hold a list of ToDos let todo1 = \"wash the dog.\" let todo2 = \"wash the car.\" let todo3 = \"meditate.\" let todo4 = \"learn to prepare a new healthy meal.\" let todo5 = \"journal my thoughts.\" Instead, we could hold a list of items like this in an array/list. Like so... 1 2 3 // A better way to hold a list of similar or related items let myTodos = [ \"wash the dog.\" , \"wash the car.\" , \"meditate.\" , \"learn to prepare a new healthy meal.\" , \"journal my thoughts.\" ] From the examples above you can deduce: Arrays are created in a similar way as the Number, String, or Function types are created. We start by simply using the keyword const, then naming the array something like myTodos then assigning it a value with the = symbol. Beyond that, we can see that an array's syntax includes a pair of square-brackets, [] and we separate our items with a comma, ,. But what if we want to hold a list of numbers? 1 let aListOfNumbers = [ 8 , 45 , 71 , 23 , 75 , 99 , 103 , 5 , 61 , 2 ] What if we wanted to hold a list of Numbers and Strings? 1 let mixedList = [ 855 , \"Growth\" , 2630 , 7 , \"Strength\" , \"Positive Change\" , 1013 , \"Laughter\" ] Great! We can put anything we like in an array as long as we use the proper syntax, but what can we do with an array that we can't do with a String or Number? I'm glad you asked! What Does Indexed Mean? You see, an Array is indexed which means every item in the array has a hidden number attached to it. These hidden numbers mark the place in the array the items sits. This means, that every place in the array is marked with a number that ascends from 0 up to the total number of items in the array. From left to right, we can count the items in the array as 0, 1, 2, 3, 4, 5, 6, etc, until we reach the end of the array. This is useful because we can access those items just the same way we can access the properties on our HTML Elements! Check out the two code snippets below and see if you can figure out the connection. 1 2 3 4 5 6 7 8 9 10 <!-- HTML --> < p id = \"parrot\" > Blue feathers. </ p > < script > // JavaScript let ourElement = document . getElementById ( \"parrot\" ) let text = ourElement . innerHTML console . log ( text ) // => \"Blue Feathers.\" </ script > In the example above we see some JavaScript inside the <script> element that holds the value of the <p> element in the variable named ourElement . Then we access its innerHTML property and hold it in the text variable. If we log text to the console we should see \"Blue Feathers.\" . In this same way, we can access the items / properties of an array by using its indexes : 0, 1, 2, 3 ... \u221e. Below we see an example of JS code that creates an array and logs out a few of its items/properties. 1 2 3 4 5 let courage = [ 999 , \"wonderful\" , 100 , 10 , \"challenge\" ] console . log ( courage [ 0 ]) // => 999 console . log ( courage [ 1 ]) // => \"wonderful\" console . log ( courage [ 4 ]) // => \"challenge\" In the code snippet above you see a different syntax than what we've used before, [0]. This is called bracket-notation . It works the same as dot-notation except that it can accept numbers where dot-notation can only take letters/words that refer to a property name like .innerHTML . To access the hidden numbers , indexes , we use bracket-notation. To access properties with names we know we use dot-notation. We'll use these indexes later when we write loops, as well! Practice It - Array Indexes In Chrome, open the inspector tool, then open the Console tab.( Cmd + Shift + C / Ctrl + Shift + C ) Inside that open space, you can type JavaScript. Go ahead and create an array called phones with 4 phone numbers as 4 different items. Type them as strings like this: \"512-888-0000\" . Hit Enter . Now console.log each of the phone number using bracket-notation: phones[2] , phones[3] , phones[0] , etc. First Two Array Methods Again, just like each HTML Element has methods, or built-in functions, so do each of our JavaScript Data Types. Arrays have many many methods which makes them very useful and versatile. Today we'll cover two very essential methods: .pop() and .push() . These two methods remove or add an item to the end of the array. So phones.pop() will remove the last phone number in the array you created in the Practice It section above. On the contrary, .push() will add an item to the end of an array. If you wanted to add a number to your phones array you could write: phones.push(\"214-991-0050\") . This would add \"214-991-0050\" to the end of the array. Try it yourself! Go back to your Console tab (if you reloaded your window you'll need to create a new array called phones . See the Practice It section above for instructions) Write phones.push(\"214-991-0050\") + Enter . Now console.log(phones) + Enter . What do you see? Now write phones.pop() + Enter . Then console.log(phones) + Enter again. What do you see? These two methods are very useful! Let's say you're building a todo app (like we'll be doing in a few days) and you'd like to add an item to the list. You can use and onclick method to pass the input 's value to a function that .push() es to the todo list! When you've finished the todo, you could do the same technique but instead use .pop() to remove the last todo! We'll stop for now on the methods of Arrays but we'll come back to the them soon because they are very useful types of data ! In the next lesson we'll cover how to loop over an array while we cover Loops!! Practice It Create a new repo or CodePen and paste the following code into the index.html file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > < article id = \"text-box\" ></ article > < button onclick = \"addNewElement()\" > Click Me </ button > < script > // Create an array called listOfWords const listOfWords = [ \"Beautiful\" , \"Grand\" , \"Brave\" , \"Powerful\" ] // Create a variable to count the number of clicks let clicks = 0 const addNewElement = () => { // Use the document method: .createElement() to create a <p> element const newParagraph = document . createElement ( \"p\" ) // Use the .createTextNode() method to create a text node with each of the words of the array // ON LINE 25 - Replace the \"me\" to Practice Bracket-Notation and make this function access each element one-at-a-time using the \"clicks\" as a value for the indexes of the array. const newText = document . createTextNode ( me [ me ]) // Then attach the text node to the new <p> element newParagraph . appendChild ( newText ) // Next, hold the value of the <article> element const myElement = document . getElementById ( \"text-box\" ) // Then add the new <p> element with the new text node inside it to the <article> element myElement . appendChild ( newParagraph ) // Each time this function runs add 1 to the value of clicks so we can iterate over the array clicks ++ return console . log ( clicks ) } </ script > </ body > </ html > Read the comment lines to figure out what the code is supposed to be doing. Find the two bugs and fix them to make this web page work. BONUS 1 : Create a new button, an input field, and a new function that will add words to the list of words. BONUS 2 : Take this practice problem to you for loop practice and get the program to display the new words you add to the list. Know Your Docs MDN Docs - Type Array","title":"Type Array"},{"location":"module-3/typeArray/#type-array","text":"\u201cIt is time for us all to stand and cheer for the doer, the achiever \u2013 the one who recognizes the challenges and does something about it.\u201d \u2013Vince Lombardi","title":"Type Array"},{"location":"module-3/typeArray/#overview","text":"Up to this point you've seen a couple types of data including String and Number . Just like we have different element types to work with in the DOM, in JavaScript we have different types of data to work with. Each comes with its own properties and methods available to adjust and call. FYI: Last lesson we learned about the syntax of a Function but we didn't even mention that itself is a type of data(data type)! Now we have three types of data: Number, String, and Function. In this lesson we'll add one more type of data, Array !","title":"Overview"},{"location":"module-3/typeArray/#whats-an-array","text":"The words array and list are interchangeable. In fact, in other languages like C#, they are called lists instead of arrays. If this is true, we can think of the data type, Array as a way to group many items together in the form of a list. Let's say we're creating a todo list. We wouldn't want to create a new variable to hold each todo as String types: 1 2 3 4 5 6 7 // Inefficient way to hold a list of ToDos let todo1 = \"wash the dog.\" let todo2 = \"wash the car.\" let todo3 = \"meditate.\" let todo4 = \"learn to prepare a new healthy meal.\" let todo5 = \"journal my thoughts.\" Instead, we could hold a list of items like this in an array/list. Like so... 1 2 3 // A better way to hold a list of similar or related items let myTodos = [ \"wash the dog.\" , \"wash the car.\" , \"meditate.\" , \"learn to prepare a new healthy meal.\" , \"journal my thoughts.\" ] From the examples above you can deduce: Arrays are created in a similar way as the Number, String, or Function types are created. We start by simply using the keyword const, then naming the array something like myTodos then assigning it a value with the = symbol. Beyond that, we can see that an array's syntax includes a pair of square-brackets, [] and we separate our items with a comma, ,. But what if we want to hold a list of numbers? 1 let aListOfNumbers = [ 8 , 45 , 71 , 23 , 75 , 99 , 103 , 5 , 61 , 2 ] What if we wanted to hold a list of Numbers and Strings? 1 let mixedList = [ 855 , \"Growth\" , 2630 , 7 , \"Strength\" , \"Positive Change\" , 1013 , \"Laughter\" ] Great! We can put anything we like in an array as long as we use the proper syntax, but what can we do with an array that we can't do with a String or Number? I'm glad you asked!","title":"What's An Array?"},{"location":"module-3/typeArray/#what-does-indexed-mean","text":"You see, an Array is indexed which means every item in the array has a hidden number attached to it. These hidden numbers mark the place in the array the items sits. This means, that every place in the array is marked with a number that ascends from 0 up to the total number of items in the array. From left to right, we can count the items in the array as 0, 1, 2, 3, 4, 5, 6, etc, until we reach the end of the array. This is useful because we can access those items just the same way we can access the properties on our HTML Elements! Check out the two code snippets below and see if you can figure out the connection. 1 2 3 4 5 6 7 8 9 10 <!-- HTML --> < p id = \"parrot\" > Blue feathers. </ p > < script > // JavaScript let ourElement = document . getElementById ( \"parrot\" ) let text = ourElement . innerHTML console . log ( text ) // => \"Blue Feathers.\" </ script > In the example above we see some JavaScript inside the <script> element that holds the value of the <p> element in the variable named ourElement . Then we access its innerHTML property and hold it in the text variable. If we log text to the console we should see \"Blue Feathers.\" . In this same way, we can access the items / properties of an array by using its indexes : 0, 1, 2, 3 ... \u221e. Below we see an example of JS code that creates an array and logs out a few of its items/properties. 1 2 3 4 5 let courage = [ 999 , \"wonderful\" , 100 , 10 , \"challenge\" ] console . log ( courage [ 0 ]) // => 999 console . log ( courage [ 1 ]) // => \"wonderful\" console . log ( courage [ 4 ]) // => \"challenge\" In the code snippet above you see a different syntax than what we've used before, [0]. This is called bracket-notation . It works the same as dot-notation except that it can accept numbers where dot-notation can only take letters/words that refer to a property name like .innerHTML . To access the hidden numbers , indexes , we use bracket-notation. To access properties with names we know we use dot-notation. We'll use these indexes later when we write loops, as well!","title":"What Does Indexed Mean?"},{"location":"module-3/typeArray/#practice-it-array-indexes","text":"In Chrome, open the inspector tool, then open the Console tab.( Cmd + Shift + C / Ctrl + Shift + C ) Inside that open space, you can type JavaScript. Go ahead and create an array called phones with 4 phone numbers as 4 different items. Type them as strings like this: \"512-888-0000\" . Hit Enter . Now console.log each of the phone number using bracket-notation: phones[2] , phones[3] , phones[0] , etc.","title":"Practice It - Array Indexes"},{"location":"module-3/typeArray/#first-two-array-methods","text":"Again, just like each HTML Element has methods, or built-in functions, so do each of our JavaScript Data Types. Arrays have many many methods which makes them very useful and versatile. Today we'll cover two very essential methods: .pop() and .push() . These two methods remove or add an item to the end of the array. So phones.pop() will remove the last phone number in the array you created in the Practice It section above. On the contrary, .push() will add an item to the end of an array. If you wanted to add a number to your phones array you could write: phones.push(\"214-991-0050\") . This would add \"214-991-0050\" to the end of the array. Try it yourself! Go back to your Console tab (if you reloaded your window you'll need to create a new array called phones . See the Practice It section above for instructions) Write phones.push(\"214-991-0050\") + Enter . Now console.log(phones) + Enter . What do you see? Now write phones.pop() + Enter . Then console.log(phones) + Enter again. What do you see? These two methods are very useful! Let's say you're building a todo app (like we'll be doing in a few days) and you'd like to add an item to the list. You can use and onclick method to pass the input 's value to a function that .push() es to the todo list! When you've finished the todo, you could do the same technique but instead use .pop() to remove the last todo! We'll stop for now on the methods of Arrays but we'll come back to the them soon because they are very useful types of data ! In the next lesson we'll cover how to loop over an array while we cover Loops!!","title":"First Two Array Methods"},{"location":"module-3/typeArray/#practice-it","text":"Create a new repo or CodePen and paste the following code into the index.html file. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > < article id = \"text-box\" ></ article > < button onclick = \"addNewElement()\" > Click Me </ button > < script > // Create an array called listOfWords const listOfWords = [ \"Beautiful\" , \"Grand\" , \"Brave\" , \"Powerful\" ] // Create a variable to count the number of clicks let clicks = 0 const addNewElement = () => { // Use the document method: .createElement() to create a <p> element const newParagraph = document . createElement ( \"p\" ) // Use the .createTextNode() method to create a text node with each of the words of the array // ON LINE 25 - Replace the \"me\" to Practice Bracket-Notation and make this function access each element one-at-a-time using the \"clicks\" as a value for the indexes of the array. const newText = document . createTextNode ( me [ me ]) // Then attach the text node to the new <p> element newParagraph . appendChild ( newText ) // Next, hold the value of the <article> element const myElement = document . getElementById ( \"text-box\" ) // Then add the new <p> element with the new text node inside it to the <article> element myElement . appendChild ( newParagraph ) // Each time this function runs add 1 to the value of clicks so we can iterate over the array clicks ++ return console . log ( clicks ) } </ script > </ body > </ html > Read the comment lines to figure out what the code is supposed to be doing. Find the two bugs and fix them to make this web page work. BONUS 1 : Create a new button, an input field, and a new function that will add words to the list of words. BONUS 2 : Take this practice problem to you for loop practice and get the program to display the new words you add to the list.","title":"Practice It"},{"location":"module-3/typeArray/#know-your-docs","text":"MDN Docs - Type Array","title":"Know Your Docs"},{"location":"module-3/usingTrello/","text":"Using Trello \u201cIn essence, if we want to direct our lives, we must take control of our consistent actions. It\u2019s not what we do once in a while that shapes our lives, but what we do consistently.\u201d \u2013Tony Robbins Overview Continuing on with that idea of breaking down large ideas into smaller pieces, then into tiny steps that will build that bridge from point-A to point-B. Let's introduce Trello , a free software owned by Atlassian for doing exactly what was described above by creating tiny draggable steps to keep you organized! With Trello we can create Swim Lanes . This is AGILE jargon for columns that represent the status of a task, i.e. inbox, doing, done, etc. Where, Inbox would mean a place team members could add things to be done. Doing , since your whole team works on one board, this show what tasks are being worked on and by who. Done , beyond the obvious here, it's also a place that could signal a team lead/code reviewer to review your latest Pull Request. Archived , after your teams has finished a code sprint you'll still want access to tasks that have been completed, when, and by who. Icebox , kept for a later date, this category is reserved for tasks that seem a little too extra or your team doesn't have bandwidth for right now. This is a good place to keep up with stretch goals. You should begin building your team board with these swim lanes or something very similar since this is what most companies practice. Practice It Starting next week we'll be building a new portfolio website with a partner. It's important to stay organized and motivated on the tasks so you both complete it. Remember, you already know everything you need to know to build this website so you don't have to focus on learning new code or programming, so use this time to apply what you've learned and build your confidence with these tools: HTML, CSS, and JS while learning so cool things as you go. This new tool, Trello, is just to help you get & stay organized and help you communicate between each other. So get to learning about this new tool: Accounts are free but do require a sign-up. So let's get an account and a board created today! Navigate to the trello tutorial Click around on the cards and start to get familiar with this tool. Go answer your Questions for Student Discussion while you're here. Now click \"Sign-up\", create an account. Create a new board and set it up the way you've learned so far. See if you can begin translating your sketches and notes from your notepad to your board. Additional Resources YT, Simpletivity - 7 Things You Should Do with Every Trello Board Know Your Docs Trello Docs - Keyboard Shortcuts Trello Docs - How to Use Trello Like a Pro","title":"Using Trello"},{"location":"module-3/usingTrello/#using-trello","text":"\u201cIn essence, if we want to direct our lives, we must take control of our consistent actions. It\u2019s not what we do once in a while that shapes our lives, but what we do consistently.\u201d \u2013Tony Robbins","title":"Using Trello"},{"location":"module-3/usingTrello/#overview","text":"Continuing on with that idea of breaking down large ideas into smaller pieces, then into tiny steps that will build that bridge from point-A to point-B. Let's introduce Trello , a free software owned by Atlassian for doing exactly what was described above by creating tiny draggable steps to keep you organized! With Trello we can create Swim Lanes . This is AGILE jargon for columns that represent the status of a task, i.e. inbox, doing, done, etc. Where, Inbox would mean a place team members could add things to be done. Doing , since your whole team works on one board, this show what tasks are being worked on and by who. Done , beyond the obvious here, it's also a place that could signal a team lead/code reviewer to review your latest Pull Request. Archived , after your teams has finished a code sprint you'll still want access to tasks that have been completed, when, and by who. Icebox , kept for a later date, this category is reserved for tasks that seem a little too extra or your team doesn't have bandwidth for right now. This is a good place to keep up with stretch goals. You should begin building your team board with these swim lanes or something very similar since this is what most companies practice.","title":"Overview"},{"location":"module-3/usingTrello/#practice-it","text":"Starting next week we'll be building a new portfolio website with a partner. It's important to stay organized and motivated on the tasks so you both complete it. Remember, you already know everything you need to know to build this website so you don't have to focus on learning new code or programming, so use this time to apply what you've learned and build your confidence with these tools: HTML, CSS, and JS while learning so cool things as you go. This new tool, Trello, is just to help you get & stay organized and help you communicate between each other. So get to learning about this new tool: Accounts are free but do require a sign-up. So let's get an account and a board created today! Navigate to the trello tutorial Click around on the cards and start to get familiar with this tool. Go answer your Questions for Student Discussion while you're here. Now click \"Sign-up\", create an account. Create a new board and set it up the way you've learned so far. See if you can begin translating your sketches and notes from your notepad to your board.","title":"Practice It"},{"location":"module-3/usingTrello/#additional-resources","text":"YT, Simpletivity - 7 Things You Should Do with Every Trello Board","title":"Additional Resources"},{"location":"module-3/usingTrello/#know-your-docs","text":"Trello Docs - Keyboard Shortcuts Trello Docs - How to Use Trello Like a Pro","title":"Know Your Docs"},{"location":"module-4/animationIntro/","text":"Intro to Animations \u201cIf one dream should fall and break into a thousand pieces, never be afraid to pick one of those pieces up and begin again. \u201c \u2014Flavia Overview Animations, while not a definitive skill you must master, do create needed flare on websites and can set you apart from other candidates. The first thing you should learn is to not build your own, but instead \"steal\" ideas from others at CodePen.io -just search for \"animation.\" This is a great place to get ideas, and learn how to do different things. Don't be afraid to fork someone else's code, and break it, trying to figure out how they did it. It really is the best way to learn! After enough stealing you'll become a pro but for now, let's look into the basics of animations using CSS so you can steal well. How to use CSS Animations When making animations in CSS, we are actually just setting the style of an element to make it look a certain way at one point in time, then specifying a new look for a different point in time, and then setting how long it will take for the change to happen. We do this using @keyframes , along with animation-name , animation-duration . When you define CSS styles inside the @keyframes rule, the animation will plot a gradual change from one to the next that takes a specified percentage of the total time given to complete. To get started let's build a simple <div> : 1 < div class = \"animated-div\" ></ div > Then we have to give the element an animated name so the @keyframe function knows what to target. In the code snippet below, we'll add some style, an animation-name , and some animation-duration time. 1 2 3 4 5 6 7 . animated-div { width : 100 px ; height : 100 px ; background-color : red ; animation-name : example ; animation-duration : 4 s ; } With the code above we can see that the element will start at 100px by 100px, be red and the change will happen over 4 seconds. Now we can call the @keyframes function and pass it the animation-name we want to execute on which is example in this example. Now you see that code if fairly straightforward: it will change from red background to yellow background. NOTE 1: You can see the full code and try it out yourself at W3S . Note 2: The animation-duration property defines how long in seconds an animation should take to complete. If the animation-duration property is not specified, no animation will occur, because the default value is 0s (0 seconds). In the example above, we have specified when the style will change by using the keywords \"from\" and \"to,\" which represent 0% (start) and 100% (complete), respectively. It is also possible to use percentages explicitly , and by doing so you can add as many style changes as you like to happen throughout the duration of the animation! 1 2 3 4 5 6 @ keyframes example { 0 % { background-color : red ;} 25 % { background-color : yellow ;} 50 % { background-color : blue ;} 100 % { background-color : green ;} } Try it for yourself ! Practice It Open and Fork the CodePen . Change the color of each square in the CSS file. Change the animation duration from 1.5 seconds to 3 seconds, and run it. See if you can get the squares to go the opposite direction. Don't be afraid to get so immersed you spend hours playing around. That's how you get good at coding! Nerd out! Additional Resources YT, tuber - title Know Your Docs MDN Docs - Animation W3S Docs - Animation","title":"Intro to Animations"},{"location":"module-4/animationIntro/#intro-to-animations","text":"\u201cIf one dream should fall and break into a thousand pieces, never be afraid to pick one of those pieces up and begin again. \u201c \u2014Flavia","title":"Intro to Animations"},{"location":"module-4/animationIntro/#overview","text":"Animations, while not a definitive skill you must master, do create needed flare on websites and can set you apart from other candidates. The first thing you should learn is to not build your own, but instead \"steal\" ideas from others at CodePen.io -just search for \"animation.\" This is a great place to get ideas, and learn how to do different things. Don't be afraid to fork someone else's code, and break it, trying to figure out how they did it. It really is the best way to learn! After enough stealing you'll become a pro but for now, let's look into the basics of animations using CSS so you can steal well.","title":"Overview"},{"location":"module-4/animationIntro/#how-to-use-css-animations","text":"When making animations in CSS, we are actually just setting the style of an element to make it look a certain way at one point in time, then specifying a new look for a different point in time, and then setting how long it will take for the change to happen. We do this using @keyframes , along with animation-name , animation-duration . When you define CSS styles inside the @keyframes rule, the animation will plot a gradual change from one to the next that takes a specified percentage of the total time given to complete. To get started let's build a simple <div> : 1 < div class = \"animated-div\" ></ div > Then we have to give the element an animated name so the @keyframe function knows what to target. In the code snippet below, we'll add some style, an animation-name , and some animation-duration time. 1 2 3 4 5 6 7 . animated-div { width : 100 px ; height : 100 px ; background-color : red ; animation-name : example ; animation-duration : 4 s ; } With the code above we can see that the element will start at 100px by 100px, be red and the change will happen over 4 seconds. Now we can call the @keyframes function and pass it the animation-name we want to execute on which is example in this example. Now you see that code if fairly straightforward: it will change from red background to yellow background. NOTE 1: You can see the full code and try it out yourself at W3S . Note 2: The animation-duration property defines how long in seconds an animation should take to complete. If the animation-duration property is not specified, no animation will occur, because the default value is 0s (0 seconds). In the example above, we have specified when the style will change by using the keywords \"from\" and \"to,\" which represent 0% (start) and 100% (complete), respectively. It is also possible to use percentages explicitly , and by doing so you can add as many style changes as you like to happen throughout the duration of the animation! 1 2 3 4 5 6 @ keyframes example { 0 % { background-color : red ;} 25 % { background-color : yellow ;} 50 % { background-color : blue ;} 100 % { background-color : green ;} } Try it for yourself !","title":"How to use CSS Animations"},{"location":"module-4/animationIntro/#practice-it","text":"Open and Fork the CodePen . Change the color of each square in the CSS file. Change the animation duration from 1.5 seconds to 3 seconds, and run it. See if you can get the squares to go the opposite direction. Don't be afraid to get so immersed you spend hours playing around. That's how you get good at coding! Nerd out!","title":"Practice It"},{"location":"module-4/animationIntro/#additional-resources","text":"YT, tuber - title","title":"Additional Resources"},{"location":"module-4/animationIntro/#know-your-docs","text":"MDN Docs - Animation W3S Docs - Animation","title":"Know Your Docs"},{"location":"module-4/class-13/","text":"Class 13: Responsive Menu cp workspace/resources/classOutlineTemplate.md docs/module- \u201cYou will never do anything in this world without courage. It is the greatest quality in the mind next to honor \u201c \u2014Aristotle Greet, Outline, and Objectify Today we're going to: *OBJECTIVE: After this class students will have a firm understanding of: Resolving merge conflicts through git Using the CSS properties: transition , animation- and transform Project planning and team coordination Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Animated Git Conflict Team Planning Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 45 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Today you'll clone a boilerplate code base intended for a new developer to quickly begin building a portfolio website for themselves. Then you'll push it to a new repo you've created, work with a partner on different branches to make three buttons/li elements transform. Doing this, you'll create merge conflicts and you'll work together to resolve them to have a fully functioning portfolio website. Transform, Animate + Create * Fix Conflicts Clone and follow the instructions in the README.md file of the 101-Portfolio-Boilerplate-Boilerplate repo. The Specs Pushed into a new repo owned by one of the students. One new branch for each partner created off of master. Three buttons/li elements to have transformation and animation added to them. Both branches merged. Conflicts resolved. Working Portfolio Boilerplate website. Team Planning The remainder of class time is reserved for students to partner up, brainstorm, plan, design, and project plan how they'll use the remaining three classes! Exit Recap, Attendance, and Reminders, 5 mins Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) For the next three class we'll be learning many new tools in our pre-class lessons but the focus of class time will be on you and your partner building a website together. Yes, you may use the new tools you've learned in the pre-class lessons but you have enough now to build a fair website that is responsive and professional. Let's make sure we use our time wisely together so you have a polished sight that can be shown to the world!!","title":"Class 13"},{"location":"module-4/class-13/#class-13-responsive-menu","text":"cp workspace/resources/classOutlineTemplate.md docs/module- \u201cYou will never do anything in this world without courage. It is the greatest quality in the mind next to honor \u201c \u2014Aristotle","title":"Class 13: Responsive Menu"},{"location":"module-4/class-13/#greet-outline-and-objectify","text":"Today we're going to: *OBJECTIVE: After this class students will have a firm understanding of: Resolving merge conflicts through git Using the CSS properties: transition , animation- and transform Project planning and team coordination Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Animated Git Conflict Team Planning Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-4/class-13/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-4/class-13/#interview-challenge-45-mins","text":"See Your Challenge Here","title":"Interview Challenge, 45 mins"},{"location":"module-4/class-13/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-4/class-13/#creation-time-60-90-mins","text":"Today you'll clone a boilerplate code base intended for a new developer to quickly begin building a portfolio website for themselves. Then you'll push it to a new repo you've created, work with a partner on different branches to make three buttons/li elements transform. Doing this, you'll create merge conflicts and you'll work together to resolve them to have a fully functioning portfolio website.","title":"Creation Time, 60-90 mins"},{"location":"module-4/class-13/#transform-animate-create-fix-conflicts","text":"Clone and follow the instructions in the README.md file of the 101-Portfolio-Boilerplate-Boilerplate repo.","title":"Transform, Animate + Create * Fix Conflicts"},{"location":"module-4/class-13/#the-specs","text":"Pushed into a new repo owned by one of the students. One new branch for each partner created off of master. Three buttons/li elements to have transformation and animation added to them. Both branches merged. Conflicts resolved. Working Portfolio Boilerplate website.","title":"The Specs"},{"location":"module-4/class-13/#team-planning","text":"The remainder of class time is reserved for students to partner up, brainstorm, plan, design, and project plan how they'll use the remaining three classes!","title":"Team Planning"},{"location":"module-4/class-13/#exit-recap-attendance-and-reminders-5-mins","text":"Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) For the next three class we'll be learning many new tools in our pre-class lessons but the focus of class time will be on you and your partner building a website together. Yes, you may use the new tools you've learned in the pre-class lessons but you have enough now to build a fair website that is responsive and professional. Let's make sure we use our time wisely together so you have a polished sight that can be shown to the world!!","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-4/class-14/","text":"Class 14: Final Portfolio Work Day 1/2 \u201cNever let the odds keep you from doing what you know in your heart you were meant to do.\u201c \u2013H. Jackson Brown Jr. Greet, Outline, and Objectify Today we're going to: OBJECTIVE - After this class students will have a firm understanding of: Organize projects into maintainable pieces Group collaboration to achieve larger goals Questions for Student Led Discussion Student Presentations Creation Time Final Project Time Day 1/2 Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Student Presentations, 15 mins See Student Presentations List Creation Time, 110+ mins Although we're learning new techniques in our Pre-Class lessons this week and next are dedicated to you building a new Portfolio website that each of you and your partner can clone and host for each of you to use when looking for your next role! Get with your partner in a breakout room, rocketChat, Live-Share, Trello, and/or on the phone and layout together what needs to happen, when it needs to happen and who will be doing what! To keep you on track we'll all do these at the same time. Ready? Organize On Trello - 20 mins Just like we learned earlier this week create a Trello board that both you and your partner have access to. Create the swim lanes and both of you should start laying out the steps you need to accomplish to build this website. HINT: Start with the big steps (landing page, about, contact...) and then you can start breaking those down into the smaller components (header, footer, aside, main...) Label Cards with Assignee - 10 mins Before you move on make sure you both know what your responsibilities are. Assign yourself to the cards that you are responsible for. Draw Mockups for the first two pages - 15 mins Before you code, DRAW! We can't stress this enough. Draw and plan what you want to build. Spend a few minutes to layout on paper what you want your page to look like before you start trying to code it. Create Repo + index.html file + clone - 10 mins Get a place for yall's code to go. It doesn't matter who owns it. As long as each of your pull requests are being merged into the main branch you'll both be getting credit for your commits. Go ahead and host it with GitHub Pages and turn in that live URL to be graded later on. (This way you don't forget later on.) Remember to work in separate branches OFF OF main . Start Coding Don't waste time. You have access to your instructor and your partner very easily right now don't let the time slip away. Get going. Also, don't forget you can use Bootstrap and all of your other project over the past two months. The Specifications of your last project A Landing page An About page A Resume page A Contact Me page An image gallery, so to speak, that will serve as your Portfolio Page. It will have thumbnails of all the websites you've built and hosted up to this point, that when clicked they will take you to those websites. design for phone, tablet, and laptop Push Yourself Further The time remaining, continue on by create a mockup for your next web page. Exit Recap, Attendance, and Reminders, 5 mins Create a checkpoint Final Portfolio Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) Next week we'll be learning more techniques include HTML APIs like Geolocation but during class we'll be focusing our time on our project. Don't stop coding. Use the weekend to coordinate with your partner and keep pushing up your code. We want to see these by the end of our last class!!! Go ahead and turn in your live URL. No blog this weekend, just focus on building your web page.","title":"Class 14"},{"location":"module-4/class-14/#class-14-final-portfolio-work-day-12","text":"\u201cNever let the odds keep you from doing what you know in your heart you were meant to do.\u201c \u2013H. Jackson Brown Jr.","title":"Class 14: Final Portfolio Work Day 1/2"},{"location":"module-4/class-14/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - After this class students will have a firm understanding of: Organize projects into maintainable pieces Group collaboration to achieve larger goals Questions for Student Led Discussion Student Presentations Creation Time Final Project Time Day 1/2 Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-4/class-14/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-4/class-14/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-4/class-14/#creation-time-110-mins","text":"Although we're learning new techniques in our Pre-Class lessons this week and next are dedicated to you building a new Portfolio website that each of you and your partner can clone and host for each of you to use when looking for your next role! Get with your partner in a breakout room, rocketChat, Live-Share, Trello, and/or on the phone and layout together what needs to happen, when it needs to happen and who will be doing what! To keep you on track we'll all do these at the same time. Ready?","title":"Creation Time, 110+ mins"},{"location":"module-4/class-14/#organize-on-trello-20-mins","text":"Just like we learned earlier this week create a Trello board that both you and your partner have access to. Create the swim lanes and both of you should start laying out the steps you need to accomplish to build this website. HINT: Start with the big steps (landing page, about, contact...) and then you can start breaking those down into the smaller components (header, footer, aside, main...)","title":"Organize On Trello - 20 mins"},{"location":"module-4/class-14/#label-cards-with-assignee-10-mins","text":"Before you move on make sure you both know what your responsibilities are. Assign yourself to the cards that you are responsible for.","title":"Label Cards with Assignee - 10 mins"},{"location":"module-4/class-14/#draw-mockups-for-the-first-two-pages-15-mins","text":"Before you code, DRAW! We can't stress this enough. Draw and plan what you want to build. Spend a few minutes to layout on paper what you want your page to look like before you start trying to code it.","title":"Draw Mockups for the first two pages - 15 mins"},{"location":"module-4/class-14/#create-repo-indexhtml-file-clone-10-mins","text":"Get a place for yall's code to go. It doesn't matter who owns it. As long as each of your pull requests are being merged into the main branch you'll both be getting credit for your commits. Go ahead and host it with GitHub Pages and turn in that live URL to be graded later on. (This way you don't forget later on.) Remember to work in separate branches OFF OF main .","title":"Create Repo + index.html file + clone - 10 mins"},{"location":"module-4/class-14/#start-coding","text":"Don't waste time. You have access to your instructor and your partner very easily right now don't let the time slip away. Get going. Also, don't forget you can use Bootstrap and all of your other project over the past two months.","title":"Start Coding"},{"location":"module-4/class-14/#the-specifications-of-your-last-project","text":"A Landing page An About page A Resume page A Contact Me page An image gallery, so to speak, that will serve as your Portfolio Page. It will have thumbnails of all the websites you've built and hosted up to this point, that when clicked they will take you to those websites. design for phone, tablet, and laptop","title":"The Specifications of your last project"},{"location":"module-4/class-14/#push-yourself-further","text":"The time remaining, continue on by create a mockup for your next web page.","title":"Push Yourself Further"},{"location":"module-4/class-14/#exit-recap-attendance-and-reminders-5-mins","text":"Create a checkpoint Final Portfolio Assignment Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) Next week we'll be learning more techniques include HTML APIs like Geolocation but during class we'll be focusing our time on our project. Don't stop coding. Use the weekend to coordinate with your partner and keep pushing up your code. We want to see these by the end of our last class!!! Go ahead and turn in your live URL. No blog this weekend, just focus on building your web page.","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-4/class-15/","text":"Class 15: Final Portfolio Work Day 2/2 Sprint \"It does not matter how slowly you go as long as you do not stop.\" \u2014Confucius Greet, Outline, and Objectify Today we're going to: OBJECTIVE - After this class students will have an understanding of: Sprint planning as it relates to small tasks HTML5 APIs Using HTML5 APIs like Drag-and-Drop and Geolocation Questions for Student Led Discussion Student Presentations Creation Time Partners Working on Final Portfolio Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Student Presentations, 15 mins See Student Presentations List Creation Time, 110+ mins Now that you have your Trello board broken up into large steps can you sit for 15 mins to break your next page down? Do it with your partner. Sprint Planning - 15 mins If Partner A is working on Contact Page and Partner B is working on the Portfolio Page can you help each other list out what the steps of each of those will be? Go. Sprint - 95 mins Use this time to jump into a breakout room with your project partner and work hard!! Your instructor is here for any questions and support you need. Exit Recap, Attendance, and Reminders, 5 mins Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) If you haven't already, turn in a live URL for your project. Keep wireframing and planning. Keep up with your Trello board so you stay mentally organized as well! Next class we'll be holding retrospectives, essentially short presentations of everyone's work and discussions about your challenges and learning milestones. Bring your A game, work smartly over the next two days and have fun. The final project still isn't due until this Sunday after class so don't stress about finishing by next class!","title":"Class 15"},{"location":"module-4/class-15/#class-15-final-portfolio-work-day-22-sprint","text":"\"It does not matter how slowly you go as long as you do not stop.\" \u2014Confucius","title":"Class 15: Final Portfolio Work Day 2/2 Sprint"},{"location":"module-4/class-15/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - After this class students will have an understanding of: Sprint planning as it relates to small tasks HTML5 APIs Using HTML5 APIs like Drag-and-Drop and Geolocation Questions for Student Led Discussion Student Presentations Creation Time Partners Working on Final Portfolio Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-4/class-15/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-4/class-15/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-4/class-15/#creation-time-110-mins","text":"Now that you have your Trello board broken up into large steps can you sit for 15 mins to break your next page down? Do it with your partner.","title":"Creation Time, 110+ mins"},{"location":"module-4/class-15/#sprint-planning-15-mins","text":"If Partner A is working on Contact Page and Partner B is working on the Portfolio Page can you help each other list out what the steps of each of those will be? Go.","title":"Sprint Planning - 15 mins"},{"location":"module-4/class-15/#sprint-95-mins","text":"Use this time to jump into a breakout room with your project partner and work hard!! Your instructor is here for any questions and support you need.","title":"Sprint - 95 mins"},{"location":"module-4/class-15/#exit-recap-attendance-and-reminders-5-mins","text":"Prepare for next class by completing all of your pre-class lessons Complete the feedback survey(if applicable) If you haven't already, turn in a live URL for your project. Keep wireframing and planning. Keep up with your Trello board so you stay mentally organized as well! Next class we'll be holding retrospectives, essentially short presentations of everyone's work and discussions about your challenges and learning milestones. Bring your A game, work smartly over the next two days and have fun. The final project still isn't due until this Sunday after class so don't stress about finishing by next class!","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-4/class-16/","text":"Class 16: Presentation Day Reject your sense of injury and the injury itself disappears. \u2014Marcus Aurelius Greet, Outline, and Objectify Today we're going to: OBJECTIVE - After this class students will have a firm understanding of: Common terms in Agile Project Management Participating in a retro meeting Presenting their code and workflow to a team Questions for Student Led Discussion Student Presentations Creation Time Retro Presentation & Work Time - 110 mins Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Remember, your final portfolio isn't due until Sunday but let's have some retros on what you've built so far and what needs to be finished. Quick Retros One group at a time, present your app to the class including: Introduce yourself and your theme/vision for this Portfolio Website. Show-and-Tell us what you've built so far and what your struggle with. What are you most proud of in your website. (Both partners) What will you be working on over the weekend? The Specifications/Rubric Responsive for phone, tablet, and laptop - 50pts A Landing page - 10pts An About page - 10pts A Resume page - 10pts A Contact Me page - 10pts Portfolio Page - 10pts You only have to host one website for both of the partners. Later you will want to clone the repo and replace it with your own information to host again. But for now, all you have to have is ONE website hosted for both of you. Push Yourself Further 10pt Bonus - Use Canvas to animate something. 10pt Bonus - Use any HTML5 API. 10pt Bonus - Use another HTML5 API. Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Class 16 Blog Assignment Remember to turn in your Project's live URL. Instructor will begin grading them this coming Monday. You will still be able to get up to an 80 if you turn this Project in by next Sunday but you will get a 50 after that. Any project you haven't turned in yet will be an automatic 50 after next Sunday, this course's Final Submission Day . See the Home Page of this textbook for more information on the grading policy. Complete the feedback survey(if applicable) Your Final Portfolio Project is due this coming Sunday. After you finish it you should start working on the Pre-Coursework for your 200 level course. If you finish the Pre-Coursework check out the Post-Coursework of 101 to learn more and become a nerd.","title":"Class 16"},{"location":"module-4/class-16/#class-16-presentation-day","text":"Reject your sense of injury and the injury itself disappears. \u2014Marcus Aurelius","title":"Class 16: Presentation Day"},{"location":"module-4/class-16/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE - After this class students will have a firm understanding of: Common terms in Agile Project Management Participating in a retro meeting Presenting their code and workflow to a team Questions for Student Led Discussion Student Presentations Creation Time Retro Presentation & Work Time - 110 mins Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-4/class-16/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-4/class-16/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-4/class-16/#creation-time-60-90-mins","text":"Remember, your final portfolio isn't due until Sunday but let's have some retros on what you've built so far and what needs to be finished.","title":"Creation Time, 60-90 mins"},{"location":"module-4/class-16/#quick-retros","text":"One group at a time, present your app to the class including: Introduce yourself and your theme/vision for this Portfolio Website. Show-and-Tell us what you've built so far and what your struggle with. What are you most proud of in your website. (Both partners) What will you be working on over the weekend?","title":"Quick Retros"},{"location":"module-4/class-16/#the-specificationsrubric","text":"Responsive for phone, tablet, and laptop - 50pts A Landing page - 10pts An About page - 10pts A Resume page - 10pts A Contact Me page - 10pts Portfolio Page - 10pts You only have to host one website for both of the partners. Later you will want to clone the repo and replace it with your own information to host again. But for now, all you have to have is ONE website hosted for both of you.","title":"The Specifications/Rubric"},{"location":"module-4/class-16/#push-yourself-further","text":"10pt Bonus - Use Canvas to animate something. 10pt Bonus - Use any HTML5 API. 10pt Bonus - Use another HTML5 API.","title":"Push Yourself Further"},{"location":"module-4/class-16/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-4/class-16/#exit-recap-attendance-and-reminders-5-mins","text":"Create Class 16 Blog Assignment Remember to turn in your Project's live URL. Instructor will begin grading them this coming Monday. You will still be able to get up to an 80 if you turn this Project in by next Sunday but you will get a 50 after that. Any project you haven't turned in yet will be an automatic 50 after next Sunday, this course's Final Submission Day . See the Home Page of this textbook for more information on the grading policy. Complete the feedback survey(if applicable) Your Final Portfolio Project is due this coming Sunday. After you finish it you should start working on the Pre-Coursework for your 200 level course. If you finish the Pre-Coursework check out the Post-Coursework of 101 to learn more and become a nerd.","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-4/cssReset/","text":"CSS Reset \u201cApplause is the spur of noble minds, the end and aim of weak ones.\u201c \u2013Edmund Burke Overview The first coding lesson this week is pretty darn simple, it's called CSS reset. All you have to do is create a new CSS file, throw in the code shown below, link it to your HTML files ABOVE your other CSS files, and boom, you're done! But why? Why Browsers come with various default styling which means they display HTML elements slightly different from one another. Chrome has its own, Firefox another, and Safari a different default. This can cause small deviations in the appearance of your web pages. To avoid your layout looking different in the various browsers people use to see the internet, you use what's called a \"CSS Reset\". Think of it as a clean slate to start painting on. A CSS reset reduces browser default styling like border , padding , margins and font-size . When you are use a CSS reset you can count on a starting point of defining rules for elements without having surprises later on! How To create a CSS Reset just create a new CSS file and name it something like reset.css. Then, paste the following code in there. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 html , body , div , span , applet , object , iframe , h1 , h2 , h3 , h4 , h5 , h6 , p , blockquote , pre , a , abbr , acronym , address , big , cite , code , del , dfn , em , img , ins , kbd , q , s , samp , small , strike , strong , sub , sup , tt , var , b , u , i , center , dl , dt , dd , ol , ul , li , fieldset , form , label , legend , table , caption , tbody , tfoot , thead , tr , th , td , article , aside , canvas , details , embed , figure , figcaption , footer , header , hgroup , menu , nav , output , ruby , section , summary , time , mark , audio , video { margin : 0 ; padding : 0 ; border : 0 ; font-size : 100 % ; font : inherit ; vertical-align : baseline ; } All this code is doing is selecting all HTML elements and applies the same rules to them. Obviously you can overwrite the rules with new CSS rules as long as they are listed in a file below the reset.css file. The Cascade To use your new reset.css in a project, remember that HTML is read from top-down , left-to-right - if it finds two CSS definitions for the same element in both files, it will apply the most recently parsed definition, the one on the bottom . Therefore, you write <link href=\"reset.css\"/> before you link in any other CSS files, like your style.css or Google Fonts. Just like this. 1 2 < link rel = \"stylesheet\" href = \"./css/reset.css\" /> < link rel = \"stylesheet\" href = \"./css/style.css\" /> If using a third-party 1 2 3 < link rel = \"stylesheet\" href = \"./css/reset.css\" /> < link rel = \"stylesheet\" href = \"./css/bootstrap.css\" /> < link rel = \"stylesheet\" href = \"./css/style.css\" /> If your reset is read after your style , and both contain conflicting style definitions for the same element, the reset's style definition will be applied. This can be quite perplexing - to prevent unnecessary confusion, remember: add the reset before any of your own styles. Your custom styles should always come last , after any outside styles. Not like this 1 2 3 <!-- BAD! DON'T DO --> < link rel = \"stylesheet\" href = \"./css/style.css\" /> < link rel = \"stylesheet\" href = \"./css/reset.css\" /> Additional Resources YT, Kevin Powell - The Problem with Browser Default Values Medium, Kevin Powell - Understanding \"Initial\", \"Inherit\", and \"Unset Know Your Docs W3S Docs - Default CSS Values","title":"CSS Reset"},{"location":"module-4/cssReset/#css-reset","text":"\u201cApplause is the spur of noble minds, the end and aim of weak ones.\u201c \u2013Edmund Burke","title":"CSS Reset"},{"location":"module-4/cssReset/#overview","text":"The first coding lesson this week is pretty darn simple, it's called CSS reset. All you have to do is create a new CSS file, throw in the code shown below, link it to your HTML files ABOVE your other CSS files, and boom, you're done! But why?","title":"Overview"},{"location":"module-4/cssReset/#why","text":"Browsers come with various default styling which means they display HTML elements slightly different from one another. Chrome has its own, Firefox another, and Safari a different default. This can cause small deviations in the appearance of your web pages. To avoid your layout looking different in the various browsers people use to see the internet, you use what's called a \"CSS Reset\". Think of it as a clean slate to start painting on. A CSS reset reduces browser default styling like border , padding , margins and font-size . When you are use a CSS reset you can count on a starting point of defining rules for elements without having surprises later on!","title":"Why"},{"location":"module-4/cssReset/#how","text":"To create a CSS Reset just create a new CSS file and name it something like reset.css. Then, paste the following code in there. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 html , body , div , span , applet , object , iframe , h1 , h2 , h3 , h4 , h5 , h6 , p , blockquote , pre , a , abbr , acronym , address , big , cite , code , del , dfn , em , img , ins , kbd , q , s , samp , small , strike , strong , sub , sup , tt , var , b , u , i , center , dl , dt , dd , ol , ul , li , fieldset , form , label , legend , table , caption , tbody , tfoot , thead , tr , th , td , article , aside , canvas , details , embed , figure , figcaption , footer , header , hgroup , menu , nav , output , ruby , section , summary , time , mark , audio , video { margin : 0 ; padding : 0 ; border : 0 ; font-size : 100 % ; font : inherit ; vertical-align : baseline ; } All this code is doing is selecting all HTML elements and applies the same rules to them. Obviously you can overwrite the rules with new CSS rules as long as they are listed in a file below the reset.css file.","title":"How"},{"location":"module-4/cssReset/#the-cascade","text":"To use your new reset.css in a project, remember that HTML is read from top-down , left-to-right - if it finds two CSS definitions for the same element in both files, it will apply the most recently parsed definition, the one on the bottom . Therefore, you write <link href=\"reset.css\"/> before you link in any other CSS files, like your style.css or Google Fonts. Just like this. 1 2 < link rel = \"stylesheet\" href = \"./css/reset.css\" /> < link rel = \"stylesheet\" href = \"./css/style.css\" /> If using a third-party 1 2 3 < link rel = \"stylesheet\" href = \"./css/reset.css\" /> < link rel = \"stylesheet\" href = \"./css/bootstrap.css\" /> < link rel = \"stylesheet\" href = \"./css/style.css\" /> If your reset is read after your style , and both contain conflicting style definitions for the same element, the reset's style definition will be applied. This can be quite perplexing - to prevent unnecessary confusion, remember: add the reset before any of your own styles. Your custom styles should always come last , after any outside styles. Not like this 1 2 3 <!-- BAD! DON'T DO --> < link rel = \"stylesheet\" href = \"./css/style.css\" /> < link rel = \"stylesheet\" href = \"./css/reset.css\" />","title":"The Cascade"},{"location":"module-4/cssReset/#additional-resources","text":"YT, Kevin Powell - The Problem with Browser Default Values Medium, Kevin Powell - Understanding \"Initial\", \"Inherit\", and \"Unset","title":"Additional Resources"},{"location":"module-4/cssReset/#know-your-docs","text":"W3S Docs - Default CSS Values","title":"Know Your Docs"},{"location":"module-4/developSeries-TeachingYourself/","text":"Develop Series - Teaching Yourself Failure will never overtake me if my determination to succeed is strong enough. \u2014Og Mandino Overview In the past 4 weeks, you have learned so many new skills, in areas you knew nothing about before. But one of those skills, which you may not have noticed that you've been learning, is the ability to learn new skills, itself \u2014 in particular, those centering on web and software development! Throughout this course you've been reading documentation, watching videos, and practicing concepts in CodePens. This is a perfect approach to learning new things (as you will continue to do throughout your life and career). In this industry, you must learn new skills all the time: you'll take courses to further your learning, attend conferences, sit in on forums, and bring those new skills back to enrich your teams. It will be a never-ending pursuit. Do yourself a favor, and start devoting more time to learning now! As with other skills, the more you practice it, the faster and stronger you will get. How to Learn Anything Faster Practice It Bring to class 3 ways you can continue learning and practicing what you know after this course and this program.","title":"Develop Teaching Yourself"},{"location":"module-4/developSeries-TeachingYourself/#develop-series-teaching-yourself","text":"Failure will never overtake me if my determination to succeed is strong enough. \u2014Og Mandino","title":"Develop Series - Teaching Yourself"},{"location":"module-4/developSeries-TeachingYourself/#overview","text":"In the past 4 weeks, you have learned so many new skills, in areas you knew nothing about before. But one of those skills, which you may not have noticed that you've been learning, is the ability to learn new skills, itself \u2014 in particular, those centering on web and software development! Throughout this course you've been reading documentation, watching videos, and practicing concepts in CodePens. This is a perfect approach to learning new things (as you will continue to do throughout your life and career). In this industry, you must learn new skills all the time: you'll take courses to further your learning, attend conferences, sit in on forums, and bring those new skills back to enrich your teams. It will be a never-ending pursuit. Do yourself a favor, and start devoting more time to learning now! As with other skills, the more you practice it, the faster and stronger you will get.","title":"Overview"},{"location":"module-4/developSeries-TeachingYourself/#how-to-learn-anything-faster","text":"","title":"How to Learn Anything Faster"},{"location":"module-4/developSeries-TeachingYourself/#practice-it","text":"Bring to class 3 ways you can continue learning and practicing what you know after this course and this program.","title":"Practice It"},{"location":"module-4/developSeries-achievingGoals/","text":"Achieving Goals: Why, What, and How Well done is better than well said. \u2014Benjamin Franklin Overview We all have goals! Right now one of your goals could be to change into a new career using these web development skills. That's a notable and worthy goal that should be taken seriously and committed to. But why? Only you can answer that. Why do you want to change careers? Why do you want to learn these skills? Why do you want to challenge yourself this way? Is it just for money? I hope not...that won't motivate you beyond the first few bugs you have. Is it for personal satisfaction? Validation? Respect? Intrinsic value? Growth and purpose? Again...only you can answer that. But answer you must. For it is the fundamental building block to launch from if you are going to achieve your goal Why. The Golden Circle In this, albeit, old and low-fi TedTalk, Simon Sinek , clarifies how these three questions lead a company to wild success. If you think of yourself as a small business and you are the CEO then you can apply the exact same method to your life! Here's how: How. Achieving Your Ambitions Now that you know your why , let's step into the HOW of your small business model! Check it out as this radical guy wraps the world in yarn! What. Atomic Habits Now that you're fully invested in building you, your small business, now it's time to take a step and make plans. There's an incredible book you should read called Atomic Habits that takes a very realistic look at breaking all our HUGE goals into tiny, achievable, and useful habits. It's also available on Audible !","title":"Develop Your Goals"},{"location":"module-4/developSeries-achievingGoals/#achieving-goals-why-what-and-how","text":"Well done is better than well said. \u2014Benjamin Franklin","title":"Achieving Goals: Why, What, and How"},{"location":"module-4/developSeries-achievingGoals/#overview","text":"We all have goals! Right now one of your goals could be to change into a new career using these web development skills. That's a notable and worthy goal that should be taken seriously and committed to. But why? Only you can answer that. Why do you want to change careers? Why do you want to learn these skills? Why do you want to challenge yourself this way? Is it just for money? I hope not...that won't motivate you beyond the first few bugs you have. Is it for personal satisfaction? Validation? Respect? Intrinsic value? Growth and purpose? Again...only you can answer that. But answer you must. For it is the fundamental building block to launch from if you are going to achieve your goal","title":"Overview"},{"location":"module-4/developSeries-achievingGoals/#why-the-golden-circle","text":"In this, albeit, old and low-fi TedTalk, Simon Sinek , clarifies how these three questions lead a company to wild success. If you think of yourself as a small business and you are the CEO then you can apply the exact same method to your life! Here's how:","title":"Why. The Golden Circle"},{"location":"module-4/developSeries-achievingGoals/#how-achieving-your-ambitions","text":"Now that you know your why , let's step into the HOW of your small business model! Check it out as this radical guy wraps the world in yarn!","title":"How. Achieving Your Ambitions"},{"location":"module-4/developSeries-achievingGoals/#what-atomic-habits","text":"Now that you're fully invested in building you, your small business, now it's time to take a step and make plans. There's an incredible book you should read called Atomic Habits that takes a very realistic look at breaking all our HUGE goals into tiny, achievable, and useful habits. It's also available on Audible !","title":"What. Atomic Habits"},{"location":"module-4/developSeries-feelingsVsEmotions/","text":"Develop Series - Feeling vs Emotions, All Together, All at the Same Time Knowing other people's stories is the natural block-chain of humanity. Of all the Develop Series, this one is the most important. Overview Last week we talked about how impactful feelings are on our mental, spiritual, and physical well-being, even down to the biological level! We also learned about the difference between paying attention and seeking attention. This week, let's learn how to take action and affect each of those. Now that your awareness is keyed in on them you can actively pursue what's best for you, your family, and everyone around you. Get Your Feelings Outside of You Most of us don't know we're actually in control of our feelings. We have been taught to live within rules but when things don't go our way our emotions arise and our feelings go haywire! We start blaming others and shutting down. What if that didn't have to be the case! What if instead we could learn about ourselves, not just how we physically move like walking and talking, but also about our emotion state. What if we could tune into our inner world in a way that we could actually change it and make a real difference?!? Alan Watkins presents a fascinating and moving explanation of our self-development from infancy to who you are now and why we should pay attention to what's going on inside of us! Check it out.","title":"Develop Emotions vs Feelings"},{"location":"module-4/developSeries-feelingsVsEmotions/#develop-series-feeling-vs-emotions-all-together-all-at-the-same-time","text":"Knowing other people's stories is the natural block-chain of humanity. Of all the Develop Series, this one is the most important.","title":"Develop Series - Feeling vs Emotions, All Together, All at the Same Time"},{"location":"module-4/developSeries-feelingsVsEmotions/#overview","text":"Last week we talked about how impactful feelings are on our mental, spiritual, and physical well-being, even down to the biological level! We also learned about the difference between paying attention and seeking attention. This week, let's learn how to take action and affect each of those. Now that your awareness is keyed in on them you can actively pursue what's best for you, your family, and everyone around you.","title":"Overview"},{"location":"module-4/developSeries-feelingsVsEmotions/#get-your-feelings-outside-of-you","text":"Most of us don't know we're actually in control of our feelings. We have been taught to live within rules but when things don't go our way our emotions arise and our feelings go haywire! We start blaming others and shutting down. What if that didn't have to be the case! What if instead we could learn about ourselves, not just how we physically move like walking and talking, but also about our emotion state. What if we could tune into our inner world in a way that we could actually change it and make a real difference?!? Alan Watkins presents a fascinating and moving explanation of our self-development from infancy to who you are now and why we should pay attention to what's going on inside of us! Check it out.","title":"Get Your Feelings Outside of You"},{"location":"module-4/dragAndDropAPI/","text":"Drag and Drop, an HTML5 API The will to win, the desire to succeed, the urge to reach your full potential... these are the keys that will unlock the door to personal excellence. \u2014Confucius Overview When we say that HTML 5 has a Drag-n-Drop API what we mean is that the elements built into the language: div , article , img , h1 , etc, etc, all have properties that when set to do something , will trigger that something . Let's consider the way we've used the onclick attribute on a <button /> element. The onclick attribute is a property that can be set to an Event Handler Function , maybe we set it to \"handleFormSubmit()\" . Now when the button is clicked by the user it will fire the code inside the handleFormSubmit function in our JavaScript! This is exactly how the Drag-n-Drop API works except that it has different attributes and more of them; but, nevertheless, they all trigger what ever function we provide to them! Let's see it in action! The Needed Attributes/Properties Remember that attributes like: class=\"\" , id=\"\" , onclick=\"\" , etc. are like short-cuts to setting the values of properties & methods on an HTML element. They can look like clutter in your HTML files sometimes but they do well to get the job done and they're a more direct way of communicating with the DOM then writing addEventListener() in your JS files, so you'll just have to get used to them. The main attributes we use to interact with the DnD API are: draggable=\"\" ondragover=\"\" ondragstart=\"\" ondrag=\" ondrop=\"\" With the exception of the draggable attribute, each of the other attributes capture an event that can be used to fire any function you build; just like the onclick attributes capture a click event to fire any function you'd like it to trigger. Additional attributes that give you more options and control over your DnD experience can be found at MDN: HTML DnD API and include the following: ondragend=\"\" - when a drag operation ends ondragenter=\"\" - when a dragged item enters a valid drop zone. ondragexit=\"\" - when an element is no longer the drag operation's immediate drop zone/target. ondragleave=\"\" - when a dragged item leaves a valid drop zone/target. How to Use The DnD Attributes Go ahead and fork & clone this 101-DnD-Demo repo . To begin dragging an element we have to tell the browser that the element can be dragged by giving the element the attribute: draggable=\"true\" 1 < img draggable = \"true\" src = \"../image/flower.png\" alt = \"picture of a flower\" /> Many elements already have this property/attribute set to true by default but it's good practice to go ahead and make it true for whatever elements you want to work with as draggable elements. Now we'll need a place to drag the element, the drop zone/target . Essentially be telling the browser that when our dragged element is taken to a specific location on the screen, let's not prevent it from being dropped. To do this we use a method on the event called .preventDefault() . What is the event ? Again, just like an onclick it's the thing that happens between a user and the app, the event, and it's actually data we can access too! So in our DnD example we might be using the attribute ondrag but the event is \"Drag\" and ondrop attribute is really watching for a \"Drop\" event. But we don't normally call them by their name instead we use parameter names like event , ev , or simply e . It doesn't matter what we call it because it's always passed into the Event Handler Function , the function we built that we want to be fired when the event happens. I know that was a lot but I promise it's much simpler than it sounds. Let's see it in action for two places we'd like for the \"Draggable\" element to be dropped: 1 2 3 4 5 6 7 <!-- below the previous div element --> < div ondragover = \"allowDrop(event)\" > </ div > < div ondragover = \"allowDrop(event)\" > </ div > Now create a function called allowDrop 1 2 3 const allowDrop = ( e ) => { e . preventDefault (); } NOTE: Notice in the HTML that we pass in event but in the JS we use the parameter name e . This is okay. We can call them whatever we want as long as we know what's going on in the program. The .preventDefault() method is a special function used to tell the browser to do something different than it is normally supposed to do. MDN has a nice example of preventing the click of a checkbox(its default setting) Now that we've called the .preventDefault() method the browser will allow an element to be dropped on the element you'd like for it to be dropped on. If you'd like, we can add a visual element to this so we the human can see it happening by adding & removing a class name from the \"dropzone\" elements: the HTML 1 2 <!-- HTML for Adding Visual of Valid Dropzone --> < div id = \"div2\" ondrop = \"drop(event)\" ondragover = \"allowDrop(event)\" ></ div > the CSS 1 2 3 4 5 6 /* CSS for Adding Visual Cue of Valid Drop Zone by Creating a Rule for an Element with this Class Name */ . hovering { background : rgba ( 0 , 151 , 19 , 0.3 ); } the JS 1 2 3 4 5 6 // JS for Adding a Visual of a Valid Drop Zone by Adding a Class Name const allowDrop = ( e ) => { e . preventDefault (); // add \"hovering\" to the classList of the targeted drop zone element document . getElementById ( e . target . id ). classList . add ( \"hovering\" ) } But this isn't everything! We still have to capture the data, set it, get it, then append it to the targeted drop zone! Tranferring the Data on Drop Now that we have \"Draggable\" elements and \"Drop Zone\" elements let's see how we grab the data of the thing we're actually going to drag! Right when we grab an element to be dragged we get access to yet another DOM event: dragstart . To use it we simply type the attribute: ondragstart=\"\" then give it an event handler function we've built in JS: HTML for Capturing and Passing the Event over to an Event Handler Function 1 2 <!-- HTML for Capturing and Passing the Event over to an Event Handler Function --> < img draggable = \"true\" ondragstart = \"drag(event)\" src = \"../image/flower.png\" alt = \"picture of a flower\" /> 1 2 3 4 5 6 7 8 /* - JS for Creating an Event Handler Function that Will Take the Event and Set the Data for the Transfer - We have to use ES5 not ES6 syntax for this event handler due to the context needed to capture the data. */ function drag ( e ) { e . dataTransfer . setData ( \"text\" , e . target . id ); } Just like the .preventDefault() method, the event also has a property called .dataTransfer which has a method called .setData() which, as you guessed, sets the data to be transferred. Imagine the element that's being dragged is being put into a \"pseudo state\" between the place it's pickup and put down. In this in-between state the browser will have to know the data to store so it can safely put it down where we choose. To set the data to be transferred we use the .setData() method which takes two arguments, format and data . In the example above you see the format will be \"text\" , and the data will be the dragged element's id , as you see in e.target.id Dropping the Data Finally we need to drop the data into the location we choose. To do that we use the same techniques we've been doing except we use a different attribute: ondrop=\"\" and then use the opposite method from .setData() , - .getData() . .getData() is still on the .dataTransfer object-thing so we just add it to an event handler function that will be fired when an element is dropped on a drop zone element: 1 2 3 4 5 <!-- Looking at the attribute: ondrop=\"drop(event)\" --> < div id = \"div2\" ondrop = \"drop(event)\" ondragover = \"allowDrop(event)\" ondragleave = \"stopDrop(event)\" > </ div > 1 2 3 4 5 6 7 8 9 10 // Event Handler Function const drop = ( e ) => { // standard preventDefault e . preventDefault (); // extract & hold the data we set in the dataTransfer property const data = e . dataTransfer . getData ( \"text\" ); // use the \"data\" we set as a reference to what dragged element we want to drop. // then append it to the element we are doing the drop event on e . target . appendChild ( document . getElementById ( data )); } Practice It Go to the 101-DnD-Demo repo you cloned earlier and solve the problems laid out in the comments. Know Your Docs MDN Docs - Drag & Drop API MDN Docs - preventDefault() Reference, Alligator.io - Modify Class Names in JS Reference, FontAwesome - How to Use Icons Additional Resources CodePen, Coding_Journey - Advanced DnD YT, Coding Journey - HTML Drag and Drop API","title":"Drag & Drop API"},{"location":"module-4/dragAndDropAPI/#drag-and-drop-an-html5-api","text":"The will to win, the desire to succeed, the urge to reach your full potential... these are the keys that will unlock the door to personal excellence. \u2014Confucius","title":"Drag and Drop, an HTML5 API"},{"location":"module-4/dragAndDropAPI/#overview","text":"When we say that HTML 5 has a Drag-n-Drop API what we mean is that the elements built into the language: div , article , img , h1 , etc, etc, all have properties that when set to do something , will trigger that something . Let's consider the way we've used the onclick attribute on a <button /> element. The onclick attribute is a property that can be set to an Event Handler Function , maybe we set it to \"handleFormSubmit()\" . Now when the button is clicked by the user it will fire the code inside the handleFormSubmit function in our JavaScript! This is exactly how the Drag-n-Drop API works except that it has different attributes and more of them; but, nevertheless, they all trigger what ever function we provide to them! Let's see it in action!","title":"Overview"},{"location":"module-4/dragAndDropAPI/#the-needed-attributesproperties","text":"Remember that attributes like: class=\"\" , id=\"\" , onclick=\"\" , etc. are like short-cuts to setting the values of properties & methods on an HTML element. They can look like clutter in your HTML files sometimes but they do well to get the job done and they're a more direct way of communicating with the DOM then writing addEventListener() in your JS files, so you'll just have to get used to them. The main attributes we use to interact with the DnD API are: draggable=\"\" ondragover=\"\" ondragstart=\"\" ondrag=\" ondrop=\"\" With the exception of the draggable attribute, each of the other attributes capture an event that can be used to fire any function you build; just like the onclick attributes capture a click event to fire any function you'd like it to trigger. Additional attributes that give you more options and control over your DnD experience can be found at MDN: HTML DnD API and include the following: ondragend=\"\" - when a drag operation ends ondragenter=\"\" - when a dragged item enters a valid drop zone. ondragexit=\"\" - when an element is no longer the drag operation's immediate drop zone/target. ondragleave=\"\" - when a dragged item leaves a valid drop zone/target.","title":"The Needed Attributes/Properties"},{"location":"module-4/dragAndDropAPI/#how-to-use-the-dnd-attributes","text":"Go ahead and fork & clone this 101-DnD-Demo repo . To begin dragging an element we have to tell the browser that the element can be dragged by giving the element the attribute: draggable=\"true\" 1 < img draggable = \"true\" src = \"../image/flower.png\" alt = \"picture of a flower\" /> Many elements already have this property/attribute set to true by default but it's good practice to go ahead and make it true for whatever elements you want to work with as draggable elements. Now we'll need a place to drag the element, the drop zone/target . Essentially be telling the browser that when our dragged element is taken to a specific location on the screen, let's not prevent it from being dropped. To do this we use a method on the event called .preventDefault() . What is the event ? Again, just like an onclick it's the thing that happens between a user and the app, the event, and it's actually data we can access too! So in our DnD example we might be using the attribute ondrag but the event is \"Drag\" and ondrop attribute is really watching for a \"Drop\" event. But we don't normally call them by their name instead we use parameter names like event , ev , or simply e . It doesn't matter what we call it because it's always passed into the Event Handler Function , the function we built that we want to be fired when the event happens. I know that was a lot but I promise it's much simpler than it sounds. Let's see it in action for two places we'd like for the \"Draggable\" element to be dropped: 1 2 3 4 5 6 7 <!-- below the previous div element --> < div ondragover = \"allowDrop(event)\" > </ div > < div ondragover = \"allowDrop(event)\" > </ div > Now create a function called allowDrop 1 2 3 const allowDrop = ( e ) => { e . preventDefault (); } NOTE: Notice in the HTML that we pass in event but in the JS we use the parameter name e . This is okay. We can call them whatever we want as long as we know what's going on in the program. The .preventDefault() method is a special function used to tell the browser to do something different than it is normally supposed to do. MDN has a nice example of preventing the click of a checkbox(its default setting) Now that we've called the .preventDefault() method the browser will allow an element to be dropped on the element you'd like for it to be dropped on. If you'd like, we can add a visual element to this so we the human can see it happening by adding & removing a class name from the \"dropzone\" elements: the HTML 1 2 <!-- HTML for Adding Visual of Valid Dropzone --> < div id = \"div2\" ondrop = \"drop(event)\" ondragover = \"allowDrop(event)\" ></ div > the CSS 1 2 3 4 5 6 /* CSS for Adding Visual Cue of Valid Drop Zone by Creating a Rule for an Element with this Class Name */ . hovering { background : rgba ( 0 , 151 , 19 , 0.3 ); } the JS 1 2 3 4 5 6 // JS for Adding a Visual of a Valid Drop Zone by Adding a Class Name const allowDrop = ( e ) => { e . preventDefault (); // add \"hovering\" to the classList of the targeted drop zone element document . getElementById ( e . target . id ). classList . add ( \"hovering\" ) } But this isn't everything! We still have to capture the data, set it, get it, then append it to the targeted drop zone!","title":"How to Use The DnD Attributes"},{"location":"module-4/dragAndDropAPI/#tranferring-the-data-on-drop","text":"Now that we have \"Draggable\" elements and \"Drop Zone\" elements let's see how we grab the data of the thing we're actually going to drag! Right when we grab an element to be dragged we get access to yet another DOM event: dragstart . To use it we simply type the attribute: ondragstart=\"\" then give it an event handler function we've built in JS: HTML for Capturing and Passing the Event over to an Event Handler Function 1 2 <!-- HTML for Capturing and Passing the Event over to an Event Handler Function --> < img draggable = \"true\" ondragstart = \"drag(event)\" src = \"../image/flower.png\" alt = \"picture of a flower\" /> 1 2 3 4 5 6 7 8 /* - JS for Creating an Event Handler Function that Will Take the Event and Set the Data for the Transfer - We have to use ES5 not ES6 syntax for this event handler due to the context needed to capture the data. */ function drag ( e ) { e . dataTransfer . setData ( \"text\" , e . target . id ); } Just like the .preventDefault() method, the event also has a property called .dataTransfer which has a method called .setData() which, as you guessed, sets the data to be transferred. Imagine the element that's being dragged is being put into a \"pseudo state\" between the place it's pickup and put down. In this in-between state the browser will have to know the data to store so it can safely put it down where we choose. To set the data to be transferred we use the .setData() method which takes two arguments, format and data . In the example above you see the format will be \"text\" , and the data will be the dragged element's id , as you see in e.target.id","title":"Tranferring the Data on Drop"},{"location":"module-4/dragAndDropAPI/#dropping-the-data","text":"Finally we need to drop the data into the location we choose. To do that we use the same techniques we've been doing except we use a different attribute: ondrop=\"\" and then use the opposite method from .setData() , - .getData() . .getData() is still on the .dataTransfer object-thing so we just add it to an event handler function that will be fired when an element is dropped on a drop zone element: 1 2 3 4 5 <!-- Looking at the attribute: ondrop=\"drop(event)\" --> < div id = \"div2\" ondrop = \"drop(event)\" ondragover = \"allowDrop(event)\" ondragleave = \"stopDrop(event)\" > </ div > 1 2 3 4 5 6 7 8 9 10 // Event Handler Function const drop = ( e ) => { // standard preventDefault e . preventDefault (); // extract & hold the data we set in the dataTransfer property const data = e . dataTransfer . getData ( \"text\" ); // use the \"data\" we set as a reference to what dragged element we want to drop. // then append it to the element we are doing the drop event on e . target . appendChild ( document . getElementById ( data )); }","title":"Dropping the Data"},{"location":"module-4/dragAndDropAPI/#practice-it","text":"Go to the 101-DnD-Demo repo you cloned earlier and solve the problems laid out in the comments.","title":"Practice It"},{"location":"module-4/dragAndDropAPI/#know-your-docs","text":"MDN Docs - Drag & Drop API MDN Docs - preventDefault() Reference, Alligator.io - Modify Class Names in JS Reference, FontAwesome - How to Use Icons","title":"Know Your Docs"},{"location":"module-4/dragAndDropAPI/#additional-resources","text":"CodePen, Coding_Journey - Advanced DnD YT, Coding Journey - HTML Drag and Drop API","title":"Additional Resources"},{"location":"module-4/geolocationAPI/","text":"Geolocation, An HTML5 API Good, better, best. Never let it rest. 'Til your good is better and your better is best. \u2014St. Jerome Overview Now that you have a handle on what HTML5 APIs are available for you to use, let's figure out how to use one and cover it some detail. The Geolocation API is a really useful API for adding functionality that lets the user and the app interact with their physical world. Let's get started! The Geolocation API The HTML5 Geolocation API lets you communicate with a user's device to obtain their relative location using the Global Positioning System, launched in 1960 for Dept. of Defense use only until it was released for civilian you in 1983. With this incredible technology, you can share data specific to the location of the device viewing the websites and apps you've built. Ever wondered how Pokemon Go or Uber works ? By writing just a little bit of JavaScript, you can capture latitudinal and longitudinal coordinates . After you have this coordinates data you can do simple tasks like offer the user the local weather or greet them with a city specific phrase: \"Good Morning Dallas, TX!\" AND later on, when you learn to build servers & databases, you could send this Lat/Long coordinates to a back-end web server to perform location-aware tasks, such as finding & suggesting local businesses or sharing the user's location with friends, etc. Practice It For a better understanding of how this works you'll have to do more investigation on your own: Fork and clone this 101-Geolocation-Demo repo. Run it and figure out how it's working. Check your console.log statements. Read the README.md file and see if you can solve the two challenges by reading the MDN - [ ] Docs and watching the two videos below. NOTE: Here's a CodePen for Geolocation as well. Know Your Docs MDN Docs - Geolocation API Additional Resources As always, there is no substitute for the documentation ; however, here is an easy read , which will give you a good feel for the structure and use of the Geolocation API within HTML5. Basically, you could copy/paste the code from that article into your js file, and get the coordinates of your location, or the location of a user who's using your page! Pretty cool, right? NOTE ON VIDEO 1: This next video uses a special kind of programming that we haven't gotten to yet, called functional programming. The guy passes a function showPosition into a method called navigator.geolocation.getCurrentPosition() . Essentially, this passes whatever is returned from .getCurrentPosition() into showPosition and that data is held in the parameter named: position . Open up the repo above and try it yourself. YT, Programming Wizard - HTML5 Geolocation API Tutorial NOTE ON VIDEO 2: This second video is a bit more advanced, and provides a lot more detail. Just follow along, and type exactly what you see for now. You will understand it better as you build more stuff. YT, DoingITeasyChannel - JS Lesson 18: Geolocation API","title":"Geolocation API"},{"location":"module-4/geolocationAPI/#geolocation-an-html5-api","text":"Good, better, best. Never let it rest. 'Til your good is better and your better is best. \u2014St. Jerome","title":"Geolocation, An HTML5 API"},{"location":"module-4/geolocationAPI/#overview","text":"Now that you have a handle on what HTML5 APIs are available for you to use, let's figure out how to use one and cover it some detail. The Geolocation API is a really useful API for adding functionality that lets the user and the app interact with their physical world. Let's get started!","title":"Overview"},{"location":"module-4/geolocationAPI/#the-geolocation-api","text":"The HTML5 Geolocation API lets you communicate with a user's device to obtain their relative location using the Global Positioning System, launched in 1960 for Dept. of Defense use only until it was released for civilian you in 1983. With this incredible technology, you can share data specific to the location of the device viewing the websites and apps you've built. Ever wondered how Pokemon Go or Uber works ? By writing just a little bit of JavaScript, you can capture latitudinal and longitudinal coordinates . After you have this coordinates data you can do simple tasks like offer the user the local weather or greet them with a city specific phrase: \"Good Morning Dallas, TX!\" AND later on, when you learn to build servers & databases, you could send this Lat/Long coordinates to a back-end web server to perform location-aware tasks, such as finding & suggesting local businesses or sharing the user's location with friends, etc.","title":"The Geolocation API"},{"location":"module-4/geolocationAPI/#practice-it","text":"For a better understanding of how this works you'll have to do more investigation on your own: Fork and clone this 101-Geolocation-Demo repo. Run it and figure out how it's working. Check your console.log statements. Read the README.md file and see if you can solve the two challenges by reading the MDN - [ ] Docs and watching the two videos below. NOTE: Here's a CodePen for Geolocation as well.","title":"Practice It"},{"location":"module-4/geolocationAPI/#know-your-docs","text":"MDN Docs - Geolocation API","title":"Know Your Docs"},{"location":"module-4/geolocationAPI/#additional-resources","text":"As always, there is no substitute for the documentation ; however, here is an easy read , which will give you a good feel for the structure and use of the Geolocation API within HTML5. Basically, you could copy/paste the code from that article into your js file, and get the coordinates of your location, or the location of a user who's using your page! Pretty cool, right? NOTE ON VIDEO 1: This next video uses a special kind of programming that we haven't gotten to yet, called functional programming. The guy passes a function showPosition into a method called navigator.geolocation.getCurrentPosition() . Essentially, this passes whatever is returned from .getCurrentPosition() into showPosition and that data is held in the parameter named: position . Open up the repo above and try it yourself. YT, Programming Wizard - HTML5 Geolocation API Tutorial NOTE ON VIDEO 2: This second video is a bit more advanced, and provides a lot more detail. Just follow along, and type exactly what you see for now. You will understand it better as you build more stuff. YT, DoingITeasyChannel - JS Lesson 18: Geolocation API","title":"Additional Resources"},{"location":"module-4/html5-apis/","text":"The HTML5 APIs Look up at the stars and not down at your feet. Try to make sense of what you see, and wonder about what makes the universe exist. Be curious. \u2014Stephen Hawking Overview Again, there are SO many options for you to learn and the great thing about learning web development is there is SO much to learn!! Seriously, everyday you could be deepening and/or broadening your knowledge base just by going to work. Wouldn't that be cool!?! Today we're going to learn about the built-in APIs of HTML5. Already you've been working with some of them like Fetch and Canvas. But before we can learn how to use any more of theme we should first learn a bit of the history of HTML and how we got to this moment you're in now, able to use these built-in APIs!! To do this we'll start with an extraordinary NebraskaJS conference talk where Zeno Rocha breaks down the history of HTML, the changes with HTML5, why/what/how to use some of the best HTML APIs as well as how to step out of your comfort zone to experiment and make magic happen! What Makes up the HTML5 APIs? But how does it work? Remember how the DOM is an upside-down tree structure? It has branches that consist of nodes, which are just object-things (collections of key-value pairs which just branch out into \u2014 other nodes/ object-things , containing other nodes, and so on and so on? The Document Object-Thing The document object is the top-level node in this structure, so that, starting with document , we could use dot-notation to call any one of the method or properties it has, such as .getElementById() . We could also refer to one of the properties belonging to document in the same way, such as document.domain , which would give us the domain name of the server that loaded the page. And the same is true of the lower(child) nodes...they have their own properties and methods. For instance: 1 2 3 < p id = \"our-element\" > Hello World!! </ p > 1 2 3 const x = document . getElementById ( \"our-element\" ) console . log ( x . innerHTML ); // = Hello World!! If we logged out x.innerHTML when x is set to capture the <p id=\"our-element\"> element on our document we'd get what's on the inside of it: \"Hello World!!\" . The Window Object-Thing When we're talking about HTML APIs, we need to conceptualize the document node as the top, or root object of the DOM tree; but there is actually yet another object above it in the tree structure, which is not part of the DOM, but contains the entire DOM as one of its own properties. This great-grandmother of objects is the window object. It's known as the Global Object of a web page. It represents the browser's window that is displaying the document . And, in addition to document (and the rest of the DOM), window has its own properties and methods, one of these properties is the navigator object as in: window.navigator . The Navigator Object You can think of the navigator object-thing as a sister element to document and, unsurprisingly, it also contains its own properties and methods that provide information about the user's browser. To access a property within navigator , you would, again, use dot-notation, thus: window.navigator. someProperty . And, actually, in the case of the properties and methods of the window object, we don't even have to use window explicitly when referring to them. Since window is the global object , sitting at the top of the whole tree structure, the browser knows that when we write navigator. someProperty in our JavaScript, we implicitly mean window.navigator. someProperty . A Few Properties Available on The navigator Object .appCodeName returns the code name of the browser. .appName returns the name of the browser. .appVersion returns the version information of the browser. .cookieEnabled determines whether cookies are enabled in the browser. .geolocation returns a Geolocation object that can be used to locate the user's position. .language returns the language of the browser. .onLine determines whether the browser is online. .platform returns for which platform the browser is compiled. .product returns the engine name of the browser. .userAgent returns the user-agent header sent by the browser to the server. Here's a complete list . It's all of these properties and methods on the window , navigator , and other related objects that create all of the HTML5 APIs like geoLocation , canvas , and fetch . Practice It - Navigator Object Open your browser's dev tools and go to the Console Tab. Type in navigator.online + Enter Type in navigator.language + Enter Type in navigator.userAgent + Enter Type in navigator.geolocation + Enter What did you see each time? How many other properties and methods do you see on the navigator object? More HTML5 APIs Ambient Light API : provides information about the ambient light levels, as detected by a device\u2019s light sensor. Battery Status API : provides information about the battery status of the device. Canvas 2D Context : allows drawing and manipulation of graphics in a browser. Clipboard API : provides access to the operating system\u2019s copy, cut and paste functionality. Contacts : allows access to a user\u2019s contacts repository in the web browser. Drag and Drop : supports dragging and dropping items within and between browser windows. File API : provides programs secure access to the device\u2019s file system. Forms : gives programs access to the new data types defined in HTML5. Fullscreen API : enables full-screen display of elements within web pages, and temporarily suppresses display of the browser's own user interface. Gamepad API : supports input from USB game-pad controllers. Geolocation : provides web applications access to geographical location data about the user\u2019s device. MediaDevices.getUserMedia() : provides access to external device data (such as webcam video). History API : allows programs to manipulate the browser history. HTML Microdata : provides a way to annotate content with computer-readable labels. Indexed database : creates a simple client-side database system in the web browser. Internationalization API : provides access to locale-sensitive formatting and string comparison. Offline apps : allows programmers to make web apps available in offline mode. Proximity API : provides information about the distance between the device and another object. Screen Orientation : reads the screen orientation state (portrait or landscape), and gives programmers the ability to know when it changes, and to lock it in place. Selection : supports selecting elements in JavaScript using CSS-style selectors. Server-sent events : allows the server to push data to the browser without the browser needing to request it. User Timing API : gives programmers access to high-precision timestamps to measure the performance of applications. Vibration API : allows access to the vibration functionality of the device. Web Audio API : is an API for processing and synthesizing audio. Web Messaging : allows browser windows to communicate with each other across different origins. Web Speech API : provides speech input and text-to-speech output features. Web Storage : allows the storage of key-value pairs in the browser. Web Sockets : opens an interactive communication session between the browser and server. Web Workers : allows JavaScript to execute scripts in the background. XMLHttpRequest2 : improves XMLHttpRequest, eliminating the need to work around same-origin policy errors, and making it work with new features of HTML5. Here's a reference for more information about these and other web APIs . Additional Resources Article, CreativeBloq - Guide to HTML5 APIs YT, Steve Griffith - Web APIs Playlist Know Your Docs MDN Docs - The Web APIs MDN Docs - Window Object MDN Docs - Navigator Object","title":"The HTML5 APIs"},{"location":"module-4/html5-apis/#the-html5-apis","text":"Look up at the stars and not down at your feet. Try to make sense of what you see, and wonder about what makes the universe exist. Be curious. \u2014Stephen Hawking","title":"The HTML5 APIs"},{"location":"module-4/html5-apis/#overview","text":"Again, there are SO many options for you to learn and the great thing about learning web development is there is SO much to learn!! Seriously, everyday you could be deepening and/or broadening your knowledge base just by going to work. Wouldn't that be cool!?! Today we're going to learn about the built-in APIs of HTML5. Already you've been working with some of them like Fetch and Canvas. But before we can learn how to use any more of theme we should first learn a bit of the history of HTML and how we got to this moment you're in now, able to use these built-in APIs!! To do this we'll start with an extraordinary NebraskaJS conference talk where Zeno Rocha breaks down the history of HTML, the changes with HTML5, why/what/how to use some of the best HTML APIs as well as how to step out of your comfort zone to experiment and make magic happen!","title":"Overview"},{"location":"module-4/html5-apis/#what-makes-up-the-html5-apis","text":"But how does it work? Remember how the DOM is an upside-down tree structure? It has branches that consist of nodes, which are just object-things (collections of key-value pairs which just branch out into \u2014 other nodes/ object-things , containing other nodes, and so on and so on?","title":"What Makes up the HTML5 APIs?"},{"location":"module-4/html5-apis/#the-document-object-thing","text":"The document object is the top-level node in this structure, so that, starting with document , we could use dot-notation to call any one of the method or properties it has, such as .getElementById() . We could also refer to one of the properties belonging to document in the same way, such as document.domain , which would give us the domain name of the server that loaded the page. And the same is true of the lower(child) nodes...they have their own properties and methods. For instance: 1 2 3 < p id = \"our-element\" > Hello World!! </ p > 1 2 3 const x = document . getElementById ( \"our-element\" ) console . log ( x . innerHTML ); // = Hello World!! If we logged out x.innerHTML when x is set to capture the <p id=\"our-element\"> element on our document we'd get what's on the inside of it: \"Hello World!!\" .","title":"The Document Object-Thing"},{"location":"module-4/html5-apis/#the-window-object-thing","text":"When we're talking about HTML APIs, we need to conceptualize the document node as the top, or root object of the DOM tree; but there is actually yet another object above it in the tree structure, which is not part of the DOM, but contains the entire DOM as one of its own properties. This great-grandmother of objects is the window object. It's known as the Global Object of a web page. It represents the browser's window that is displaying the document . And, in addition to document (and the rest of the DOM), window has its own properties and methods, one of these properties is the navigator object as in: window.navigator .","title":"The Window Object-Thing"},{"location":"module-4/html5-apis/#the-navigator-object","text":"You can think of the navigator object-thing as a sister element to document and, unsurprisingly, it also contains its own properties and methods that provide information about the user's browser. To access a property within navigator , you would, again, use dot-notation, thus: window.navigator. someProperty . And, actually, in the case of the properties and methods of the window object, we don't even have to use window explicitly when referring to them. Since window is the global object , sitting at the top of the whole tree structure, the browser knows that when we write navigator. someProperty in our JavaScript, we implicitly mean window.navigator. someProperty .","title":"The Navigator Object"},{"location":"module-4/html5-apis/#a-few-properties-available-on-the-navigator-object","text":".appCodeName returns the code name of the browser. .appName returns the name of the browser. .appVersion returns the version information of the browser. .cookieEnabled determines whether cookies are enabled in the browser. .geolocation returns a Geolocation object that can be used to locate the user's position. .language returns the language of the browser. .onLine determines whether the browser is online. .platform returns for which platform the browser is compiled. .product returns the engine name of the browser. .userAgent returns the user-agent header sent by the browser to the server. Here's a complete list . It's all of these properties and methods on the window , navigator , and other related objects that create all of the HTML5 APIs like geoLocation , canvas , and fetch .","title":"A Few Properties Available on The navigator Object"},{"location":"module-4/html5-apis/#practice-it-navigator-object","text":"Open your browser's dev tools and go to the Console Tab. Type in navigator.online + Enter Type in navigator.language + Enter Type in navigator.userAgent + Enter Type in navigator.geolocation + Enter What did you see each time? How many other properties and methods do you see on the navigator object?","title":"Practice It - Navigator Object"},{"location":"module-4/html5-apis/#more-html5-apis","text":"Ambient Light API : provides information about the ambient light levels, as detected by a device\u2019s light sensor. Battery Status API : provides information about the battery status of the device. Canvas 2D Context : allows drawing and manipulation of graphics in a browser. Clipboard API : provides access to the operating system\u2019s copy, cut and paste functionality. Contacts : allows access to a user\u2019s contacts repository in the web browser. Drag and Drop : supports dragging and dropping items within and between browser windows. File API : provides programs secure access to the device\u2019s file system. Forms : gives programs access to the new data types defined in HTML5. Fullscreen API : enables full-screen display of elements within web pages, and temporarily suppresses display of the browser's own user interface. Gamepad API : supports input from USB game-pad controllers. Geolocation : provides web applications access to geographical location data about the user\u2019s device. MediaDevices.getUserMedia() : provides access to external device data (such as webcam video). History API : allows programs to manipulate the browser history. HTML Microdata : provides a way to annotate content with computer-readable labels. Indexed database : creates a simple client-side database system in the web browser. Internationalization API : provides access to locale-sensitive formatting and string comparison. Offline apps : allows programmers to make web apps available in offline mode. Proximity API : provides information about the distance between the device and another object. Screen Orientation : reads the screen orientation state (portrait or landscape), and gives programmers the ability to know when it changes, and to lock it in place. Selection : supports selecting elements in JavaScript using CSS-style selectors. Server-sent events : allows the server to push data to the browser without the browser needing to request it. User Timing API : gives programmers access to high-precision timestamps to measure the performance of applications. Vibration API : allows access to the vibration functionality of the device. Web Audio API : is an API for processing and synthesizing audio. Web Messaging : allows browser windows to communicate with each other across different origins. Web Speech API : provides speech input and text-to-speech output features. Web Storage : allows the storage of key-value pairs in the browser. Web Sockets : opens an interactive communication session between the browser and server. Web Workers : allows JavaScript to execute scripts in the background. XMLHttpRequest2 : improves XMLHttpRequest, eliminating the need to work around same-origin policy errors, and making it work with new features of HTML5. Here's a reference for more information about these and other web APIs .","title":"More HTML5 APIs"},{"location":"module-4/html5-apis/#additional-resources","text":"Article, CreativeBloq - Guide to HTML5 APIs YT, Steve Griffith - Web APIs Playlist","title":"Additional Resources"},{"location":"module-4/html5-apis/#know-your-docs","text":"MDN Docs - The Web APIs MDN Docs - Window Object MDN Docs - Navigator Object","title":"Know Your Docs"},{"location":"module-4/htmlAPI-canvas-pt1/","text":"Canvas, an HTML API, Part One \u201cA question that sometimes drives me hazy: am I or are the others crazy?\u201d \u2015Albert Einstein Overview Continuing on with these \"Quick Tip\" type of lessons, let's learn how to build moving backgrounds with the the canvas HTML element! Again, these section of the course is not only intended to give you new tools to work with but also to provide you with context on finding new tools and learning new techniques using your own curiosity. With that said, this lesson is going to follow along with Chris Courses a YouTuber that puts together some insanely clear videos. Let's go! Creating and Resizing a Canvas To start let's either create a new repo or clone the 101-canvas-practice repo . Take a look at the three files: index.html , canvas-style.css , and canvas.js . The HTML file already has links to the other two files to it. And there's an empty canvas element inside the body with an id: \"my-canvas\" : <canvas id=\"my-canvas\"></canvas> In the canvas.js file you'll see the canvas element is saved in a variable called canvas: 1 2 3 4 5 // canvas.js let canvas = document . getElementById ( \"my-canvas\" ) // console to make sure we captured the element in the variable console . log ( canvas ) Test it. Check it out in your browser's console to see the object saved in the canvas variable. Now, we can resize the canvas with JS to equal the height of the whole screen: 1 2 canvas . width = window . innerWidth ; canvas . height = window . innerHeight ; Let's now remove the margin around the body element so it truly takes up the whole screen: 1 2 3 4 5 6 7 8 /* canvas-style.css */ body { margin : 0 ; } canvas { background : grey ; } Test it. Open it up in your browser to make sure you have a fully grey screen. Getting Context to Draw on the Canvas Before we can draw we have to capture the drawing context within the canvas element. .getContext() is a method built on every canvas element, and yes, we can call it every time we want to use it but that would be a lot of typing on our part and an inefficient use of memory for the computer. So instead let's capture what this method returns in a variable we'll call c ! NOTE: Paste these code snippets into your repo and run the code in the browser. 1 2 3 // canvas.js // line 5+ const c = canvas . getContext ( '2d' ) What c ends up being here is an object-thing that now has lots of useful properties and methods we can call to do certain tasks (see below)...now let's draw. To see ALL of the properties and methods on the object returned by .getContext('2d') just console.log(c) and check it out in your console! Drawing Rectangles The first method we'll use is .fillRect() , a method that draws and fills in a rectangle shape on the canvas. It requires 4 arguments to know where to begin (the top-left corner) and how wide and tall the shape should be: .fillRect(x, y, width, height) . 1 2 3 // canvas.js // line 7+ c . fillRect ( 75 , 75 , 100 , 100 ) NOTE: You can find all of the methods and the arguments they take on the documentation of 2D Canvas Drawing Context at MDN . Notice how the rectangle is black? That's because the property: fillStyle is defaulted to #000000 or black. Let's change that by adding these two lines below: 1 2 3 4 // canvas.js // line 8+ c . fillStyle = 'red' ; c . fillRect ( 125 , 125 , 200 , 40 ) Your turn. Move the red rectangle to the right so it isn't over lapping with the black one. Change colors again and draw a new rectangle of any size just to the right of your red rectangle. Change the color and draw another just below the black rectangle. More can be found at HTML5 Canvas Tutorial - Ep.1 Drawing Lines Now that we can draw and change the color or rectangles let see some of the other methods that can be drawn including: Lines, Arcs & Circles, Bezier Curves, Images, and Text. Let's start with Lines: The first thing we have to do is invoke a method called: .beginPath() . This simply tells the canvas element to get ready for a line to be drawn: 1 2 3 // canvas.js // line 11+ c . beginPath (); Now we have to tell the canvas where to begin and end the line. The start the line we use the method: .moveTo() as in, \"Canvas, move your pencil to the place I tell you. . moveTo() takes to arguments: .moveTo(x, y) 1 2 3 4 // canvas.js // line 11+ c . beginPath (); c . moveTo ( 20 , 100 ) After we've told the canvas where to begin we have to tell it where to go using the method .lineTo() as in, \"Draw a line to x and y coordinates.\" 1 2 3 4 5 // canvas.js // line 11+ c . beginPath (); c . moveTo ( 20 , 100 ) c . lineTo ( 1000 , 500 ) But still nothing shows up! That's because canvas gives you control as to not only what will be draw but when. This \"when\" portion comes with the method: .stroke() as if to say, \"Ok, draw it!\" 1 2 3 4 5 6 // canvas.js // line 11+ c . beginPath (); c . moveTo ( 20 , 100 ) c . lineTo ( 1000 , 500 ) c . stroke () You can continue drawing the line from there by giving another instruction before the .stroke() method OR adding another .stroke() method after it: 1 2 3 4 5 // canvas.js // line 11+ // . . . continued on c . lineTo ( 1500 , 200 ) c . stroke () You can also change the color of the line the same way you did with the rectangle but with: c.strokeStyle=\"pink\" . NOTE: For the rest of this section it might be good for you to follow along with with video below starting at 7:10 . Drawing Circles To draw arc and circle we use the same techniques but, obviously, a different method: .arc() . This method takes multiple arguments with two that will be a little mathy but I think you can figure it out. They go in this order: .arc(x, y, radius, startAngle, endAngle [, anticlockwise] ) You know what x and y are for and can guess what rad`ius is for but let's look quickly at those last three: startAngle - angle at which the arc starts in radians, measured from the positive x-axis. endAngle - angle at which the arc ends in radians, measured from the positive x-axis. anticlockwise - This is an optional argument that will either be true draw anti-clockwise or false (draw clockwise). To use this try starting with the following code: 1 2 3 4 5 // canvas.js c . beginPath (); c . strokeStyle = \"hotpink\" ; c . arc ( 600 , 250 , 50 , 0 , 2 * Math . PI ); c . stroke (); NOTE: If you're curious how to draw arcs checkout the Arc docs at MDN . Programmatically Drawing Let's go ahead and program the canvas to draw 50 different circles in different places with a few different colors. We'll start with a for loop, which you've learned about already!! 1 2 3 4 // canvas.js for ( let i = 0 ; i < 50 ; i ++ ) { } Inside the for loop let's create two random coordinate each time the loop runs: 1 2 3 4 5 // canvas.js for ( let i = 0 ; i < 50 ; i ++ ) { const x = Math . random () * ( window . innerWidth - 100 ) const y = Math . random () * ( window . innerHeight - 100 ) } Then we can use those random coordinates to start a new circle: 1 2 3 4 5 6 7 8 9 10 11 // canvas.js for ( let i = 0 ; i < 50 ; i ++ ) { const x = Math . random () * ( window . innerWidth - 100 ) const y = Math . random () * ( window . innerHeight - 100 ) // Draw Circle c . beginPath (); c . strokeStyle = \"black\" ; c . arc ( x , y , 50 , 0 , 2 * Math . PI ); c . stroke (); } Next we can create a list of colors to randomly selected from: 1 2 3 4 5 6 7 8 9 10 11 12 13 // canvas.jss for ( let i = 0 ; i < 50 ; i ++ ) { const x = Math . random () * ( window . innerWidth - 100 ) const y = Math . random () * ( window . innerHeight - 100 ) // the first value will be null to accommodate for no 0 number being drawn const colors = [ null , \"#8C0C3C\" , \"#1B2968\" , \"#4B9C2B\" , \"#A4C89C\" , \"#F8605F\" , \"#F8B493\" , \"#32B9B2\" , \"#F85532\" , \"#C2C8E4\" , \"#357153\" , \"#A061D4\" , \"#404462\" ] // Draw Circle c . beginPath (); c . strokeStyle = \"black\" ; c . arc ( x , y , 50 , 0 , 2 * Math . PI ); c . stroke (); } Now we need to generate a random number to use to select a color from the list and replace \"black\" with this random number: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // canvas.js for ( let i = 0 ; i < 50 ; i ++ ) { const x = Math . random () * ( window . innerWidth - 100 ) const y = Math . random () * ( window . innerHeight - 100 ) // the first value will be null to accommodate for no 0 number being drawn const colors = [ null , \"#8C0C3C\" , \"#1B2968\" , \"#4B9C2B\" , \"#A4C89C\" , \"#F8605F\" , \"#F8B493\" , \"#32B9B2\" , \"#F85532\" , \"#C2C8E4\" , \"#357153\" , \"#A061D4\" , \"#404462\" ] const randomIndex = Math . floor ( Math . random () * ( 13 - 1 )) + 1 ; // Draw Circle c . beginPath (); // replace \"black\" with the random color selected from the list c . strokeStyle = colors [ randomIndex ]; c . arc ( x , y , 50 , 0 , 2 * Math . PI ); c . stroke (); } Go ahead and run it. Refresh. Refresh. Refresh. Refresh. Like it? Try it yourself. Create a variable that can randomly generate a new size for the circle! Now try using the window.onclick event to run this for loop each time the user clicks on the screen instead on the automatic onload ! More can be found at HTML5 Canvas Tutorial - Ep.2 . Additional Resources YT, Chris Course - HTML5 Canvas Tutorial - Ep.1 YT, Chris Course - HTML5 Canvas Tutorial - Ep.2 Know Your Docs MDN Docs - Canvas API W3S Docs - Canvas API CodePen - Canvas Demo","title":"HTML API - Canvas pt.1"},{"location":"module-4/htmlAPI-canvas-pt1/#canvas-an-html-api-part-one","text":"\u201cA question that sometimes drives me hazy: am I or are the others crazy?\u201d \u2015Albert Einstein","title":"Canvas, an HTML API, Part One"},{"location":"module-4/htmlAPI-canvas-pt1/#overview","text":"Continuing on with these \"Quick Tip\" type of lessons, let's learn how to build moving backgrounds with the the canvas HTML element! Again, these section of the course is not only intended to give you new tools to work with but also to provide you with context on finding new tools and learning new techniques using your own curiosity. With that said, this lesson is going to follow along with Chris Courses a YouTuber that puts together some insanely clear videos. Let's go!","title":"Overview"},{"location":"module-4/htmlAPI-canvas-pt1/#creating-and-resizing-a-canvas","text":"To start let's either create a new repo or clone the 101-canvas-practice repo . Take a look at the three files: index.html , canvas-style.css , and canvas.js . The HTML file already has links to the other two files to it. And there's an empty canvas element inside the body with an id: \"my-canvas\" : <canvas id=\"my-canvas\"></canvas> In the canvas.js file you'll see the canvas element is saved in a variable called canvas: 1 2 3 4 5 // canvas.js let canvas = document . getElementById ( \"my-canvas\" ) // console to make sure we captured the element in the variable console . log ( canvas ) Test it. Check it out in your browser's console to see the object saved in the canvas variable. Now, we can resize the canvas with JS to equal the height of the whole screen: 1 2 canvas . width = window . innerWidth ; canvas . height = window . innerHeight ; Let's now remove the margin around the body element so it truly takes up the whole screen: 1 2 3 4 5 6 7 8 /* canvas-style.css */ body { margin : 0 ; } canvas { background : grey ; } Test it. Open it up in your browser to make sure you have a fully grey screen.","title":"Creating and Resizing a Canvas"},{"location":"module-4/htmlAPI-canvas-pt1/#getting-context-to-draw-on-the-canvas","text":"Before we can draw we have to capture the drawing context within the canvas element. .getContext() is a method built on every canvas element, and yes, we can call it every time we want to use it but that would be a lot of typing on our part and an inefficient use of memory for the computer. So instead let's capture what this method returns in a variable we'll call c ! NOTE: Paste these code snippets into your repo and run the code in the browser. 1 2 3 // canvas.js // line 5+ const c = canvas . getContext ( '2d' ) What c ends up being here is an object-thing that now has lots of useful properties and methods we can call to do certain tasks (see below)...now let's draw. To see ALL of the properties and methods on the object returned by .getContext('2d') just console.log(c) and check it out in your console!","title":"Getting Context to Draw on the Canvas"},{"location":"module-4/htmlAPI-canvas-pt1/#drawing-rectangles","text":"The first method we'll use is .fillRect() , a method that draws and fills in a rectangle shape on the canvas. It requires 4 arguments to know where to begin (the top-left corner) and how wide and tall the shape should be: .fillRect(x, y, width, height) . 1 2 3 // canvas.js // line 7+ c . fillRect ( 75 , 75 , 100 , 100 ) NOTE: You can find all of the methods and the arguments they take on the documentation of 2D Canvas Drawing Context at MDN . Notice how the rectangle is black? That's because the property: fillStyle is defaulted to #000000 or black. Let's change that by adding these two lines below: 1 2 3 4 // canvas.js // line 8+ c . fillStyle = 'red' ; c . fillRect ( 125 , 125 , 200 , 40 ) Your turn. Move the red rectangle to the right so it isn't over lapping with the black one. Change colors again and draw a new rectangle of any size just to the right of your red rectangle. Change the color and draw another just below the black rectangle. More can be found at HTML5 Canvas Tutorial - Ep.1","title":"Drawing Rectangles"},{"location":"module-4/htmlAPI-canvas-pt1/#drawing-lines","text":"Now that we can draw and change the color or rectangles let see some of the other methods that can be drawn including: Lines, Arcs & Circles, Bezier Curves, Images, and Text. Let's start with Lines: The first thing we have to do is invoke a method called: .beginPath() . This simply tells the canvas element to get ready for a line to be drawn: 1 2 3 // canvas.js // line 11+ c . beginPath (); Now we have to tell the canvas where to begin and end the line. The start the line we use the method: .moveTo() as in, \"Canvas, move your pencil to the place I tell you. . moveTo() takes to arguments: .moveTo(x, y) 1 2 3 4 // canvas.js // line 11+ c . beginPath (); c . moveTo ( 20 , 100 ) After we've told the canvas where to begin we have to tell it where to go using the method .lineTo() as in, \"Draw a line to x and y coordinates.\" 1 2 3 4 5 // canvas.js // line 11+ c . beginPath (); c . moveTo ( 20 , 100 ) c . lineTo ( 1000 , 500 ) But still nothing shows up! That's because canvas gives you control as to not only what will be draw but when. This \"when\" portion comes with the method: .stroke() as if to say, \"Ok, draw it!\" 1 2 3 4 5 6 // canvas.js // line 11+ c . beginPath (); c . moveTo ( 20 , 100 ) c . lineTo ( 1000 , 500 ) c . stroke () You can continue drawing the line from there by giving another instruction before the .stroke() method OR adding another .stroke() method after it: 1 2 3 4 5 // canvas.js // line 11+ // . . . continued on c . lineTo ( 1500 , 200 ) c . stroke () You can also change the color of the line the same way you did with the rectangle but with: c.strokeStyle=\"pink\" . NOTE: For the rest of this section it might be good for you to follow along with with video below starting at 7:10 .","title":"Drawing Lines"},{"location":"module-4/htmlAPI-canvas-pt1/#drawing-circles","text":"To draw arc and circle we use the same techniques but, obviously, a different method: .arc() . This method takes multiple arguments with two that will be a little mathy but I think you can figure it out. They go in this order: .arc(x, y, radius, startAngle, endAngle [, anticlockwise] ) You know what x and y are for and can guess what rad`ius is for but let's look quickly at those last three: startAngle - angle at which the arc starts in radians, measured from the positive x-axis. endAngle - angle at which the arc ends in radians, measured from the positive x-axis. anticlockwise - This is an optional argument that will either be true draw anti-clockwise or false (draw clockwise). To use this try starting with the following code: 1 2 3 4 5 // canvas.js c . beginPath (); c . strokeStyle = \"hotpink\" ; c . arc ( 600 , 250 , 50 , 0 , 2 * Math . PI ); c . stroke (); NOTE: If you're curious how to draw arcs checkout the Arc docs at MDN .","title":"Drawing Circles"},{"location":"module-4/htmlAPI-canvas-pt1/#programmatically-drawing","text":"Let's go ahead and program the canvas to draw 50 different circles in different places with a few different colors. We'll start with a for loop, which you've learned about already!! 1 2 3 4 // canvas.js for ( let i = 0 ; i < 50 ; i ++ ) { } Inside the for loop let's create two random coordinate each time the loop runs: 1 2 3 4 5 // canvas.js for ( let i = 0 ; i < 50 ; i ++ ) { const x = Math . random () * ( window . innerWidth - 100 ) const y = Math . random () * ( window . innerHeight - 100 ) } Then we can use those random coordinates to start a new circle: 1 2 3 4 5 6 7 8 9 10 11 // canvas.js for ( let i = 0 ; i < 50 ; i ++ ) { const x = Math . random () * ( window . innerWidth - 100 ) const y = Math . random () * ( window . innerHeight - 100 ) // Draw Circle c . beginPath (); c . strokeStyle = \"black\" ; c . arc ( x , y , 50 , 0 , 2 * Math . PI ); c . stroke (); } Next we can create a list of colors to randomly selected from: 1 2 3 4 5 6 7 8 9 10 11 12 13 // canvas.jss for ( let i = 0 ; i < 50 ; i ++ ) { const x = Math . random () * ( window . innerWidth - 100 ) const y = Math . random () * ( window . innerHeight - 100 ) // the first value will be null to accommodate for no 0 number being drawn const colors = [ null , \"#8C0C3C\" , \"#1B2968\" , \"#4B9C2B\" , \"#A4C89C\" , \"#F8605F\" , \"#F8B493\" , \"#32B9B2\" , \"#F85532\" , \"#C2C8E4\" , \"#357153\" , \"#A061D4\" , \"#404462\" ] // Draw Circle c . beginPath (); c . strokeStyle = \"black\" ; c . arc ( x , y , 50 , 0 , 2 * Math . PI ); c . stroke (); } Now we need to generate a random number to use to select a color from the list and replace \"black\" with this random number: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // canvas.js for ( let i = 0 ; i < 50 ; i ++ ) { const x = Math . random () * ( window . innerWidth - 100 ) const y = Math . random () * ( window . innerHeight - 100 ) // the first value will be null to accommodate for no 0 number being drawn const colors = [ null , \"#8C0C3C\" , \"#1B2968\" , \"#4B9C2B\" , \"#A4C89C\" , \"#F8605F\" , \"#F8B493\" , \"#32B9B2\" , \"#F85532\" , \"#C2C8E4\" , \"#357153\" , \"#A061D4\" , \"#404462\" ] const randomIndex = Math . floor ( Math . random () * ( 13 - 1 )) + 1 ; // Draw Circle c . beginPath (); // replace \"black\" with the random color selected from the list c . strokeStyle = colors [ randomIndex ]; c . arc ( x , y , 50 , 0 , 2 * Math . PI ); c . stroke (); } Go ahead and run it. Refresh. Refresh. Refresh. Refresh. Like it? Try it yourself. Create a variable that can randomly generate a new size for the circle! Now try using the window.onclick event to run this for loop each time the user clicks on the screen instead on the automatic onload ! More can be found at HTML5 Canvas Tutorial - Ep.2 .","title":"Programmatically Drawing"},{"location":"module-4/htmlAPI-canvas-pt1/#additional-resources","text":"YT, Chris Course - HTML5 Canvas Tutorial - Ep.1 YT, Chris Course - HTML5 Canvas Tutorial - Ep.2","title":"Additional Resources"},{"location":"module-4/htmlAPI-canvas-pt1/#know-your-docs","text":"MDN Docs - Canvas API W3S Docs - Canvas API CodePen - Canvas Demo","title":"Know Your Docs"},{"location":"module-4/htmlAPI-canvas-pt2/","text":"The Canvas API, pt.2: Animating the Canvas Overview Before we dive into animating and interacting with our Canvas drawings let restate that this is NOT a skill you MUST have to finish your 101 Portfolio Project or to be a junior developer. This skill is being provided to you to give you more tools, start learning to program, and seeing visuals on the screen with your JavaScript code. That said, canvas and animations are SUPER cool so I'd suggest you do spend some time building with this and exploring on your own later. Animating Drawings on the Canvas During part 1 of this Canvas lesson you learned how to draw shapes and even to programmatically draw many circles using a for() loop. To animate those same circles it's best to think about the over arching goal: create the illusion of movement! To create the illusion of movement we'll be, in essence, drawing a circle in one origin, refreshing the page, then drawing the same circle a few pixels away, then repeating. To do this, we'll build a function that will call itself, again and again. (This type of programming is called recursion . We'll dig into this concept in your 200 Level course.) Once we get one direction of the circle going then we'll get the other direction moving. And each time we do that we'll create a new variable that holds the values of direction and velocity. Ready? Creating the Recursive Animate Function As usual, fork and clone this 101-canvas-practice-pt2 repo to get going. We have the basics code to draw a circle on our canvas: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // JS for Drawing a Circle // define the canvas let canvas = document . getElementById ( \"my-canvas\" ) canvas . width = window . innerWidth ; canvas . height = window . innerHeight ; // hold the 2D drawing context in a global variable const c = canvas . getContext ( '2d' ) // draw the circle c . beginPath (); c . strokeStyle = \"limegreen\" ; c . arc ( 600 , 250 , 50 , 0 , 2 * Math . PI ); c . stroke (); Now let's build a function that will do that same instructions over and over. 1 2 3 4 5 6 7 // JS for Drawing a Circle with a Function const animate = () => { c . beginPath (); c . strokeStyle = \"limegreen\" ; c . arc ( 600 , 250 , 50 , 0 , 2 * Math . PI ); c . stroke (); } But that function, even if called, will only run once. So inside that function we'll use a method on the Window object-thing that will refresh the page to redraw something new on the canvas called requestAnimationFrame() . This method is special because it gets called 60 times/second and will automatically stop if the user switches tabs. It's also only focusing on the Canvas so it's pretty efficient. This is what it looks like: requestAnimationFrame() 1 2 3 4 5 6 7 8 9 // JS for Drawing a Circle with a Recursive Function const animate = () => { // use this special Window method to refresh the Window and call `animate` again, and again, and again... requestAnimationFrame ( animate ) c . beginPath (); c . strokeStyle = \"limegreen\" ; c . arc ( 600 , 250 , 50 , 0 , 2 * Math . PI ); c . stroke (); } Notice the argument passed into the requestAnimationFrame method? It's animate , the parent function! This is recursion. A child function will call it's parent which then calls the child, which then calls the parent, which then calls the child...........you get it. Notice, too, that we didn't have to use empty-parenthesis () to invoke animate . This is because the argument requestAnimationFrame is expecting is a callback function or a function that is to be called again and again. So now we'll need to call/invoke the function: 1 2 3 4 5 6 7 8 9 10 11 // JS for Drawing a Circle with a Recursive Function const animate = () => { requestAnimationFrame ( animate ) // Draw Circle Code here.... // ..... // add a log statement to see the number and rate of calls. console . log ( \"animate function was called...\" ) } animate () Moving the X-Coordinate Sweet! Now if we run that code in our browser with Live-Server we'll see the circle getting thicker and thicker but not moving/animating. That's a problem. How do we solve it? With some quick programming, of course! Let's change the hard-coded x-coordinate value of 600 to be a variable that we can change: 1 2 3 4 5 6 7 8 9 10 11 // create a variable to hold this value let x = 600 ; const animate = () => { requestAnimationFrame ( animate ) c . beginPath (); c . strokeStyle = \"limegreen\" ; // replace the x-coordinate with the variable `x` c . arc ( x , 250 , 50 , 0 , 2 * Math . PI ); c . stroke (); } If you run that code it doesn't change much, so let's make the x value change each time the animate function is run. We could add x = Math.random() * (window.innerWidth - 100) at the top of the animate function but that would just draw a new circle at different points along the 250 y-coordinate. Instead let's increment from the origin of x = 600 . 1 2 3 4 5 6 7 8 9 10 11 12 13 // JS for Increasing the X-Coordinate by 1 each time the Animate function is called. let x = 600 ; const animate = () => { requestAnimationFrame ( animate ) c . beginPath (); c . strokeStyle = \"limegreen\" ; c . arc ( x , 250 , 50 , 0 , 2 * Math . PI ); c . stroke (); // increment the value of x by 1 each time the function is called x += 1 } Clear the First Drawing Now our circle is re-created on top of it's self, 1 pixel to the right . But that's not animation. We want the circle to appear to move. To do that we'll need need to \"erase\" the previous circle before we draw the next one. We can use a method on the getContext('2d') object-thing called .clearRect() . To use it we can access the getContext('2d') by calling c (Since we saved the getContext in a variable called c at the top of our file) then use dot-notation to get c.clearRect() . The .clearRect() method takes 4 arguments: ([start-X], [start-Y], [end-X], [end-Y]) where we'd want to say, \"Hey, .clearRect() , I want you to clear every thing from the last drawing between the top-left of the screen, (0,0 down to the farthest bottom-right of the screen: ,innerWidth, innerHeight) .\" That in code would look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 // JS for Clearing the Canvas from Top-Left to Bottom-Right // more code.... requestAnimationFrame ( animate ) // add the clear rectangle before we draw a new one c . clearRect ( 0 , 0 , innerWidth , innerHeight ) c . beginPath (); c . strokeStyle = \"limegreen\" ; c . arc ( x , 250 , 50 , 0 , 2 * Math . PI ); c . stroke (); x += 1 // more code here too... Changing the Speed and Direction Now we can change the speed of the movement of the circle, or velocity! To do this we'll go ahead and create a new variable because, yes , we could just change x += 1 to x += 4 but we'll want to randomize the velocity at a later point so we might as well throw it into another variable now: 1 2 3 4 5 6 7 8 9 10 // JS for Creating a Velocity Variable let x = 600 ; // hold the velocity in a new variable let xVelocity = 4 ; const animate = () => { // more code here... // now `x` will increment by whatever `xVelocity` is x += xVelocity If you haven't already, go ahead and run that code to see the circle speed up. Our next problem is that the circle is running off the side of the screen. To fix that all we have to do is us a Conditional Statement to say: \"If the x-value becomes higher than the entire window's inner width then reverse the change of new x-coordinate to decrement instead.\" : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // JS for Changing the X-Coordinate if it's Higher than the Width of the Window let x = 600 ; let xVelocity = 4 ; const animate = () => { requestAnimationFrame ( animate ) c . clearRect ( 0 , 0 , innerWidth , innerHeight ) c . beginPath (); c . strokeStyle = \"limegreen\" ; c . arc ( x , 250 , 50 , 0 , 2 * Math . PI ); c . stroke (); // Conditional, if x is greater than innerWidth if ( x > innerWidth ) { // reverse the value to a negative number xVelocity = - xVelocity } // x will still plus-equal xVelocity x += xVelocity } If you run that new code you'll see that the circle now bumps off the right side when the CENTER of the circle gets to the edge and it still goes off the screen on the left. Let's tell the animate function to \"Reverse the direction when the EDGE of the circle meets the edge of the screen by using the radius of the circle AND to go the opposite direction when it meets the left-side of the screen. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // JS for \"Bouncing\" at Edge of Circle & Reversing To Positive At Left-Side of Screen let x = 600 ; let xVelocity = 4 ; // Move our circle's radius to a variable we can use in other places let radius = 50 ; const animate = () => { requestAnimationFrame ( animate ) c . clearRect ( 0 , 0 , innerWidth , innerHeight ) c . beginPath (); c . strokeStyle = \"limegreen\" ; // replace the radius value with the variable `radius` c . arc ( x , 250 , radius , 0 , 2 * Math . PI ); c . stroke (); // Add the \"Or condition\", `||`, that if the circle's left-side meets the left-side of the screen then add a negative to the already negative velocity to make a positive again. if ( x + radius > innerWidth || x - radius < 0 ) { xVelocity = - xVelocity } x += xVelocity } Practice It At this point you know how to move the x-coordinate now it's time for you to show what you know. Repeat these steps for the y-coordinate so you can have a circle that \"bounces\" of the top, bottom, and sides of the screen. You'll need to: Create a variables to hold the y coordinate, yVelocity . Replace the uses of those values wherever they're used. Change the y with the yVelocity . Create another conditional statement to change those values. Additional Resources YT, Chris Courses - Animating the Canvas, Ep. 3 Know Your Docs MDN Docs - requestAnimationFrame() MDN Docs - .clearRect","title":"HTML API - Canvas pt.2"},{"location":"module-4/htmlAPI-canvas-pt2/#the-canvas-api-pt2-animating-the-canvas","text":"","title":"The Canvas API, pt.2: Animating the Canvas"},{"location":"module-4/htmlAPI-canvas-pt2/#overview","text":"Before we dive into animating and interacting with our Canvas drawings let restate that this is NOT a skill you MUST have to finish your 101 Portfolio Project or to be a junior developer. This skill is being provided to you to give you more tools, start learning to program, and seeing visuals on the screen with your JavaScript code. That said, canvas and animations are SUPER cool so I'd suggest you do spend some time building with this and exploring on your own later.","title":"Overview"},{"location":"module-4/htmlAPI-canvas-pt2/#animating-drawings-on-the-canvas","text":"During part 1 of this Canvas lesson you learned how to draw shapes and even to programmatically draw many circles using a for() loop. To animate those same circles it's best to think about the over arching goal: create the illusion of movement! To create the illusion of movement we'll be, in essence, drawing a circle in one origin, refreshing the page, then drawing the same circle a few pixels away, then repeating. To do this, we'll build a function that will call itself, again and again. (This type of programming is called recursion . We'll dig into this concept in your 200 Level course.) Once we get one direction of the circle going then we'll get the other direction moving. And each time we do that we'll create a new variable that holds the values of direction and velocity. Ready?","title":"Animating Drawings on the Canvas"},{"location":"module-4/htmlAPI-canvas-pt2/#creating-the-recursive-animate-function","text":"As usual, fork and clone this 101-canvas-practice-pt2 repo to get going. We have the basics code to draw a circle on our canvas: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // JS for Drawing a Circle // define the canvas let canvas = document . getElementById ( \"my-canvas\" ) canvas . width = window . innerWidth ; canvas . height = window . innerHeight ; // hold the 2D drawing context in a global variable const c = canvas . getContext ( '2d' ) // draw the circle c . beginPath (); c . strokeStyle = \"limegreen\" ; c . arc ( 600 , 250 , 50 , 0 , 2 * Math . PI ); c . stroke (); Now let's build a function that will do that same instructions over and over. 1 2 3 4 5 6 7 // JS for Drawing a Circle with a Function const animate = () => { c . beginPath (); c . strokeStyle = \"limegreen\" ; c . arc ( 600 , 250 , 50 , 0 , 2 * Math . PI ); c . stroke (); } But that function, even if called, will only run once. So inside that function we'll use a method on the Window object-thing that will refresh the page to redraw something new on the canvas called requestAnimationFrame() . This method is special because it gets called 60 times/second and will automatically stop if the user switches tabs. It's also only focusing on the Canvas so it's pretty efficient. This is what it looks like: requestAnimationFrame() 1 2 3 4 5 6 7 8 9 // JS for Drawing a Circle with a Recursive Function const animate = () => { // use this special Window method to refresh the Window and call `animate` again, and again, and again... requestAnimationFrame ( animate ) c . beginPath (); c . strokeStyle = \"limegreen\" ; c . arc ( 600 , 250 , 50 , 0 , 2 * Math . PI ); c . stroke (); } Notice the argument passed into the requestAnimationFrame method? It's animate , the parent function! This is recursion. A child function will call it's parent which then calls the child, which then calls the parent, which then calls the child...........you get it. Notice, too, that we didn't have to use empty-parenthesis () to invoke animate . This is because the argument requestAnimationFrame is expecting is a callback function or a function that is to be called again and again. So now we'll need to call/invoke the function: 1 2 3 4 5 6 7 8 9 10 11 // JS for Drawing a Circle with a Recursive Function const animate = () => { requestAnimationFrame ( animate ) // Draw Circle Code here.... // ..... // add a log statement to see the number and rate of calls. console . log ( \"animate function was called...\" ) } animate ()","title":"Creating the Recursive Animate Function"},{"location":"module-4/htmlAPI-canvas-pt2/#moving-the-x-coordinate","text":"Sweet! Now if we run that code in our browser with Live-Server we'll see the circle getting thicker and thicker but not moving/animating. That's a problem. How do we solve it? With some quick programming, of course! Let's change the hard-coded x-coordinate value of 600 to be a variable that we can change: 1 2 3 4 5 6 7 8 9 10 11 // create a variable to hold this value let x = 600 ; const animate = () => { requestAnimationFrame ( animate ) c . beginPath (); c . strokeStyle = \"limegreen\" ; // replace the x-coordinate with the variable `x` c . arc ( x , 250 , 50 , 0 , 2 * Math . PI ); c . stroke (); } If you run that code it doesn't change much, so let's make the x value change each time the animate function is run. We could add x = Math.random() * (window.innerWidth - 100) at the top of the animate function but that would just draw a new circle at different points along the 250 y-coordinate. Instead let's increment from the origin of x = 600 . 1 2 3 4 5 6 7 8 9 10 11 12 13 // JS for Increasing the X-Coordinate by 1 each time the Animate function is called. let x = 600 ; const animate = () => { requestAnimationFrame ( animate ) c . beginPath (); c . strokeStyle = \"limegreen\" ; c . arc ( x , 250 , 50 , 0 , 2 * Math . PI ); c . stroke (); // increment the value of x by 1 each time the function is called x += 1 }","title":"Moving the X-Coordinate"},{"location":"module-4/htmlAPI-canvas-pt2/#clear-the-first-drawing","text":"Now our circle is re-created on top of it's self, 1 pixel to the right . But that's not animation. We want the circle to appear to move. To do that we'll need need to \"erase\" the previous circle before we draw the next one. We can use a method on the getContext('2d') object-thing called .clearRect() . To use it we can access the getContext('2d') by calling c (Since we saved the getContext in a variable called c at the top of our file) then use dot-notation to get c.clearRect() . The .clearRect() method takes 4 arguments: ([start-X], [start-Y], [end-X], [end-Y]) where we'd want to say, \"Hey, .clearRect() , I want you to clear every thing from the last drawing between the top-left of the screen, (0,0 down to the farthest bottom-right of the screen: ,innerWidth, innerHeight) .\" That in code would look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 // JS for Clearing the Canvas from Top-Left to Bottom-Right // more code.... requestAnimationFrame ( animate ) // add the clear rectangle before we draw a new one c . clearRect ( 0 , 0 , innerWidth , innerHeight ) c . beginPath (); c . strokeStyle = \"limegreen\" ; c . arc ( x , 250 , 50 , 0 , 2 * Math . PI ); c . stroke (); x += 1 // more code here too...","title":"Clear the First Drawing"},{"location":"module-4/htmlAPI-canvas-pt2/#changing-the-speed-and-direction","text":"Now we can change the speed of the movement of the circle, or velocity! To do this we'll go ahead and create a new variable because, yes , we could just change x += 1 to x += 4 but we'll want to randomize the velocity at a later point so we might as well throw it into another variable now: 1 2 3 4 5 6 7 8 9 10 // JS for Creating a Velocity Variable let x = 600 ; // hold the velocity in a new variable let xVelocity = 4 ; const animate = () => { // more code here... // now `x` will increment by whatever `xVelocity` is x += xVelocity If you haven't already, go ahead and run that code to see the circle speed up. Our next problem is that the circle is running off the side of the screen. To fix that all we have to do is us a Conditional Statement to say: \"If the x-value becomes higher than the entire window's inner width then reverse the change of new x-coordinate to decrement instead.\" : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // JS for Changing the X-Coordinate if it's Higher than the Width of the Window let x = 600 ; let xVelocity = 4 ; const animate = () => { requestAnimationFrame ( animate ) c . clearRect ( 0 , 0 , innerWidth , innerHeight ) c . beginPath (); c . strokeStyle = \"limegreen\" ; c . arc ( x , 250 , 50 , 0 , 2 * Math . PI ); c . stroke (); // Conditional, if x is greater than innerWidth if ( x > innerWidth ) { // reverse the value to a negative number xVelocity = - xVelocity } // x will still plus-equal xVelocity x += xVelocity } If you run that new code you'll see that the circle now bumps off the right side when the CENTER of the circle gets to the edge and it still goes off the screen on the left. Let's tell the animate function to \"Reverse the direction when the EDGE of the circle meets the edge of the screen by using the radius of the circle AND to go the opposite direction when it meets the left-side of the screen. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // JS for \"Bouncing\" at Edge of Circle & Reversing To Positive At Left-Side of Screen let x = 600 ; let xVelocity = 4 ; // Move our circle's radius to a variable we can use in other places let radius = 50 ; const animate = () => { requestAnimationFrame ( animate ) c . clearRect ( 0 , 0 , innerWidth , innerHeight ) c . beginPath (); c . strokeStyle = \"limegreen\" ; // replace the radius value with the variable `radius` c . arc ( x , 250 , radius , 0 , 2 * Math . PI ); c . stroke (); // Add the \"Or condition\", `||`, that if the circle's left-side meets the left-side of the screen then add a negative to the already negative velocity to make a positive again. if ( x + radius > innerWidth || x - radius < 0 ) { xVelocity = - xVelocity } x += xVelocity }","title":"Changing the Speed and Direction"},{"location":"module-4/htmlAPI-canvas-pt2/#practice-it","text":"At this point you know how to move the x-coordinate now it's time for you to show what you know. Repeat these steps for the y-coordinate so you can have a circle that \"bounces\" of the top, bottom, and sides of the screen. You'll need to: Create a variables to hold the y coordinate, yVelocity . Replace the uses of those values wherever they're used. Change the y with the yVelocity . Create another conditional statement to change those values.","title":"Practice It"},{"location":"module-4/htmlAPI-canvas-pt2/#additional-resources","text":"YT, Chris Courses - Animating the Canvas, Ep. 3","title":"Additional Resources"},{"location":"module-4/htmlAPI-canvas-pt2/#know-your-docs","text":"MDN Docs - requestAnimationFrame() MDN Docs - .clearRect","title":"Know Your Docs"},{"location":"module-4/introToBootstrap/","text":"Intro to Bootstrap \u201cIf you have made mistakes, there is always another chance for you.You may have a fresh start any moment you choose,for this thing we call \u2018failure\u2019 is not the falling down, but the staying down.\u201c \u2013Mary Pickford Overview As you grow into understanding and accepting that you are a web developer you'll find there are many short-cuts to creating web sites. Many of these short-cuts are needed because of the lack of time in which this society we built demands us to build things within. One of the common terms you'll hear among start-ups is \"bootstrapping\". This just means that whatever the team built is built on top of other technologies already available. \"Bootstrapping\" is widely used and has it's own pros and cons we can discuss at a later time; for now, let's learn about a specific library called Bootstrap . We use Bootstrap by simple linking the CDN at the top of our web page then adding the class name we want. With this technique you can create entire websites with all of the common features you're used to surf-seeing. Just wait...you're going to like this! Follow along by creating a new repo or clone this one . Open the index.html file and let's go! Get Ready To Bootstrap The steps we take in this section will mirror the Getting Started Docs @getbootstrap.com . First, link the CDN to your web page: 1 2 3 4 5 <!-- index.html --> < head > < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity = \"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin = \"anonymous\" > <!-- <link rel=\"stylesheet\" href=\"Your-CSS-File-Path-Here\" /> --> </ head > Now we have to bring in the JavaScript and another JS library called jQuery that runs alongside the components we're going to build. Put these links at the bottom of your body element: 1 2 3 4 5 6 7 8 9 10 11 12 <!-- index.html ...continued --> < head > <!-- ...more code here...see above ^ --> </ head > < body > <!-- ...your other code will go here... --> <!-- ...and above here... --> < script src = \"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity = \"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity = \"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin = \"anonymous\" ></ script > < script src = \"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity = \"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin = \"anonymous\" ></ script > </ body > Now you're ready to begin building!!! Reboot Remember when we added a CSS reset to our bank of knowledge? The reason for that was to create a blank slate for our other styles to be added. Turns out, Bootstrap has its own form of CSS reset called Reboot. You don't have to do anything special to get it to work. Once you've linked the CSS CDN at the top of your page it works. Try it! Create an h1 . See the different font? There's plenty more but we have a lot to get to so if you're curious come back later to the Reboot page to learn more. Add a Nav Menu Go to the Navs page. Here you can see there are pre-built navigation menus you can use. All of them are 100% customizable but the benefit you have here is that you didn't have to build it all from scratch. So scroll down until you see: \"Horizontal alignment\". Notice the example and the code snippet below it? You can just click the copy button and paste it into the body of your HTML file then see what happens in live-server!! Try it!! Now replace justify-content-center with j ustify-content-end . Do you see that? We can change the entire layout with a simple change of class names!! Grid Layout Speaking of layout...since you know display flex this should be very easy for you. To layout out a page or a section all you'll need to do is create a div container element with the class name container-fluid . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 < div class = \"container-fluid\" > <!-- to create a row for items create another container element with the class name: \"row\" --> < div class = \"row\" > <!-- inside any row you have 12 columns for items to be arranged on. --> <!-- These three elements will each take up 4 columns to fill up the screen --> < div class = \"col-sm\" > first column </ div > < div class = \"col-sm\" > second column </ div > < div class = \"col-sm\" > third column </ div > </ div > </ div > Try it! Paste it underneath your nav menu and see what happens! When you do this, the row elements will have 12 columns added to them automatically. (They use display: flex to do this.) So if you put three items inside, each element will take up 4 columns. Only 2 items? Each will take up 6 columns. But you can change that by giving it the number of column they should take up with...you guessed it...a class name!! 1 2 3 < div class = \"col\" ></ div > < div class = \"col-8\" ></ div > < div class = \"col\" ></ div > In the example above the first and last div will only have 4 columns to divide themselves into because the second div is set to take up the middle 8 columns. Buttons! Buttons are incredibly useful to have on hand and Bootstrap does a wonderful job at creating many of them!! Go to the Buttons page and read up. You can change nearly anything you want by just changing class names so throw a few buttons in a new \"row\" and see what you can create!! Have fun! Play! This is the way you truly deepen your understanding. Summary Bootstrap is an incredibly useful tool to jump start your app or website. You can use this technology for your 101 final project but you don't have to feel obligated! We really just want for you to have all the options available to you, give you a solid road map, and fundamental understanding so you can navigate, discover, and become your own developer!! Have fun and keep coding! Additional Resources YT, Academind - Bootstrap 4 Concepts NOTE: the video from BlondieBytes below is of an older version of Bootstrap but the basics are still the same. YT, BlondieBytes - Learn Bootstrap in 5 mins Know Your Docs ...Obviously... the Bootstrap docs.","title":"Bootstrap"},{"location":"module-4/introToBootstrap/#intro-to-bootstrap","text":"\u201cIf you have made mistakes, there is always another chance for you.You may have a fresh start any moment you choose,for this thing we call \u2018failure\u2019 is not the falling down, but the staying down.\u201c \u2013Mary Pickford","title":"Intro to Bootstrap"},{"location":"module-4/introToBootstrap/#overview","text":"As you grow into understanding and accepting that you are a web developer you'll find there are many short-cuts to creating web sites. Many of these short-cuts are needed because of the lack of time in which this society we built demands us to build things within. One of the common terms you'll hear among start-ups is \"bootstrapping\". This just means that whatever the team built is built on top of other technologies already available. \"Bootstrapping\" is widely used and has it's own pros and cons we can discuss at a later time; for now, let's learn about a specific library called Bootstrap . We use Bootstrap by simple linking the CDN at the top of our web page then adding the class name we want. With this technique you can create entire websites with all of the common features you're used to surf-seeing. Just wait...you're going to like this! Follow along by creating a new repo or clone this one . Open the index.html file and let's go!","title":"Overview"},{"location":"module-4/introToBootstrap/#get-ready-to-bootstrap","text":"The steps we take in this section will mirror the Getting Started Docs @getbootstrap.com . First, link the CDN to your web page: 1 2 3 4 5 <!-- index.html --> < head > < link rel = \"stylesheet\" href = \"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity = \"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin = \"anonymous\" > <!-- <link rel=\"stylesheet\" href=\"Your-CSS-File-Path-Here\" /> --> </ head > Now we have to bring in the JavaScript and another JS library called jQuery that runs alongside the components we're going to build. Put these links at the bottom of your body element: 1 2 3 4 5 6 7 8 9 10 11 12 <!-- index.html ...continued --> < head > <!-- ...more code here...see above ^ --> </ head > < body > <!-- ...your other code will go here... --> <!-- ...and above here... --> < script src = \"https://code.jquery.com/jquery-3.4.1.slim.min.js\" integrity = \"sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n\" crossorigin = \"anonymous\" ></ script > < script src = \"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\" integrity = \"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin = \"anonymous\" ></ script > < script src = \"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js\" integrity = \"sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6\" crossorigin = \"anonymous\" ></ script > </ body > Now you're ready to begin building!!!","title":"Get Ready To Bootstrap"},{"location":"module-4/introToBootstrap/#reboot","text":"Remember when we added a CSS reset to our bank of knowledge? The reason for that was to create a blank slate for our other styles to be added. Turns out, Bootstrap has its own form of CSS reset called Reboot. You don't have to do anything special to get it to work. Once you've linked the CSS CDN at the top of your page it works. Try it! Create an h1 . See the different font? There's plenty more but we have a lot to get to so if you're curious come back later to the Reboot page to learn more.","title":"Reboot"},{"location":"module-4/introToBootstrap/#add-a-nav-menu","text":"Go to the Navs page. Here you can see there are pre-built navigation menus you can use. All of them are 100% customizable but the benefit you have here is that you didn't have to build it all from scratch. So scroll down until you see: \"Horizontal alignment\". Notice the example and the code snippet below it? You can just click the copy button and paste it into the body of your HTML file then see what happens in live-server!! Try it!! Now replace justify-content-center with j ustify-content-end . Do you see that? We can change the entire layout with a simple change of class names!!","title":"Add a Nav Menu"},{"location":"module-4/introToBootstrap/#grid-layout","text":"Speaking of layout...since you know display flex this should be very easy for you. To layout out a page or a section all you'll need to do is create a div container element with the class name container-fluid . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 < div class = \"container-fluid\" > <!-- to create a row for items create another container element with the class name: \"row\" --> < div class = \"row\" > <!-- inside any row you have 12 columns for items to be arranged on. --> <!-- These three elements will each take up 4 columns to fill up the screen --> < div class = \"col-sm\" > first column </ div > < div class = \"col-sm\" > second column </ div > < div class = \"col-sm\" > third column </ div > </ div > </ div > Try it! Paste it underneath your nav menu and see what happens! When you do this, the row elements will have 12 columns added to them automatically. (They use display: flex to do this.) So if you put three items inside, each element will take up 4 columns. Only 2 items? Each will take up 6 columns. But you can change that by giving it the number of column they should take up with...you guessed it...a class name!! 1 2 3 < div class = \"col\" ></ div > < div class = \"col-8\" ></ div > < div class = \"col\" ></ div > In the example above the first and last div will only have 4 columns to divide themselves into because the second div is set to take up the middle 8 columns.","title":"Grid Layout"},{"location":"module-4/introToBootstrap/#buttons","text":"Buttons are incredibly useful to have on hand and Bootstrap does a wonderful job at creating many of them!! Go to the Buttons page and read up. You can change nearly anything you want by just changing class names so throw a few buttons in a new \"row\" and see what you can create!! Have fun! Play! This is the way you truly deepen your understanding.","title":"Buttons!"},{"location":"module-4/introToBootstrap/#summary","text":"Bootstrap is an incredibly useful tool to jump start your app or website. You can use this technology for your 101 final project but you don't have to feel obligated! We really just want for you to have all the options available to you, give you a solid road map, and fundamental understanding so you can navigate, discover, and become your own developer!! Have fun and keep coding!","title":"Summary"},{"location":"module-4/introToBootstrap/#additional-resources","text":"YT, Academind - Bootstrap 4 Concepts NOTE: the video from BlondieBytes below is of an older version of Bootstrap but the basics are still the same. YT, BlondieBytes - Learn Bootstrap in 5 mins","title":"Additional Resources"},{"location":"module-4/introToBootstrap/#know-your-docs","text":"...Obviously... the Bootstrap docs.","title":"Know Your Docs"},{"location":"module-4/introToParallax/","text":"Parallax \u201cSomehow I can\u2019t believe that there are any heights that can\u2019t be scaled by a man who knows the secrets of making dreams come true. This special secret, it seems to me, can be summarized in four C s. They are curiosity, confidence, courage, and constancy, and the greatest of all is confidence. When you believe in a thing, believe in it all the way, implicitly and unquestionable.\u201d \u2014Walt Disney Overview While this section is titled \"Parallax\" we'll be using this time to learn something a little more important: Teaching yourself new tricks(aka, learning how to learn)! This lesson will be using W3Schools How To lesson on Parallax because we want for you to not only know how to create parallax effects for your websites but ALSO to teach yourself to read other people's code, learn from their techniques, and implement them in your projects. That said, as we work through this short lesson we'll be referencing the How To: Parallax at W3Schools . Go ahead and create a new CodePen or repo to follow along as we build this cool and useful effect. What is a Parallax Effect? The long answer it that it relates to the perspective of two different observers viewing a single object. It's used to calculate distance to an object in space. But the word has been adopted into web development to mean the viewing of a background from different points that makes it appear to scrolls at a different speed than the rest of the site's content. You, undoubtedly, have [seen this before] so let's get to how to actually make it happen! Additional Resources YT, pizzabagles - What is Parallax YT, Lucky Gunner Ammo - Rifle Scope Parallax YT, iEatWebsites - Hot to Create a Cool Parallax Effect Creating a \"Fixed\" Background To have an image \"slide\" behind our other content at a different scrolling speed we'll need to do two things: Create an image container. Use the background-attachment property with the value fixed. To reiterate, we will be following along with the How To: Parallax at W3Schools ! To create an image container we can use the non-semantic element div and give it a class name to select it with. Then, nn our CSS we can give this div element a background and height/width properties: the HTML 1 < div class = \"parallax\" ></ div > the CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 /* To use percentage(%) values to size the div element we'll have to: - also give the html element 100% to size to the full height of the viewport - and the same to the body element so it is 100% the height of the HTMl element */ body , html { height : 100 % ; } . parallax { height : 100 % ; background-image : url ( \"img_parallax.jpg\" ); background-position : center ; background-repeat : no-repeat ; background-size : cover ; } Now that we have an image on the screen that isn't repeating, fit the full-screen and is centered let's add the last piece to make it scroll slower! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 body , html { height : 100 % ; } . parallax { height : 100 % ; background-image : url ( \"img_parallax.jpg\" ); background-position : center ; background-repeat : no-repeat ; background-size : cover ; /* Give the value \"fixed\" to the background-attachment property to create the parallax scrolling effect */ background-attachment : fixed ; } /* Some mobile devices have a problem with background-attachment: fixed. So, you can use media queries to turn off the parallax effect for mobile devices: */ @ media only screen and ( max-device-width : 1366px ) { . parallax { background-attachment : scroll ; } } To see this better you'll need to add some other sections into your HTML that will scroll normally. Try copy/pasting from the example's source code. Open your inspector tool. Select the \"Source\" tab. Click the tryhow_css_parallax_demo.htm file Then copy/paste lines 77-110 and find the CSS you'll need to style them. GO AHEAD! TRY IT!","title":"Parallax"},{"location":"module-4/introToParallax/#parallax","text":"\u201cSomehow I can\u2019t believe that there are any heights that can\u2019t be scaled by a man who knows the secrets of making dreams come true. This special secret, it seems to me, can be summarized in four C s. They are curiosity, confidence, courage, and constancy, and the greatest of all is confidence. When you believe in a thing, believe in it all the way, implicitly and unquestionable.\u201d \u2014Walt Disney","title":"Parallax"},{"location":"module-4/introToParallax/#overview","text":"While this section is titled \"Parallax\" we'll be using this time to learn something a little more important: Teaching yourself new tricks(aka, learning how to learn)! This lesson will be using W3Schools How To lesson on Parallax because we want for you to not only know how to create parallax effects for your websites but ALSO to teach yourself to read other people's code, learn from their techniques, and implement them in your projects. That said, as we work through this short lesson we'll be referencing the How To: Parallax at W3Schools . Go ahead and create a new CodePen or repo to follow along as we build this cool and useful effect.","title":"Overview"},{"location":"module-4/introToParallax/#what-is-a-parallax-effect","text":"The long answer it that it relates to the perspective of two different observers viewing a single object. It's used to calculate distance to an object in space. But the word has been adopted into web development to mean the viewing of a background from different points that makes it appear to scrolls at a different speed than the rest of the site's content. You, undoubtedly, have [seen this before] so let's get to how to actually make it happen!","title":"What is a Parallax Effect?"},{"location":"module-4/introToParallax/#additional-resources","text":"YT, pizzabagles - What is Parallax YT, Lucky Gunner Ammo - Rifle Scope Parallax YT, iEatWebsites - Hot to Create a Cool Parallax Effect","title":"Additional Resources"},{"location":"module-4/introToParallax/#creating-a-fixed-background","text":"To have an image \"slide\" behind our other content at a different scrolling speed we'll need to do two things: Create an image container. Use the background-attachment property with the value fixed. To reiterate, we will be following along with the How To: Parallax at W3Schools ! To create an image container we can use the non-semantic element div and give it a class name to select it with. Then, nn our CSS we can give this div element a background and height/width properties: the HTML 1 < div class = \"parallax\" ></ div > the CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 /* To use percentage(%) values to size the div element we'll have to: - also give the html element 100% to size to the full height of the viewport - and the same to the body element so it is 100% the height of the HTMl element */ body , html { height : 100 % ; } . parallax { height : 100 % ; background-image : url ( \"img_parallax.jpg\" ); background-position : center ; background-repeat : no-repeat ; background-size : cover ; } Now that we have an image on the screen that isn't repeating, fit the full-screen and is centered let's add the last piece to make it scroll slower! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 body , html { height : 100 % ; } . parallax { height : 100 % ; background-image : url ( \"img_parallax.jpg\" ); background-position : center ; background-repeat : no-repeat ; background-size : cover ; /* Give the value \"fixed\" to the background-attachment property to create the parallax scrolling effect */ background-attachment : fixed ; } /* Some mobile devices have a problem with background-attachment: fixed. So, you can use media queries to turn off the parallax effect for mobile devices: */ @ media only screen and ( max-device-width : 1366px ) { . parallax { background-attachment : scroll ; } } To see this better you'll need to add some other sections into your HTML that will scroll normally. Try copy/pasting from the example's source code. Open your inspector tool. Select the \"Source\" tab. Click the tryhow_css_parallax_demo.htm file Then copy/paste lines 77-110 and find the CSS you'll need to style them. GO AHEAD! TRY IT!","title":"Creating a \"Fixed\" Background"},{"location":"module-4/introToTransformations/","text":"Intro to Transformations \u201cI have found the paradox, that if you love until it hurts, there can be no more hurt, only more love.\u201c \u2014Mother Teresa Overview CSS transformations are a lot like CSS Animations but instead of use the @keyframe function to execute on specific animation-names you can use specific functions within with declaration blocks of an element's CSS rule to change is properties from within on a specific DOM event or timing. These specific transform functions include: translate() , rotate() , scale() , and skew() . With these transformation functions you can change an element's shape, size, position and even duplicate itself!!! Parent & Nested Selectors Before you can use CSS Transformations we'll need to learn a new way to use CSS selectors: Parent & Nested . It looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 . square { background : Khaki ; border-radius : 5 px ; height : 150 px ; margin : 100 px ; transition : transform 1 s ; width : 150 px ; &:hover { transform : skew ( -20deg ); } } In the code snippet above you see that we select the class name \"square\", the Parent Selector then inside it has an additional rule at the bottom: &:hover which is the Nested Selector . It's like saying, \"This element will have all of these rules but also has these...when this event happens.\" In the &: declaration block we can apply our transformations functions!! So let's get to them! To transform an element, simply give it the transform property, and assign one of the following functions as its value: translate() - takes 1 or 2 arguments of any length or percentage value like px , pt , % , or em . If given 1 argument it will only apply that to the x-axis. To use the y-axis you must give it 2 arguments. Long-hand alternatives: translateX() translateY() rotate() / rotateZ() - Both functions take 1 argument of positive or negative deg (degrees). skew() - Takes either 1 or 2 arguments of deg (degrees). If given 1 it will apply the value of degrees to both the x-axis and the y-axis. Can take positive & negative degrees. Long-hand alternatives: skewX() skewY() scale() - Takes 1 or 2 number arguments to apply the size the element will grow or shrink along the x-axis and y-axis. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 /* make a, h1 element duplicate and slide down and to the right on a hover event */ h1 : hover { /* x-axis y-axis */ transform : translate ( 20 px , 20 px ); } /* flip an image upside-down on a hover event */ img : hover { transform : rotate ( 180 deg ); } /* make a header change shape by skewing it's left and right side downward and upward on a hover event */ header : hover { transform : skewY ( -20deg ); } /* make a button grow twice its size on a hover event */ button : hover { transform : scale ( 2 ); } Z-Index + 3D Transformations Even though the web screen looks two-dimensional we can create the illusion that it's three-dimensional with the z-index property. With this property we can push images or other element backward: z-index: -1; , z-index: -2; , etc. All elements by default set to z-index: 0 so any element you want to bring forward you just add a 1 and any you want to push back you subtract a -1 . Below you you'll find all of the 3D functions you'll need to turn your 2D world 3D!! translateZ() rotateX() rotateY() rotate3d() scale3d() Additional Resources Resource, HTMLDOG - Transformations MUST READ, ThoughtBot - Transitions and Transforms Side Note: Webflow may be a neat tool for you to learn later on, if you're interested in front-end work or web design! Article, CSS Tricks - Text Rotate YT, Webflow - 2D & 3D Transforms Practice It Fork this CodePen create three new squares with different class names and colors. use the other three 2D Transformation functions to make each new square rotate, or grow, or translate on a hover event. Change the color of the underlines in this CodePen . Know Your Docs MDN Docs - translate() MDN Docs - translateX() MDN Docs - translateY() MDN Docs - rotate() MDN Docs - skew() MDN Docs - skewX() MDN Docs - skewY() MDN Docs - scale()","title":"Intro to Transformations"},{"location":"module-4/introToTransformations/#intro-to-transformations","text":"\u201cI have found the paradox, that if you love until it hurts, there can be no more hurt, only more love.\u201c \u2014Mother Teresa","title":"Intro to Transformations"},{"location":"module-4/introToTransformations/#overview","text":"CSS transformations are a lot like CSS Animations but instead of use the @keyframe function to execute on specific animation-names you can use specific functions within with declaration blocks of an element's CSS rule to change is properties from within on a specific DOM event or timing. These specific transform functions include: translate() , rotate() , scale() , and skew() . With these transformation functions you can change an element's shape, size, position and even duplicate itself!!!","title":"Overview"},{"location":"module-4/introToTransformations/#parent-nested-selectors","text":"Before you can use CSS Transformations we'll need to learn a new way to use CSS selectors: Parent & Nested . It looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 . square { background : Khaki ; border-radius : 5 px ; height : 150 px ; margin : 100 px ; transition : transform 1 s ; width : 150 px ; &:hover { transform : skew ( -20deg ); } } In the code snippet above you see that we select the class name \"square\", the Parent Selector then inside it has an additional rule at the bottom: &:hover which is the Nested Selector . It's like saying, \"This element will have all of these rules but also has these...when this event happens.\" In the &: declaration block we can apply our transformations functions!! So let's get to them!","title":"Parent &amp; Nested Selectors"},{"location":"module-4/introToTransformations/#to-transform-an-element-simply-give-it-the-transform-property-and-assign-one-of-the-following-functions-as-its-value","text":"translate() - takes 1 or 2 arguments of any length or percentage value like px , pt , % , or em . If given 1 argument it will only apply that to the x-axis. To use the y-axis you must give it 2 arguments. Long-hand alternatives: translateX() translateY() rotate() / rotateZ() - Both functions take 1 argument of positive or negative deg (degrees). skew() - Takes either 1 or 2 arguments of deg (degrees). If given 1 it will apply the value of degrees to both the x-axis and the y-axis. Can take positive & negative degrees. Long-hand alternatives: skewX() skewY() scale() - Takes 1 or 2 number arguments to apply the size the element will grow or shrink along the x-axis and y-axis. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 /* make a, h1 element duplicate and slide down and to the right on a hover event */ h1 : hover { /* x-axis y-axis */ transform : translate ( 20 px , 20 px ); } /* flip an image upside-down on a hover event */ img : hover { transform : rotate ( 180 deg ); } /* make a header change shape by skewing it's left and right side downward and upward on a hover event */ header : hover { transform : skewY ( -20deg ); } /* make a button grow twice its size on a hover event */ button : hover { transform : scale ( 2 ); }","title":"To transform an element, simply give it the transform property, and assign one of the following functions as its value:"},{"location":"module-4/introToTransformations/#z-index-3d-transformations","text":"Even though the web screen looks two-dimensional we can create the illusion that it's three-dimensional with the z-index property. With this property we can push images or other element backward: z-index: -1; , z-index: -2; , etc. All elements by default set to z-index: 0 so any element you want to bring forward you just add a 1 and any you want to push back you subtract a -1 . Below you you'll find all of the 3D functions you'll need to turn your 2D world 3D!! translateZ() rotateX() rotateY() rotate3d() scale3d()","title":"Z-Index + 3D Transformations"},{"location":"module-4/introToTransformations/#additional-resources","text":"Resource, HTMLDOG - Transformations MUST READ, ThoughtBot - Transitions and Transforms Side Note: Webflow may be a neat tool for you to learn later on, if you're interested in front-end work or web design! Article, CSS Tricks - Text Rotate YT, Webflow - 2D & 3D Transforms","title":"Additional Resources"},{"location":"module-4/introToTransformations/#practice-it","text":"Fork this CodePen create three new squares with different class names and colors. use the other three 2D Transformation functions to make each new square rotate, or grow, or translate on a hover event. Change the color of the underlines in this CodePen .","title":"Practice It"},{"location":"module-4/introToTransformations/#know-your-docs","text":"MDN Docs - translate() MDN Docs - translateX() MDN Docs - translateY() MDN Docs - rotate() MDN Docs - skew() MDN Docs - skewX() MDN Docs - skewY() MDN Docs - scale()","title":"Know Your Docs"},{"location":"module-4/introToTransitions/","text":"Intro to Transitions \u201cWhen life knocks you down, try to land on your back. Because if you can look up, you can get up.\u201d \u2013Les Brown Overview Animations & Transformations are nice, but to really control the movements of our elements we'll need to dive a bit deeper into what makes them work, what functions the properties are expecting, and what values those functions accept. Let's do it! Transitions with CSS CSS transitions specify how Animations, Transforms, and pseudo selections will happen. So instead of say what will happen in the change, the transition property details how something will change like how long the change will take place or the rate at which the change will take place. NOTE: This does not replace Animation or Transform but instead is used together to enhance the change. To use a transition in your animations or transformation you give the first CSS declaration block the property transition : 1 2 3 4 5 6 7 8 9 10 11 /* This code tells img elements to be 300px wide and when they change width to follow the rules to do it in 2 seconds, start fast and end slowly(ease-out), and delay by 250ms */ img { width : 300 px ; transition : width 2 s ease-out 250 ms ; } /* Then on a hover event to change the width to 400px */ img : hover { width : 400 px ; } The transition property takes the following values in this order: \"property\", \"duration\", \"timing-function\", \"delay\" where: property - details the properties that will change during the animations or transform like width, height, or color, etc. You can also use all to select all the properties on the element. duration - given in values of s /seconds or ms /milliseconds, i.e 3s / 3 seconds or 30ms / 30 milliseconds. timing-function is a special value that determine the rate to change within the duration of the change and it takes one of these values: ease linear ease-in ease-out ease-in-out step-start step-end NOTE: Click the timing function link to find out about each of these values. delay - obviously refers to the time between the event happening on the DOM like an on-hover to the beginning of the movement. It too takes values of s or ms . 1 2 /* transition: [property] [duration] [timing-function] [delay]; */ transition : all 0 . 5s ease-in-out 1s ; Transitions Continued Think of the pseudo selectors we've been using like :hover. We know the elements change when we hover over them but this currently happens quickly and harshly. What if we wanted the transition to be smoother? That's where the CSS property transition-... comes in. NOTE: Transitions work with psuedo-selectors, animation keyframes, & transformations When you use a the transition property you're simply telling the element, \"Get ready, I'm giving you instructions on how you'll be changing and how long it will take for you to get there. Ready?\" Now, when the element is hovered on it will change according to how long you told it to do so. Let's create another red square and give it the transition property. the HTML 1 < div class = \"transition-example\" ></ div > the CSS 1 2 3 4 5 6 . transition-example { width : 100 px ; height : 100 px ; background : red ; transition : width 2 s ease-out 500 ms ; } Now let's tell it what will look like when someone hovers over it: 1 2 3 . transition-example : hover { width : 300 px ; } Behind the Transition Property transition is actually short-hand for four properties: transition-property , transition-duration , transition-timing-function , and transition-delay . If you remember, it works a lot like grid-area that's short-hand for: grid-row-start , grid-column-start , grid-row-end , and grid-column-end properties. You don't have to use the short-hand transition. In fact, you should use the long-hand for code readability. Here's an example of what you just saw above, only now in long-hand form: 1 2 3 4 5 6 7 8 9 10 11 . transition-example { width : 100 px ; height : 100 px ; background : red ; /* transition: width 2s ease-out 500ms;*/ /* the following will do the same thing as the line above would do */ transition-property : width ; transition-duration : 2 s ; transition-timing-function : ease-out ; transition-delay : 500 ms ; } Make sure you study each property in the docs, so you know what you're actually doing when you use transition . Note 1: If the duration is not specified, the transition will happen instantaneously, because the default value is 0 . Vender Prefixes In the above code example, we see a use of transition that will work in most browsers, but it won't work in Safari, Firefox, Opera if you don't use the vendor prefixes . To meet the requirements for these browser, you'll also have to include the following rule before the traditional rule: 1 2 3 4 -webkit-transition : width 2s ease-in-out 500ms ; /* Safari Browser*/ -moz-transition : width 2s ease-in-out 500ms ; /* Firefox */ -o-transition : width 2s ease-in-out 500ms ; /* Opera */ transition : width 2s ease-in-out 500ms Additional Resources Article, Zinoui - CSS Transitions YT, The Net Ninja - Transitions Practice It Fork the CodePen Change the color of the main text to a color of your choice. Change the text to your name Change the duration of the transitions from 1s to 5s . Change the easing function of the transition. Use the values you learned above. Comment out the Vendor Prefixes on lines 13-16 & 38-41. Change the rotate() and scale() functions out for other transformation functions. Can you make it 3D? Know Your Docs MDN Docs - CSS Transitions","title":"Intro to Transitions"},{"location":"module-4/introToTransitions/#intro-to-transitions","text":"\u201cWhen life knocks you down, try to land on your back. Because if you can look up, you can get up.\u201d \u2013Les Brown","title":"Intro to Transitions"},{"location":"module-4/introToTransitions/#overview","text":"Animations & Transformations are nice, but to really control the movements of our elements we'll need to dive a bit deeper into what makes them work, what functions the properties are expecting, and what values those functions accept. Let's do it!","title":"Overview"},{"location":"module-4/introToTransitions/#transitions-with-css","text":"CSS transitions specify how Animations, Transforms, and pseudo selections will happen. So instead of say what will happen in the change, the transition property details how something will change like how long the change will take place or the rate at which the change will take place. NOTE: This does not replace Animation or Transform but instead is used together to enhance the change. To use a transition in your animations or transformation you give the first CSS declaration block the property transition : 1 2 3 4 5 6 7 8 9 10 11 /* This code tells img elements to be 300px wide and when they change width to follow the rules to do it in 2 seconds, start fast and end slowly(ease-out), and delay by 250ms */ img { width : 300 px ; transition : width 2 s ease-out 250 ms ; } /* Then on a hover event to change the width to 400px */ img : hover { width : 400 px ; } The transition property takes the following values in this order: \"property\", \"duration\", \"timing-function\", \"delay\" where: property - details the properties that will change during the animations or transform like width, height, or color, etc. You can also use all to select all the properties on the element. duration - given in values of s /seconds or ms /milliseconds, i.e 3s / 3 seconds or 30ms / 30 milliseconds. timing-function is a special value that determine the rate to change within the duration of the change and it takes one of these values: ease linear ease-in ease-out ease-in-out step-start step-end NOTE: Click the timing function link to find out about each of these values. delay - obviously refers to the time between the event happening on the DOM like an on-hover to the beginning of the movement. It too takes values of s or ms . 1 2 /* transition: [property] [duration] [timing-function] [delay]; */ transition : all 0 . 5s ease-in-out 1s ;","title":"Transitions with CSS"},{"location":"module-4/introToTransitions/#transitions-continued","text":"Think of the pseudo selectors we've been using like :hover. We know the elements change when we hover over them but this currently happens quickly and harshly. What if we wanted the transition to be smoother? That's where the CSS property transition-... comes in. NOTE: Transitions work with psuedo-selectors, animation keyframes, & transformations When you use a the transition property you're simply telling the element, \"Get ready, I'm giving you instructions on how you'll be changing and how long it will take for you to get there. Ready?\" Now, when the element is hovered on it will change according to how long you told it to do so. Let's create another red square and give it the transition property. the HTML 1 < div class = \"transition-example\" ></ div > the CSS 1 2 3 4 5 6 . transition-example { width : 100 px ; height : 100 px ; background : red ; transition : width 2 s ease-out 500 ms ; } Now let's tell it what will look like when someone hovers over it: 1 2 3 . transition-example : hover { width : 300 px ; }","title":"Transitions Continued"},{"location":"module-4/introToTransitions/#behind-the-transition-property","text":"transition is actually short-hand for four properties: transition-property , transition-duration , transition-timing-function , and transition-delay . If you remember, it works a lot like grid-area that's short-hand for: grid-row-start , grid-column-start , grid-row-end , and grid-column-end properties. You don't have to use the short-hand transition. In fact, you should use the long-hand for code readability. Here's an example of what you just saw above, only now in long-hand form: 1 2 3 4 5 6 7 8 9 10 11 . transition-example { width : 100 px ; height : 100 px ; background : red ; /* transition: width 2s ease-out 500ms;*/ /* the following will do the same thing as the line above would do */ transition-property : width ; transition-duration : 2 s ; transition-timing-function : ease-out ; transition-delay : 500 ms ; } Make sure you study each property in the docs, so you know what you're actually doing when you use transition . Note 1: If the duration is not specified, the transition will happen instantaneously, because the default value is 0 .","title":"Behind the Transition Property"},{"location":"module-4/introToTransitions/#vender-prefixes","text":"In the above code example, we see a use of transition that will work in most browsers, but it won't work in Safari, Firefox, Opera if you don't use the vendor prefixes . To meet the requirements for these browser, you'll also have to include the following rule before the traditional rule: 1 2 3 4 -webkit-transition : width 2s ease-in-out 500ms ; /* Safari Browser*/ -moz-transition : width 2s ease-in-out 500ms ; /* Firefox */ -o-transition : width 2s ease-in-out 500ms ; /* Opera */ transition : width 2s ease-in-out 500ms","title":"Vender Prefixes"},{"location":"module-4/introToTransitions/#additional-resources","text":"Article, Zinoui - CSS Transitions YT, The Net Ninja - Transitions","title":"Additional Resources"},{"location":"module-4/introToTransitions/#practice-it","text":"Fork the CodePen Change the color of the main text to a color of your choice. Change the text to your name Change the duration of the transitions from 1s to 5s . Change the easing function of the transition. Use the values you learned above. Comment out the Vendor Prefixes on lines 13-16 & 38-41. Change the rotate() and scale() functions out for other transformation functions. Can you make it 3D?","title":"Practice It"},{"location":"module-4/introToTransitions/#know-your-docs","text":"MDN Docs - CSS Transitions","title":"Know Your Docs"},{"location":"module-4/mergeConflicts/","text":"Merge Conflicts in Git \u201cGo confidently in the direction of your dreams. Live the life you have imagined.\u201c \u2013Henry Thoreau Overview As we get prepared to work with another developer there's another hiccup you're going to need to be made aware of which is Merge Conflicts. To explain them, how to avoid them, and how to fix them let's start with the flow of getting a repo, editing it, and pushing it back up. Non-Merge Conflict Scenario You and your classmate have decided on what you'd like to build and are confident and excited to begin. One of you creates a repo called: \"New-Portfolio\" and invites the other partner to be a collaborator in the \"Settings\" tab. After cloning, your partener creates a README.md , a style.css , a main.js file, and an index.html with the basic HTML5 boilerplate code in it: body , head , meta , linking your JS and CSS files to it, etc... then they push up the new files, still on the main branch. You then git clone the repo to your computer so you both have the exact same files. Now you begin work, but wait , because you're both smart you decide to create two separate branches off of main named maggie-feature-1 & brian-feature-2 . Now you begin to work. Maggie, you're working on the Contact Page and Brian is working on the landing page, index.html . Maggie, you create three new files: contact-scripts.js , contact-styles.css , and contact-page.html . And Brian continues to build on the Landing Page with the other files already created. After both of you have finished your work you each git status , add , commit , push which pushes each of your respective code changes to the repo. But now you need to merge those two different branches into the main branch. Great, you each create a Pull Request and ask the other to review your code. Once you've approved of Brian's code you merge it into main and he does the same for yours. All is good and now you can both switch your terminals to point to the main branch with git checkout main command and then bring down all the changes with git pull . This will bring down all the new code you both merged into main . Now you can keep working on the next feature!!! git checkout -b maggie-feature-3 & git checkout -b brian-feature-4 . Merge Conflict - Scenario One You've both found a rhythm and now you're both knocking out one feature after another, creating new branches off of main , working ONLY in the files you were assigned to, git status , add , commit , pushing, creating Pull Requests: Do code reviews of each other's code, merge them, git checkout master , and git pull ing the new code down. But one time, Brian remembers that he needs to change the anchor tag for the Portfolio Page on the Landing page at the same time Maggie, you add a new anchor tag to the Landing Page for users to get to the Resume Page and switch the order of the links. Both of you do the regular steps git status , add , commit , push , create a PR, and ask for the other to review the code but UH OOH , when you go to created your PR it said there are conflicts that must be resolved. And after you've reviewed the code it says there are merge conflicts that must be resolved before it can be merged. What happened? Both of you changed code on the Portfolio Page(the index.html file) and GitHub won't allow automatic merging if the original copies don't match. See, when you're merging new code the git software holds on to the original and compares it to see changes so that it changes only what needs to be changes rather than the whole file. When it does this it will notice that the original on main doesn't match the original on Maggie's maggie-feature-15 which also doesn't match the original on Brian's brian-feature-13 and therefore, will require a manual change. Scenario One Fix For merge conflicts caught when trying to merge a PR, you can use GitHubs online text editor. You can access the online text editor by clicking on the \"Resolve Conflicts\" button as you'll see in the video below. Merge Conflict - Scenario Two But let's say you've successfully merged newly changed code so now your master branch in the repo has the new code but your local version of master is behind and instead of pulling those changes you forget and start adding new coding again directly on master. Next thing you know, you see the message from Brian reminding you that you need to pull the new changes. So you do and all of a sudden you see an error message on your terminal: To solve this conflict run git push then use VS Code to go to the file with the conflict (see error message). From there you'll see Current Changes and Incoming Changes. Current changes are the ones on the local version of your branch while incoming changes are on the remote version of the branch. You get to decide which one you want or manually snip out and leave what you want from both. Scenario Two Fix Additional Resources YT, The Coding Train - Resolving Merge Conflicts YT, CodeSpace - How to Resolve Merge Conflicts VS Code YT, Fireship - VS Code Top-Ten Pro Tips Know Your Docs GitHub Docs - Resolving Merge Conflicts","title":"Git Merge Conflicts"},{"location":"module-4/mergeConflicts/#merge-conflicts-in-git","text":"\u201cGo confidently in the direction of your dreams. Live the life you have imagined.\u201c \u2013Henry Thoreau","title":"Merge Conflicts in Git"},{"location":"module-4/mergeConflicts/#overview","text":"As we get prepared to work with another developer there's another hiccup you're going to need to be made aware of which is Merge Conflicts. To explain them, how to avoid them, and how to fix them let's start with the flow of getting a repo, editing it, and pushing it back up.","title":"Overview"},{"location":"module-4/mergeConflicts/#non-merge-conflict-scenario","text":"You and your classmate have decided on what you'd like to build and are confident and excited to begin. One of you creates a repo called: \"New-Portfolio\" and invites the other partner to be a collaborator in the \"Settings\" tab. After cloning, your partener creates a README.md , a style.css , a main.js file, and an index.html with the basic HTML5 boilerplate code in it: body , head , meta , linking your JS and CSS files to it, etc... then they push up the new files, still on the main branch. You then git clone the repo to your computer so you both have the exact same files. Now you begin work, but wait , because you're both smart you decide to create two separate branches off of main named maggie-feature-1 & brian-feature-2 . Now you begin to work. Maggie, you're working on the Contact Page and Brian is working on the landing page, index.html . Maggie, you create three new files: contact-scripts.js , contact-styles.css , and contact-page.html . And Brian continues to build on the Landing Page with the other files already created. After both of you have finished your work you each git status , add , commit , push which pushes each of your respective code changes to the repo. But now you need to merge those two different branches into the main branch. Great, you each create a Pull Request and ask the other to review your code. Once you've approved of Brian's code you merge it into main and he does the same for yours. All is good and now you can both switch your terminals to point to the main branch with git checkout main command and then bring down all the changes with git pull . This will bring down all the new code you both merged into main . Now you can keep working on the next feature!!! git checkout -b maggie-feature-3 & git checkout -b brian-feature-4 .","title":"Non-Merge Conflict Scenario"},{"location":"module-4/mergeConflicts/#merge-conflict-scenario-one","text":"You've both found a rhythm and now you're both knocking out one feature after another, creating new branches off of main , working ONLY in the files you were assigned to, git status , add , commit , pushing, creating Pull Requests: Do code reviews of each other's code, merge them, git checkout master , and git pull ing the new code down. But one time, Brian remembers that he needs to change the anchor tag for the Portfolio Page on the Landing page at the same time Maggie, you add a new anchor tag to the Landing Page for users to get to the Resume Page and switch the order of the links. Both of you do the regular steps git status , add , commit , push , create a PR, and ask for the other to review the code but UH OOH , when you go to created your PR it said there are conflicts that must be resolved. And after you've reviewed the code it says there are merge conflicts that must be resolved before it can be merged. What happened? Both of you changed code on the Portfolio Page(the index.html file) and GitHub won't allow automatic merging if the original copies don't match. See, when you're merging new code the git software holds on to the original and compares it to see changes so that it changes only what needs to be changes rather than the whole file. When it does this it will notice that the original on main doesn't match the original on Maggie's maggie-feature-15 which also doesn't match the original on Brian's brian-feature-13 and therefore, will require a manual change.","title":"Merge Conflict - Scenario One"},{"location":"module-4/mergeConflicts/#scenario-one-fix","text":"For merge conflicts caught when trying to merge a PR, you can use GitHubs online text editor. You can access the online text editor by clicking on the \"Resolve Conflicts\" button as you'll see in the video below.","title":"Scenario One Fix"},{"location":"module-4/mergeConflicts/#merge-conflict-scenario-two","text":"But let's say you've successfully merged newly changed code so now your master branch in the repo has the new code but your local version of master is behind and instead of pulling those changes you forget and start adding new coding again directly on master. Next thing you know, you see the message from Brian reminding you that you need to pull the new changes. So you do and all of a sudden you see an error message on your terminal: To solve this conflict run git push then use VS Code to go to the file with the conflict (see error message). From there you'll see Current Changes and Incoming Changes. Current changes are the ones on the local version of your branch while incoming changes are on the remote version of the branch. You get to decide which one you want or manually snip out and leave what you want from both.","title":"Merge Conflict - Scenario Two"},{"location":"module-4/mergeConflicts/#scenario-two-fix","text":"","title":"Scenario Two Fix"},{"location":"module-4/mergeConflicts/#additional-resources","text":"YT, The Coding Train - Resolving Merge Conflicts YT, CodeSpace - How to Resolve Merge Conflicts VS Code YT, Fireship - VS Code Top-Ten Pro Tips","title":"Additional Resources"},{"location":"module-4/mergeConflicts/#know-your-docs","text":"GitHub Docs - Resolving Merge Conflicts","title":"Know Your Docs"},{"location":"module-4/modalsWithBootstrap/","text":"Bootstrap Modals \u201cWorry does not empty tomorrow of its sorrow, it empties today of its strength. \u2014Corrie Boom Overview Continuing on with learning useful features of Bootstrap let's play with Modals! To start, we'll need to know what a modal is. Wikipedia describes a Modal Window as: \".... a graphical control element subordinate to an application's main window. It creates a mode that disables the main window but keeps it visible, with the modal window as a child window in front of it. Users must interact with the modal window before they can return to the parent application.\" In short, it's a window that pops up over another window. You've definitely seen a modal pop up when you're trying to read a Medium article or a reputable newspaper article usually asking you to subscribe. These are annoying for sure and this is why we'll plan to use them sparingly and think about what they are actually accomplishing in our user's story. lookin' at you NYT! For our coding purposes a modal is simply an element in the file whose display : property is set to hidden ; but when an event happens such as a page load or a button is clicked the value is set to block; so it appears. It's then reverted back to hidden ; after the \"x\" is clicked, -or the user clicks outside the modal. Use the following repos to teach yourself how modals work. Two Basic Modals from Scratch For the rest of this class you'll be given code to read and learn from. To do this you'll need to clone the repos give to you and work your way through how they work. You must approach these with curiosity to learn from them. Go ahead now, fork & clone this 101-Modal-Practice repo . Then open it up with Live-Server and count to 4. What happens? How? Go find the code that makes this pop-up happen. What lines of code create the dismiss functionality? Can you track down the event that happen to open each of the two modals? Can you track down how each are changed and dismissed again? NOTE: Although much of this code has been edited to implement the Timed Modal, a majority of the code was taken from this How To: Modal on W3Schools . Modals with Bootstrap As you learned in the last section, Bootstrap is an incredibly powerful tool to help you quickly build websites and app. It also comes with a Modal component that is 100% customizable and ready to go \" out-of-the-box \"! Again, a modal is simply an HTML element that's built and sitting in the HTML file but its display: property is set to hidden; until a particular event triggers the property to be set to block; . Bootstrap modals are no different but they do have a few additional features that are useful but take a little more attention to use. Fork & clone this 101-BS-Modal repo and follow along. In the index.html file you'll see that Bootstrap's CSS and JS CDNs have already been linked and there is code there to create a modal. Open this up with Live-Server to see what's going on. Now read the comments to see how the open button knows which modal to open. Copy/paste the code at the bottom of the file into the body and see what happens. Notice the data-target value of the button and the id value of the modal. These are how you'll create multiple modals on the same page. BUT there's another way!! Scroll to the top of the Bootstrap modal docs and read the \"gotchas\" before preceding. Go to the Varying Modal Content section of the Bootstrap Modal docs and implement three different modals with different content but use the same modal. Make sure you create your own silly content. After that implement the Tooltip Popovers Now structure your content with the Grid . And lastly, change the size of the modals . If you completed all of these steps you are well on your way to proving you can work in the tech world!!! Let's keep going so you can can build some killer websites! Know Your Docs W3S How To - Modal Bootstrap.Components.Modal","title":"Bootstrap Modals"},{"location":"module-4/modalsWithBootstrap/#bootstrap-modals","text":"\u201cWorry does not empty tomorrow of its sorrow, it empties today of its strength. \u2014Corrie Boom","title":"Bootstrap Modals"},{"location":"module-4/modalsWithBootstrap/#overview","text":"Continuing on with learning useful features of Bootstrap let's play with Modals! To start, we'll need to know what a modal is. Wikipedia describes a Modal Window as: \".... a graphical control element subordinate to an application's main window. It creates a mode that disables the main window but keeps it visible, with the modal window as a child window in front of it. Users must interact with the modal window before they can return to the parent application.\" In short, it's a window that pops up over another window. You've definitely seen a modal pop up when you're trying to read a Medium article or a reputable newspaper article usually asking you to subscribe. These are annoying for sure and this is why we'll plan to use them sparingly and think about what they are actually accomplishing in our user's story. lookin' at you NYT! For our coding purposes a modal is simply an element in the file whose display : property is set to hidden ; but when an event happens such as a page load or a button is clicked the value is set to block; so it appears. It's then reverted back to hidden ; after the \"x\" is clicked, -or the user clicks outside the modal. Use the following repos to teach yourself how modals work.","title":"Overview"},{"location":"module-4/modalsWithBootstrap/#two-basic-modals-from-scratch","text":"For the rest of this class you'll be given code to read and learn from. To do this you'll need to clone the repos give to you and work your way through how they work. You must approach these with curiosity to learn from them. Go ahead now, fork & clone this 101-Modal-Practice repo . Then open it up with Live-Server and count to 4. What happens? How? Go find the code that makes this pop-up happen. What lines of code create the dismiss functionality? Can you track down the event that happen to open each of the two modals? Can you track down how each are changed and dismissed again? NOTE: Although much of this code has been edited to implement the Timed Modal, a majority of the code was taken from this How To: Modal on W3Schools .","title":"Two Basic Modals from Scratch"},{"location":"module-4/modalsWithBootstrap/#modals-with-bootstrap","text":"As you learned in the last section, Bootstrap is an incredibly powerful tool to help you quickly build websites and app. It also comes with a Modal component that is 100% customizable and ready to go \" out-of-the-box \"! Again, a modal is simply an HTML element that's built and sitting in the HTML file but its display: property is set to hidden; until a particular event triggers the property to be set to block; . Bootstrap modals are no different but they do have a few additional features that are useful but take a little more attention to use. Fork & clone this 101-BS-Modal repo and follow along. In the index.html file you'll see that Bootstrap's CSS and JS CDNs have already been linked and there is code there to create a modal. Open this up with Live-Server to see what's going on. Now read the comments to see how the open button knows which modal to open. Copy/paste the code at the bottom of the file into the body and see what happens. Notice the data-target value of the button and the id value of the modal. These are how you'll create multiple modals on the same page. BUT there's another way!! Scroll to the top of the Bootstrap modal docs and read the \"gotchas\" before preceding. Go to the Varying Modal Content section of the Bootstrap Modal docs and implement three different modals with different content but use the same modal. Make sure you create your own silly content. After that implement the Tooltip Popovers Now structure your content with the Grid . And lastly, change the size of the modals . If you completed all of these steps you are well on your way to proving you can work in the tech world!!! Let's keep going so you can can build some killer websites!","title":"Modals with Bootstrap"},{"location":"module-4/modalsWithBootstrap/#know-your-docs","text":"W3S How To - Modal Bootstrap.Components.Modal","title":"Know Your Docs"},{"location":"module-4/talkingCode/","text":"Talking Code Develop an attitude of gratitude, and give thanks for everything that happens to you, knowing that every step forward is a step toward achieving something bigger and better than your current situation. \u2014Brian Tracy Overview Skills of communicating ideas and information are incredibly important. Why? Because, while coding can get very heady, its impacts on other people are wide and deep. Think of the ways Google has impacted your life! You can now ask for any piece of information, and get a response instantly. You can check on the hours of your favorite restaurant, share your location with your friends and family, look for new places to explore all from your phone \u2014 all of this can improve your life. And that's only the beginning! Talking Tech In almost all tech companies, teams meet in the morning to have what's called a daily stand-up meeting . This is where all team members come together around a whiteboard and literally stand up in front of the team to present what they are working on that day, what they've accomplished, and what's in their way (\"blockers\"). This skill is developed with practice over time, and it is very important in communicating to the other team members what is going on in their code environment. This is not the only place this happens, of course. In code planning , teams are asked to research(WHY), plan and present proposals of how a system should be structured(WHAT). After that, they have to delegate the tasks, the timeline(s), and what sprints will be needed to building it(HOW)! It's quite incredible how we humans can conjure a mental image, cultivate the idea, formulate the words to convey it, and execute it with intention. These skills of creation are innate, but dedication and committed practice are needed make them flourish and grow inside of you. Along with stand-ups and code planning, teams also meet for retrospectives , which bring out the positives and negatives of the past week's work. This meeting is necessary for the teams can gather perspectives on each other's workflows, and make suggestions and give advice. The process is organic, but also managed and recorded by a team lead, who guides the meeting. But more impressively, even before any of these meetings happen, developers and entrepreneurs make pitches for their apps to be adopted, funded, and eventually built. The Pitch Any time you have a great idea, and you want to find money or developers to work on it, you have to pitch it. A pitch is an approximately five-minute story that lays out the problem, the created solution, and the potential profit of the solution. Here is where we suggest that you go to pitch-practice meetups, to see other do it, and then start practicing, yourself. Beginning next course you will be pitching your ideas for your Capstone Project. See there's a timeline to this: 101 - Learn fundamentals of web development in the core languages: HTML, CSS, and JS at the same time, plant idea seeds for your Capstone Project. 200 - Learn programming and data manipulation while shaping the story of your Capstone Project. 300 - Build Databases and Server while planning the steps and data requirements to build your Capstone Project. 400 - Learn a front-end library to create a dynamic web app while building your Capstone Project. 501 - Fine tune your Capstone App while preparing for interviews and talking about your App and programming knowledge. Additional Resources Article, Ryan Robinson - How To Pitch YT, Development That Pays - Daily Stand-Up: What You're Doing Wrong YT, Jeff Bax - Start Up Pitch NOTE: While the app pitched in this video is now closed, the pitch this guy makes is wonderful. Take notes, and ask yourself what makes it a good pitch. Practice It - Talking and Standing for Code Get ready for class by preparing to show off the really cool parts of your website to the class. Take your time. Work on standing still. Notice when you say: \"um,\" \"uh,\" \"like,\" etc. Make eye contact with everyone in the room, to draw them into the project. Practice at home, by navigating through the website while talking aloud. Practice with someone you're comfortable with.","title":"Talking Code"},{"location":"module-4/talkingCode/#talking-code","text":"Develop an attitude of gratitude, and give thanks for everything that happens to you, knowing that every step forward is a step toward achieving something bigger and better than your current situation. \u2014Brian Tracy","title":"Talking Code"},{"location":"module-4/talkingCode/#overview","text":"Skills of communicating ideas and information are incredibly important. Why? Because, while coding can get very heady, its impacts on other people are wide and deep. Think of the ways Google has impacted your life! You can now ask for any piece of information, and get a response instantly. You can check on the hours of your favorite restaurant, share your location with your friends and family, look for new places to explore all from your phone \u2014 all of this can improve your life. And that's only the beginning!","title":"Overview"},{"location":"module-4/talkingCode/#talking-tech","text":"In almost all tech companies, teams meet in the morning to have what's called a daily stand-up meeting . This is where all team members come together around a whiteboard and literally stand up in front of the team to present what they are working on that day, what they've accomplished, and what's in their way (\"blockers\"). This skill is developed with practice over time, and it is very important in communicating to the other team members what is going on in their code environment. This is not the only place this happens, of course. In code planning , teams are asked to research(WHY), plan and present proposals of how a system should be structured(WHAT). After that, they have to delegate the tasks, the timeline(s), and what sprints will be needed to building it(HOW)! It's quite incredible how we humans can conjure a mental image, cultivate the idea, formulate the words to convey it, and execute it with intention. These skills of creation are innate, but dedication and committed practice are needed make them flourish and grow inside of you. Along with stand-ups and code planning, teams also meet for retrospectives , which bring out the positives and negatives of the past week's work. This meeting is necessary for the teams can gather perspectives on each other's workflows, and make suggestions and give advice. The process is organic, but also managed and recorded by a team lead, who guides the meeting. But more impressively, even before any of these meetings happen, developers and entrepreneurs make pitches for their apps to be adopted, funded, and eventually built.","title":"Talking Tech"},{"location":"module-4/talkingCode/#the-pitch","text":"Any time you have a great idea, and you want to find money or developers to work on it, you have to pitch it. A pitch is an approximately five-minute story that lays out the problem, the created solution, and the potential profit of the solution. Here is where we suggest that you go to pitch-practice meetups, to see other do it, and then start practicing, yourself. Beginning next course you will be pitching your ideas for your Capstone Project. See there's a timeline to this: 101 - Learn fundamentals of web development in the core languages: HTML, CSS, and JS at the same time, plant idea seeds for your Capstone Project. 200 - Learn programming and data manipulation while shaping the story of your Capstone Project. 300 - Build Databases and Server while planning the steps and data requirements to build your Capstone Project. 400 - Learn a front-end library to create a dynamic web app while building your Capstone Project. 501 - Fine tune your Capstone App while preparing for interviews and talking about your App and programming knowledge.","title":"The Pitch"},{"location":"module-4/talkingCode/#additional-resources","text":"Article, Ryan Robinson - How To Pitch YT, Development That Pays - Daily Stand-Up: What You're Doing Wrong YT, Jeff Bax - Start Up Pitch NOTE: While the app pitched in this video is now closed, the pitch this guy makes is wonderful. Take notes, and ask yourself what makes it a good pitch.","title":"Additional Resources"},{"location":"module-4/talkingCode/#practice-it-talking-and-standing-for-code","text":"Get ready for class by preparing to show off the really cool parts of your website to the class. Take your time. Work on standing still. Notice when you say: \"um,\" \"uh,\" \"like,\" etc. Make eye contact with everyone in the room, to draw them into the project. Practice at home, by navigating through the website while talking aloud. Practice with someone you're comfortable with.","title":"Practice It - Talking and Standing for Code"},{"location":"preCourse/charactersToKnow/","text":"Characters to Know for Coding We need to get to know some characters on our keyboard before we can code. Use the presentation below to learn about these characters and what we use them for.","title":"Characters To Know"},{"location":"preCourse/charactersToKnow/#characters-to-know-for-coding","text":"We need to get to know some characters on our keyboard before we can code. Use the presentation below to learn about these characters and what we use them for.","title":"Characters to Know for Coding"},{"location":"preCourse/codeSandboxes/","text":"Playing with code in a sandbox! Overview In the last class, we used Codepen.io to build our first project. Programs like this are referred to as \"Code Sandboxes\". We tried it out as a guest user, but there are benefits to creating a free account, including being able to save your work. Code sandboxes are useful tools to share ideas and explore new possibilities \u2013 without the pressures of building a file structure , setting up your machine, or depending on the console. In class, we'll use CodePen to share snippets of code, practice coding, and discover new things. Get in the habit of browsing and playing with CodePens as you work through the textbook; it's \"where the rubber meets the road.\" With them, you can apply the concepts you've learned, and experiment with the technologies at the heart of your future career. See It - Creating an Account Practice It Go sign up for an account now! Explore. Go find a neat codePen and fork it. Search for \"calculator\". Fork it. Search for \"image gallery\". Fork it, as well.","title":"Code Sandboxes"},{"location":"preCourse/codeSandboxes/#playing-with-code-in-a-sandbox","text":"","title":"Playing with code in a sandbox!"},{"location":"preCourse/codeSandboxes/#overview","text":"In the last class, we used Codepen.io to build our first project. Programs like this are referred to as \"Code Sandboxes\". We tried it out as a guest user, but there are benefits to creating a free account, including being able to save your work. Code sandboxes are useful tools to share ideas and explore new possibilities \u2013 without the pressures of building a file structure , setting up your machine, or depending on the console. In class, we'll use CodePen to share snippets of code, practice coding, and discover new things. Get in the habit of browsing and playing with CodePens as you work through the textbook; it's \"where the rubber meets the road.\" With them, you can apply the concepts you've learned, and experiment with the technologies at the heart of your future career.","title":"Overview"},{"location":"preCourse/codeSandboxes/#see-it-creating-an-account","text":"","title":"See It - Creating an Account"},{"location":"preCourse/codeSandboxes/#practice-it","text":"Go sign up for an account now! Explore. Go find a neat codePen and fork it. Search for \"calculator\". Fork it. Search for \"image gallery\". Fork it, as well.","title":"Practice It"},{"location":"preCourse/cssForLooks/","text":"CSS is for Looks, JS is for Interactivity CSS works by targeting, selecting, and changing the HTML content, from basic things like text color to more advanced techniques for placing content on the page. You can target and select HTML in a number of ways. Today we're going to select it by the tag name , or the ID name. Border Let's start by selecting the ID box . If you look in your HTML you'll see that the box ID is applied to the main tag holding all our content. IDs in CSS always start with a # in front of the ID name. Then, the properties & values we want to apply to the HTML go inside {} to form a declaration block . So we'll write our CSS Rule by typing the ID name then adding curly brackets {} . The curly brackets tell the browser where the rule begins and where it ends. Inside the brackets, we are going to add a border property and set it to 15px solid blue . This creates a blue, 15-pixel wide border around all the content inside the element with the ID box . the CSS 1 2 3 4 # box { border : 15 px solid blue ; border-radius : 25 px ; } the Result Align & Margin The next thing we want to do is align some of the content. To this, we'll add another property to our #box rule declaration block. This one is text-align: center; . We always want to remember to add the : and the ; when adding properties. The part on the left of the : tells the browser what to change, the part on the right tells it how to change it, and the ; tells the browser when the rule is completed. Next, let's center our container by adding, margin: auto; . This tells the browser to put an equal amount of space on either side of the container. While we are centering things, let's center that image container we added in HTML. The Img container has an ID of social on it. In order to center it, we need to set its width to be less than its parent's width, the main container, and add another margin: auto; : the CSS 1 2 3 4 5 6 7 8 9 10 11 12 # box { border : 15 px outset blue ; border-radius : 25 px ; text-align : center ; margin : auto ; } # social { width : 500 px ; margin : auto ; } the Result Font The next thing we want to do is set a specific height and width on the #box container. Let's set it to width: 500px; and height: 200px; After that, let's change the font. If you don't specify which font to use, the browser will just use a default font . Telling the browser what font to use is a little tricky because not all machines have the same fonts installed. We could tell the browser to download a font, but instead we are just going to assign a category and let the browser pick its default one of that category. We do that with the following key/value pair: font-family: cursive; the CSS 1 2 3 4 5 6 7 8 9 # box { border : 15 px outset blue ; border-radius : 25 px ; text-align : center ; margin : auto ; width : 500 px ; height : 200 px ; font-family : cursive ; } the Result Background Let's add a little more color by setting the background of the body to red . The whole visible area in the browser is inside the body. To change its background color, we add background: red; Next we want to clean up some of the spacing and formatting in the #box container. We'll do this by changing some font sizes and margin spacing. We're adding a new type of measurement here, the em . The em is similar to the pixel( px ), but it's a relative measurement and helps the browser resize the text on different screen sizes. the CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 body { background-color : red ; } h1 { font-size : 2.2 em ; margin-top : 10 px ; margin-bottom : 0 ; } span { font-size : 1.5 em ; } the Result The black text on the red background is a little harsh. We could change the font color, but instead, we are going to change the background of the #box container. We just saw how we can change the background to a specific color, but we can also change it to a pattern. Creating these pattens can be complicated, but fortunately, someone has created a bunch of them and shared the code with us. You can find them by going to this website CSS3 Patterns Gallery . Scroll down until you see a pattern called \"Wave\" and click it. This will bring up the code, and you can copy the code/paste it into the #box rule as shown below. the CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # box { border : 15 px outset blue ; border-radius : 25 px ; text-align : center ; margin : auto ; width : 500 px ; height : 200 px ; font-family : cursive ; background : linear-gradient ( #ffffff 50 % , rgba ( 255 , 255 , 255 , 0 ) 0 ) 0 0 , radial-gradient ( circle closest -side , #FFFFFF 53 % , rgba ( 255 , 255 , 255 , 0 ) 0 ) 0 0 , radial-gradient ( circle closest -side , #FFFFFF 50 % , rgba ( 255 , 255 , 255 , 0 ) 0 ) 55 px 0 #48B ; background-size : 110 px 200 px ; background-repeat : repeat-x ; } the Result The last thing we need to do is make the countdown clock work. Writing JavaScript is a little more complicated than CSS or HTML, but you did a quick Google search and found that someone else had written the code already and like the CSS background patterns, they have shared the code for other developers to use and learn from. Copy the code from below and paste it into the JS window in your code pen. And with that working, we are ready to show it to our friend (the customer/client) the JS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // set up variable to manage date rules const date = new Date (); // New Date object date . setDate ( date . getDate () + 30 ) // Current day plus 30 days const second = 1000 ; const minute = second * 60 ; const hour = minute * 60 ; const day = hour * 24 ; // convert target date to a date object let targetDate = date ; // set up the loop to update the countdown once a second let x = setInterval ( function () { // get the current time let now = new Date (). getTime (); // get the time remaining let distance = targetDate - now ; // update the <span> tags with the countdown values document . querySelector ( '#days' ). innerHTML = Math . floor ( distance / ( day )) + \" days, \" ; document . querySelector ( '#hours' ). innerHTML = Math . floor (( distance % ( day )) / ( hour )) + \" hours, \" ; document . querySelector ( '#minutes' ). innerHTML = Math . floor (( distance % ( hour )) / ( minute )) + \" minutes, \" ; document . querySelector ( '#seconds' ). innerHTML = Math . floor (( distance % ( minute )) / second ) + \" seconds \" ; }, second ) result Additional Resources Reference, granneman.com - Web Browser Font Defaults Reference, lea.verou.me - CSS3 Patterns Gallery","title":"CSS For Looks"},{"location":"preCourse/cssForLooks/#css-is-for-looks-js-is-for-interactivity","text":"CSS works by targeting, selecting, and changing the HTML content, from basic things like text color to more advanced techniques for placing content on the page. You can target and select HTML in a number of ways. Today we're going to select it by the tag name , or the ID name.","title":"CSS is for Looks, JS is for Interactivity"},{"location":"preCourse/cssForLooks/#border","text":"Let's start by selecting the ID box . If you look in your HTML you'll see that the box ID is applied to the main tag holding all our content. IDs in CSS always start with a # in front of the ID name. Then, the properties & values we want to apply to the HTML go inside {} to form a declaration block . So we'll write our CSS Rule by typing the ID name then adding curly brackets {} . The curly brackets tell the browser where the rule begins and where it ends. Inside the brackets, we are going to add a border property and set it to 15px solid blue . This creates a blue, 15-pixel wide border around all the content inside the element with the ID box . the CSS 1 2 3 4 # box { border : 15 px solid blue ; border-radius : 25 px ; } the Result","title":"Border"},{"location":"preCourse/cssForLooks/#align-margin","text":"The next thing we want to do is align some of the content. To this, we'll add another property to our #box rule declaration block. This one is text-align: center; . We always want to remember to add the : and the ; when adding properties. The part on the left of the : tells the browser what to change, the part on the right tells it how to change it, and the ; tells the browser when the rule is completed. Next, let's center our container by adding, margin: auto; . This tells the browser to put an equal amount of space on either side of the container. While we are centering things, let's center that image container we added in HTML. The Img container has an ID of social on it. In order to center it, we need to set its width to be less than its parent's width, the main container, and add another margin: auto; : the CSS 1 2 3 4 5 6 7 8 9 10 11 12 # box { border : 15 px outset blue ; border-radius : 25 px ; text-align : center ; margin : auto ; } # social { width : 500 px ; margin : auto ; } the Result","title":"Align &amp; Margin"},{"location":"preCourse/cssForLooks/#font","text":"The next thing we want to do is set a specific height and width on the #box container. Let's set it to width: 500px; and height: 200px; After that, let's change the font. If you don't specify which font to use, the browser will just use a default font . Telling the browser what font to use is a little tricky because not all machines have the same fonts installed. We could tell the browser to download a font, but instead we are just going to assign a category and let the browser pick its default one of that category. We do that with the following key/value pair: font-family: cursive; the CSS 1 2 3 4 5 6 7 8 9 # box { border : 15 px outset blue ; border-radius : 25 px ; text-align : center ; margin : auto ; width : 500 px ; height : 200 px ; font-family : cursive ; } the Result","title":"Font"},{"location":"preCourse/cssForLooks/#background","text":"Let's add a little more color by setting the background of the body to red . The whole visible area in the browser is inside the body. To change its background color, we add background: red; Next we want to clean up some of the spacing and formatting in the #box container. We'll do this by changing some font sizes and margin spacing. We're adding a new type of measurement here, the em . The em is similar to the pixel( px ), but it's a relative measurement and helps the browser resize the text on different screen sizes. the CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 body { background-color : red ; } h1 { font-size : 2.2 em ; margin-top : 10 px ; margin-bottom : 0 ; } span { font-size : 1.5 em ; } the Result The black text on the red background is a little harsh. We could change the font color, but instead, we are going to change the background of the #box container. We just saw how we can change the background to a specific color, but we can also change it to a pattern. Creating these pattens can be complicated, but fortunately, someone has created a bunch of them and shared the code with us. You can find them by going to this website CSS3 Patterns Gallery . Scroll down until you see a pattern called \"Wave\" and click it. This will bring up the code, and you can copy the code/paste it into the #box rule as shown below. the CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # box { border : 15 px outset blue ; border-radius : 25 px ; text-align : center ; margin : auto ; width : 500 px ; height : 200 px ; font-family : cursive ; background : linear-gradient ( #ffffff 50 % , rgba ( 255 , 255 , 255 , 0 ) 0 ) 0 0 , radial-gradient ( circle closest -side , #FFFFFF 53 % , rgba ( 255 , 255 , 255 , 0 ) 0 ) 0 0 , radial-gradient ( circle closest -side , #FFFFFF 50 % , rgba ( 255 , 255 , 255 , 0 ) 0 ) 55 px 0 #48B ; background-size : 110 px 200 px ; background-repeat : repeat-x ; } the Result The last thing we need to do is make the countdown clock work. Writing JavaScript is a little more complicated than CSS or HTML, but you did a quick Google search and found that someone else had written the code already and like the CSS background patterns, they have shared the code for other developers to use and learn from. Copy the code from below and paste it into the JS window in your code pen. And with that working, we are ready to show it to our friend (the customer/client) the JS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // set up variable to manage date rules const date = new Date (); // New Date object date . setDate ( date . getDate () + 30 ) // Current day plus 30 days const second = 1000 ; const minute = second * 60 ; const hour = minute * 60 ; const day = hour * 24 ; // convert target date to a date object let targetDate = date ; // set up the loop to update the countdown once a second let x = setInterval ( function () { // get the current time let now = new Date (). getTime (); // get the time remaining let distance = targetDate - now ; // update the <span> tags with the countdown values document . querySelector ( '#days' ). innerHTML = Math . floor ( distance / ( day )) + \" days, \" ; document . querySelector ( '#hours' ). innerHTML = Math . floor (( distance % ( day )) / ( hour )) + \" hours, \" ; document . querySelector ( '#minutes' ). innerHTML = Math . floor (( distance % ( hour )) / ( minute )) + \" minutes, \" ; document . querySelector ( '#seconds' ). innerHTML = Math . floor (( distance % ( minute )) / second ) + \" seconds \" ; }, second ) result","title":"Background"},{"location":"preCourse/cssForLooks/#additional-resources","text":"Reference, granneman.com - Web Browser Font Defaults Reference, lea.verou.me - CSS3 Patterns Gallery","title":"Additional Resources"},{"location":"preCourse/cssGettingStarted/","text":"More on CSS Getting Started Project Use the following CodeSandbox project to explore CSS Properties. The instructions are located in the comments of the CSS file. Your task is to add style to the webpage below. Open the CodeSandbox to complete the project. Questions to consider as you complete the CSS Recipe project: How are the HTML and CSS linked together? What is the syntax for a CSS rule?","title":"CSS Getting Started"},{"location":"preCourse/cssGettingStarted/#more-on-css","text":"","title":"More on CSS"},{"location":"preCourse/cssGettingStarted/#getting-started-project","text":"Use the following CodeSandbox project to explore CSS Properties. The instructions are located in the comments of the CSS file. Your task is to add style to the webpage below. Open the CodeSandbox to complete the project. Questions to consider as you complete the CSS Recipe project: How are the HTML and CSS linked together? What is the syntax for a CSS rule?","title":"Getting Started Project"},{"location":"preCourse/cssIntro/","text":"Intro to CSS Objective : By the end of this lesson, the student will be able to apply styles to HTML elements using CSS rules. Assignment : CSS Practice CodeSandbox Review and Recap In the last lesson, we covered how to use HTML tags to add structure to our webpage. All HTML elements have properties that can be given different values. When we do this, it will change how those elements are styled on the page. We will explore that using CSS. What and Why is CSS? CSS stands for Cascading Style Sheets . CSS is used to define styles for your web pages, including the design, layout and variations in display for different devices and screen sizes. Using CSS allows us to change properties attached to HTML elements. You saw in the previous assignment that some HTML elements looked differently. For example: Heading Default Styles the code 1 2 < h1 > An H1 heading </ h1 > < h3 > An H3 heading </ h3 > These two elements have properties, like the font-size , that start out with different default values . In our CSS file, we can change lots of different properties. Read It - Properties A property is an attribute and they store values on an element. We can change the value of any property using CSS. Go to W3Schools and look through the properties. These are all of the different attributes that you can change about an HTML element. Where does CSS go? There are different ways to apply CSS to the HTML. We are going to focus on the external method . This means the CSS styles will be contained in a separate file. Just like the example we saw of our front-end code and our back-end code being separate; we'll keep our HTML content and CSS styling in separate files but link them together so the browser knows how to apply the styles to our content. Link your CSS file by copying and pasting the following code into the Head Element of your HTML: 1 2 3 4 < head > < title > Awesome website </ title > < link rel = \"stylesheet\" href = \"style.css\" > </ head > \"style.css\" is the name of the file that contains your CSS styles. This is called a pathname because it tells the browser how to find the appropriate file, i.e. ./styles/index-styles.css would tell the browser to first find a folder called styles then search it for a file called index-styles.css The file name could be different, but it has to have the .css on the end. Alternative Places to Write CSS These are NOT the preferred way to write CSS but just in case you see it done this way on your learning journey we don't want you to be alarmed: In-line Styles 1 < p style = \"background-color:blue; font-size: 20px;\" > This will have a blue background & be 20px font-size < p > In-File Styles 1 2 3 4 5 6 7 8 < style > p { background-color : blue ; font-size : 20 px ; } </ style > < p > This will have a blue background & be 20px font-size < p > What Does CSS Look Like? Now that we know what CSS is, let's take a look at how it is written. CSS Syntax A CSS rule consists of a selector and a declaration block. The selector points to the HTML element to style; here it's the h1 (the thing from our HTML that gets the styles attached to it). The declaration block (in curly braces) contains one or more declarations separated by semicolons. Each declaration changes a different property. Each declaration includes a CSS property name and a value, separated by a colon. Separate declarations with a semicolon. In the above example, there are two declarations being made on the selected h1 element: The color property is being given a value of blue. The font-size property is being given a value of 12 pixels. Practice It - CodeSandbox Fork the embedded CodeSandbox to practice adding styles to HTML Elements. The rule templates are already in the CSS file. Fill in the correct properties and values to complete each task. You will need to match the HTML elements with their CSS declaration. Hint: A CSS comment in the code is indicated by the following syntax. Additional Resoureces Watch these videos for a mini-crash course in CSS. YT, BlondieBytes - CSS in 5 Minutes YT, DevTips - CSS Basics pt2 Know Your Docs Be sure to reference the official documentation on CSS on W3Schools Tutorials. Documentation makes software useful. All good software comes with documentation so new developers can pick it up, learn quickly, apply, and even change it if needed. W3S Docs - Default Styles QUESTIONS FOR CLASS DISCUSSION What does CSS do? What is a selector? What is a declaration block? How do you make sure that the HTML file and CSS file are linked together? Can you change more than one property in a declaration block? Terminology to Know Take a look at these terms. If you don't know or can't describe any of them, take some time to teach yourself. You're a developer, which means you're also learning to develop yourself.= Declaration Block Selector Link in the Head Property Value","title":"CSS Intro"},{"location":"preCourse/cssIntro/#intro-to-css","text":"Objective : By the end of this lesson, the student will be able to apply styles to HTML elements using CSS rules. Assignment : CSS Practice CodeSandbox","title":"Intro to CSS"},{"location":"preCourse/cssIntro/#review-and-recap","text":"In the last lesson, we covered how to use HTML tags to add structure to our webpage. All HTML elements have properties that can be given different values. When we do this, it will change how those elements are styled on the page. We will explore that using CSS.","title":"Review and Recap"},{"location":"preCourse/cssIntro/#what-and-why-is-css","text":"CSS stands for Cascading Style Sheets . CSS is used to define styles for your web pages, including the design, layout and variations in display for different devices and screen sizes. Using CSS allows us to change properties attached to HTML elements. You saw in the previous assignment that some HTML elements looked differently. For example: Heading Default Styles the code 1 2 < h1 > An H1 heading </ h1 > < h3 > An H3 heading </ h3 > These two elements have properties, like the font-size , that start out with different default values . In our CSS file, we can change lots of different properties.","title":"What and Why is CSS?"},{"location":"preCourse/cssIntro/#read-it-properties","text":"A property is an attribute and they store values on an element. We can change the value of any property using CSS. Go to W3Schools and look through the properties. These are all of the different attributes that you can change about an HTML element.","title":"Read It - Properties"},{"location":"preCourse/cssIntro/#where-does-css-go","text":"There are different ways to apply CSS to the HTML. We are going to focus on the external method . This means the CSS styles will be contained in a separate file. Just like the example we saw of our front-end code and our back-end code being separate; we'll keep our HTML content and CSS styling in separate files but link them together so the browser knows how to apply the styles to our content. Link your CSS file by copying and pasting the following code into the Head Element of your HTML: 1 2 3 4 < head > < title > Awesome website </ title > < link rel = \"stylesheet\" href = \"style.css\" > </ head > \"style.css\" is the name of the file that contains your CSS styles. This is called a pathname because it tells the browser how to find the appropriate file, i.e. ./styles/index-styles.css would tell the browser to first find a folder called styles then search it for a file called index-styles.css The file name could be different, but it has to have the .css on the end.","title":"Where does CSS go?"},{"location":"preCourse/cssIntro/#alternative-places-to-write-css","text":"These are NOT the preferred way to write CSS but just in case you see it done this way on your learning journey we don't want you to be alarmed: In-line Styles 1 < p style = \"background-color:blue; font-size: 20px;\" > This will have a blue background & be 20px font-size < p > In-File Styles 1 2 3 4 5 6 7 8 < style > p { background-color : blue ; font-size : 20 px ; } </ style > < p > This will have a blue background & be 20px font-size < p >","title":"Alternative Places to Write CSS"},{"location":"preCourse/cssIntro/#what-does-css-look-like","text":"Now that we know what CSS is, let's take a look at how it is written.","title":"What Does CSS Look Like?"},{"location":"preCourse/cssIntro/#css-syntax","text":"A CSS rule consists of a selector and a declaration block. The selector points to the HTML element to style; here it's the h1 (the thing from our HTML that gets the styles attached to it). The declaration block (in curly braces) contains one or more declarations separated by semicolons. Each declaration changes a different property. Each declaration includes a CSS property name and a value, separated by a colon. Separate declarations with a semicolon. In the above example, there are two declarations being made on the selected h1 element: The color property is being given a value of blue. The font-size property is being given a value of 12 pixels.","title":"CSS Syntax"},{"location":"preCourse/cssIntro/#practice-it-codesandbox","text":"Fork the embedded CodeSandbox to practice adding styles to HTML Elements. The rule templates are already in the CSS file. Fill in the correct properties and values to complete each task. You will need to match the HTML elements with their CSS declaration. Hint: A CSS comment in the code is indicated by the following syntax.","title":"Practice It - CodeSandbox"},{"location":"preCourse/cssIntro/#additional-resoureces","text":"Watch these videos for a mini-crash course in CSS. YT, BlondieBytes - CSS in 5 Minutes YT, DevTips - CSS Basics pt2","title":"Additional Resoureces"},{"location":"preCourse/cssIntro/#know-your-docs","text":"Be sure to reference the official documentation on CSS on W3Schools Tutorials. Documentation makes software useful. All good software comes with documentation so new developers can pick it up, learn quickly, apply, and even change it if needed. W3S Docs - Default Styles","title":"Know Your Docs"},{"location":"preCourse/cssIntro/#questions-for-class-discussion","text":"What does CSS do? What is a selector? What is a declaration block? How do you make sure that the HTML file and CSS file are linked together? Can you change more than one property in a declaration block? Terminology to Know Take a look at these terms. If you don't know or can't describe any of them, take some time to teach yourself. You're a developer, which means you're also learning to develop yourself.= Declaration Block Selector Link in the Head Property Value","title":"QUESTIONS FOR CLASS DISCUSSION"},{"location":"preCourse/day1-homework/","text":"Day One Homework - Intro to the Web The internet may seem vast, daunting, and unreal. Oftentimes, people don't stop to ask how it works. And really, they don't need to. They just need to know how to use it. You, on the other hand, are embarking on a journey to hone your knowledge and skills of web development. In order for you to know what you're doing and what is possible, you'll need to understand how the web functions. We'll start by laying out a map of terms, concepts, and flows so that you can begin to create your own mental models of how this thing we use every day actually functions. We'll talk about each of these terms in-depth in the next lessons, but let's just throw them out there for now since you'll be hearing each of them every day for the rest of your career. Front-end/Client-side Front-end / client-side refers to the part of a website, page or app that you're looking at right now. The front- or client- simply means what the users see when navigating the web. This is generated by the browser (Chrome, Safari, Firefox) thus these softwares and your computer are called the client and what the user (you) see is called the front-end. Back-end/Server-side By contrast, the Back-end / Server-side is the section of the website, page, or app that the user can't see. This is where data (information stored in numbers and letters) is stored in databases , and computers that run server software to serve the data out of the databases live. We call these computers and their software servers , thus server-side We use these titles to plan, divide work, assign tasks, and create solutions. In web development, the front-end can't work without the back-end collecting data and information, and the backend isn't useful to humans without a front-end to navigate with our eyes, ears, voice, and fingers. Developers that work on both front-end and back-end are known as full stack developers . In this program you'll learn to build in both the front-end and back-end, giving you the tools to work as a full-stack developer. What you may find as you progress through this program is that developers tend to gravitate towards one or the other. This is perfectly normal. But whether you are a full-stack, front-end, or back-end developer, it will only help you professionally to understand how both of these focuses of web development come together. If you're interested in learning a bit more about the day-to-day difference between a front-end and back-end developer, feel free to read more here: Article, Medium - Modern Front-End Dev Article, Medium - Modern Back-End Dev Back to our introduction to the web: A server (where the back-end code is executed) holds files like an index.html at certain addresses called URLs . When we navigate the web, our web browser (Chrome, Firefox, Safari, etc.) can request access to those files through URL addresses. You see, servers still hold front-end code but only front-end tools like a web browser are able to read/execute them. Thus, servers serve files to our client-side browser so that we're able to view them as web pages. It really is as simple as that! What You'll Learn in the Program This program is design to take you, someone who may not have any experience programming and coding, and turn you into a professional and confident developer in a few months! To do this you are required to learn a significant amount of information and apply to creating your very full-stack app. We call this app your Capstone App because it combines all of the information you'll learn in the next few months into a project you can be proud of and share with the world. As you build your Capstone App or any other app, you'll normally be bundling both front-end code and back-end code together in the same place but still divide these two sets of code into different folders like: client/ and server/ , so you and your team know where to find certain functionality. In this case, your file structure would look like this: 1 2 3 4 5 6 7 8 9 myCapstoneApp/ client/ index.html style.css scripts.js server/ routes.cs auth.cs app.cs This may look foreign to you right now, but it is something that you will become familiar with as you move through the program. For now, just try and keep the separation between front-end and back-end in your mind. Luckily, we keep a similar structure and separation in your courses to help out: 101 Level is about the frontend: HTML, CSS, and DOM manipulation with JavaScript 211 Level focuses on programming basics that will be used on both front-end and back-end 311 Level is all about the back-end: SQL, Databases, and back-end JavaScript(Node) 411 Level focuses on the front-end using React & the passing of data from the front-end to the back-end Assigned Viewing Make sure you watch the video below before the next class: Terms to Know Server - A computer or computer program which manages access to a centralized resource or service in a network. Front-end/client-side - Client-side refers to operations that are performed by the client in a client\u2013server relationship in a computer network. Back-end/server-side - Server-side refers to operations that are performed by the server in a client\u2013server relationship in a computer network. URL - A URL (Uniform Resource Locator) is a unique identifier used to locate a resource on the internet. It is also referred to as a web address. URLs consist of multiple parts\u2014including a protocol and domain name\u2014that tell a web browser how and where to retrieve a resource. Data - Data is a collection of facts, such as numbers, words, measurements, observations or just descriptions of things. Database - A structured set of data held in a computer, especially one that is accessible in various ways. Browser - A computer program with a graphical user interface for displaying and navigating between web pages. Internet - An electronic communications network that connects computer networks and organizational computer facilities around the world.","title":"Day One Homework"},{"location":"preCourse/day1-homework/#day-one-homework-intro-to-the-web","text":"The internet may seem vast, daunting, and unreal. Oftentimes, people don't stop to ask how it works. And really, they don't need to. They just need to know how to use it. You, on the other hand, are embarking on a journey to hone your knowledge and skills of web development. In order for you to know what you're doing and what is possible, you'll need to understand how the web functions. We'll start by laying out a map of terms, concepts, and flows so that you can begin to create your own mental models of how this thing we use every day actually functions. We'll talk about each of these terms in-depth in the next lessons, but let's just throw them out there for now since you'll be hearing each of them every day for the rest of your career.","title":"Day One Homework - Intro to the Web"},{"location":"preCourse/day1-homework/#front-endclient-side","text":"Front-end / client-side refers to the part of a website, page or app that you're looking at right now. The front- or client- simply means what the users see when navigating the web. This is generated by the browser (Chrome, Safari, Firefox) thus these softwares and your computer are called the client and what the user (you) see is called the front-end.","title":"Front-end/Client-side"},{"location":"preCourse/day1-homework/#back-endserver-side","text":"By contrast, the Back-end / Server-side is the section of the website, page, or app that the user can't see. This is where data (information stored in numbers and letters) is stored in databases , and computers that run server software to serve the data out of the databases live. We call these computers and their software servers , thus server-side We use these titles to plan, divide work, assign tasks, and create solutions. In web development, the front-end can't work without the back-end collecting data and information, and the backend isn't useful to humans without a front-end to navigate with our eyes, ears, voice, and fingers. Developers that work on both front-end and back-end are known as full stack developers . In this program you'll learn to build in both the front-end and back-end, giving you the tools to work as a full-stack developer. What you may find as you progress through this program is that developers tend to gravitate towards one or the other. This is perfectly normal. But whether you are a full-stack, front-end, or back-end developer, it will only help you professionally to understand how both of these focuses of web development come together. If you're interested in learning a bit more about the day-to-day difference between a front-end and back-end developer, feel free to read more here: Article, Medium - Modern Front-End Dev Article, Medium - Modern Back-End Dev Back to our introduction to the web: A server (where the back-end code is executed) holds files like an index.html at certain addresses called URLs . When we navigate the web, our web browser (Chrome, Firefox, Safari, etc.) can request access to those files through URL addresses. You see, servers still hold front-end code but only front-end tools like a web browser are able to read/execute them. Thus, servers serve files to our client-side browser so that we're able to view them as web pages. It really is as simple as that!","title":"Back-end/Server-side"},{"location":"preCourse/day1-homework/#what-youll-learn-in-the-program","text":"This program is design to take you, someone who may not have any experience programming and coding, and turn you into a professional and confident developer in a few months! To do this you are required to learn a significant amount of information and apply to creating your very full-stack app. We call this app your Capstone App because it combines all of the information you'll learn in the next few months into a project you can be proud of and share with the world. As you build your Capstone App or any other app, you'll normally be bundling both front-end code and back-end code together in the same place but still divide these two sets of code into different folders like: client/ and server/ , so you and your team know where to find certain functionality. In this case, your file structure would look like this: 1 2 3 4 5 6 7 8 9 myCapstoneApp/ client/ index.html style.css scripts.js server/ routes.cs auth.cs app.cs This may look foreign to you right now, but it is something that you will become familiar with as you move through the program. For now, just try and keep the separation between front-end and back-end in your mind. Luckily, we keep a similar structure and separation in your courses to help out: 101 Level is about the frontend: HTML, CSS, and DOM manipulation with JavaScript 211 Level focuses on programming basics that will be used on both front-end and back-end 311 Level is all about the back-end: SQL, Databases, and back-end JavaScript(Node) 411 Level focuses on the front-end using React & the passing of data from the front-end to the back-end","title":"What You'll Learn in the Program"},{"location":"preCourse/day1-homework/#assigned-viewing","text":"Make sure you watch the video below before the next class:","title":"Assigned Viewing"},{"location":"preCourse/day1-homework/#terms-to-know","text":"Server - A computer or computer program which manages access to a centralized resource or service in a network. Front-end/client-side - Client-side refers to operations that are performed by the client in a client\u2013server relationship in a computer network. Back-end/server-side - Server-side refers to operations that are performed by the server in a client\u2013server relationship in a computer network. URL - A URL (Uniform Resource Locator) is a unique identifier used to locate a resource on the internet. It is also referred to as a web address. URLs consist of multiple parts\u2014including a protocol and domain name\u2014that tell a web browser how and where to retrieve a resource. Data - Data is a collection of facts, such as numbers, words, measurements, observations or just descriptions of things. Database - A structured set of data held in a computer, especially one that is accessible in various ways. Browser - A computer program with a graphical user interface for displaying and navigating between web pages. Internet - An electronic communications network that connects computer networks and organizational computer facilities around the world.","title":"Terms to Know"},{"location":"preCourse/day2-homework/","text":"HTML Basics Review 1 2 3 4 5 6 7 8 9 10 <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < title > Static Template </ title > </ head > < body > < h1 > This is a basic static template! </ h1 > </ body > </ html > Does this make sense to you? Can you explain this code to someone that doesn't understand it? HTML Structure <h1> </h1> The <h1> is an opening tag for a Heading1 element. The </h1> is a closing tag for a Heading1 element. What is the difference between the two? All of the content displayed on the webpage is between these two tags/inside this one element: <body> </body> tags. The opening and closing tags create the container that will hold the content. Think of the closing tag as the lid on the container. Elements When we place content between the two tags, we have created an HTML element. 1 < h1 > Content between the opening and closing tag. </ h1 > The whole thing represents an H1 Element. There are lots of other types of elements depending on the tag that is used. They each represent different objects that the browser sees. Explore the different types of elements before moving on to the practice activity. W3S Docs - HTML Tags Reference - Click Me!! the HTML code to make the link you see above is: <a href=\"https://www.w3schools.com/TAGS/default.ASP\">W3S Docs - HTML Tags Reference - Click Me!!<a> Meaningful Elements (Semantic Elements) We are now going to practice using different tags to create some structure to an HTML document. Follow the instructions in the code comments to use the correct tags. Project Directions: Open the CodeSandbox below Make sure you are signed in. Fork your own copy. Follow the directions in the comments to complete the assignment. Terms to Know Take a look at these terms. Take some time to teach yourself. You're a developer, which means you're also learning to develop yourself! HTML - Hyper Text Markup Language Browser - A computer program with a graphical user interface for displaying and navigating between web pages. Opening Tag - These tags define where the element begins, where it ends, and assign a meaning to the element. The beginning of an element is marked by an opening tag. An HTML opening tag consists of a left angle bracket (<), the name of the element (\u201cp\u201d in the case of a paragraph), and a right angle bracket (>). Closing Tag - An HTML element is defined by a starting tag. If the element contains other content, it ends with a closing tag. For example, <p> is the starting tag of a paragraph and </p> is the closing tag of the same paragraph, but <p> This is a paragraph </p> is a paragraph element. Element - The code element represents a fragment of computer code, which can be any piece of computer readable text. Among many other examples, you can find inside the code element a piece of a program in any programming language, an HTML or XML document, a set of CSS declarations, the contents of a configuration file, etc. Tag - The <code> tag is used to define a piece of computer code. The content inside is displayed in the browser's default monospace font. Tip: This tag is not deprecated. However, it is possible to achieve richer effect by using CSS. Comment - In computer programming, a comment is a programmer-readable explanation or annotation in the source code of a computer program. They are added with the purpose of making the source code easier for humans to understand, and are generally ignored by compilers and interpreters. HTML Comment Syntax 1 <!-- This is a comment in HTML --> CSS Comment Syntax 1 /* This is a comment in CSS */ JS Comment Syntax 1 2 3 4 5 // This is a single-line comment in JS /* This is a multi-line comment in JS */ NOTE: When working in VS Code and most other editors you can simply press Cmd + ? / Ctrl + ? while on the line you want to comment out. No highlighting needed.","title":"Day Two Homework"},{"location":"preCourse/day2-homework/#html-basics-review","text":"1 2 3 4 5 6 7 8 9 10 <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < title > Static Template </ title > </ head > < body > < h1 > This is a basic static template! </ h1 > </ body > </ html > Does this make sense to you? Can you explain this code to someone that doesn't understand it?","title":"HTML Basics Review"},{"location":"preCourse/day2-homework/#html-structure","text":"<h1> </h1> The <h1> is an opening tag for a Heading1 element. The </h1> is a closing tag for a Heading1 element. What is the difference between the two? All of the content displayed on the webpage is between these two tags/inside this one element: <body> </body> tags. The opening and closing tags create the container that will hold the content. Think of the closing tag as the lid on the container.","title":"HTML Structure"},{"location":"preCourse/day2-homework/#elements","text":"When we place content between the two tags, we have created an HTML element. 1 < h1 > Content between the opening and closing tag. </ h1 > The whole thing represents an H1 Element. There are lots of other types of elements depending on the tag that is used. They each represent different objects that the browser sees. Explore the different types of elements before moving on to the practice activity. W3S Docs - HTML Tags Reference - Click Me!! the HTML code to make the link you see above is: <a href=\"https://www.w3schools.com/TAGS/default.ASP\">W3S Docs - HTML Tags Reference - Click Me!!<a>","title":"Elements"},{"location":"preCourse/day2-homework/#meaningful-elements-semantic-elements","text":"We are now going to practice using different tags to create some structure to an HTML document. Follow the instructions in the code comments to use the correct tags. Project Directions: Open the CodeSandbox below Make sure you are signed in. Fork your own copy. Follow the directions in the comments to complete the assignment.","title":"Meaningful Elements (Semantic Elements)"},{"location":"preCourse/day2-homework/#terms-to-know","text":"Take a look at these terms. Take some time to teach yourself. You're a developer, which means you're also learning to develop yourself! HTML - Hyper Text Markup Language Browser - A computer program with a graphical user interface for displaying and navigating between web pages. Opening Tag - These tags define where the element begins, where it ends, and assign a meaning to the element. The beginning of an element is marked by an opening tag. An HTML opening tag consists of a left angle bracket (<), the name of the element (\u201cp\u201d in the case of a paragraph), and a right angle bracket (>). Closing Tag - An HTML element is defined by a starting tag. If the element contains other content, it ends with a closing tag. For example, <p> is the starting tag of a paragraph and </p> is the closing tag of the same paragraph, but <p> This is a paragraph </p> is a paragraph element. Element - The code element represents a fragment of computer code, which can be any piece of computer readable text. Among many other examples, you can find inside the code element a piece of a program in any programming language, an HTML or XML document, a set of CSS declarations, the contents of a configuration file, etc. Tag - The <code> tag is used to define a piece of computer code. The content inside is displayed in the browser's default monospace font. Tip: This tag is not deprecated. However, it is possible to achieve richer effect by using CSS. Comment - In computer programming, a comment is a programmer-readable explanation or annotation in the source code of a computer program. They are added with the purpose of making the source code easier for humans to understand, and are generally ignored by compilers and interpreters. HTML Comment Syntax 1 <!-- This is a comment in HTML --> CSS Comment Syntax 1 /* This is a comment in CSS */ JS Comment Syntax 1 2 3 4 5 // This is a single-line comment in JS /* This is a multi-line comment in JS */ NOTE: When working in VS Code and most other editors you can simply press Cmd + ? / Ctrl + ? while on the line you want to comment out. No highlighting needed.","title":"Terms to Know"},{"location":"preCourse/gitAndGitHub/","text":"Getting the Git Software Now that you have a GitHub Account to store your code let's get the git software so we can get the code up to GitHub. Checklist Download & Install Git Software for Mac Download Git + xCode For for Windows download gitBash Set git configurations and navigate VIM Learn more about Git Download Git Software To use the Git Software , we will need to get comfortable using the Command-Line Interface (aka CLI or \"terminal\"). Depending on your Operating Systems (OS) you will need to follow different instructions to access your terminal and download Git: For Window <10 Install Git Additional support: Blog, GitHub - Install git See For All Machine Users below for next steps. For Windows >10 If you have a Windows 10+ machine you can use Command Prompt YT, Programming Knowledge2 - How To Install Git on Windows Install Git Additional support: Install git See For All Machine Users below for next steps. For Mac Go to terminal Cmd + Space then type terminal + Enter Install HomeBrew - in the terminal run: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" + Enter Fix packages - in the terminal run: brew doctor + Enter Install Git - in the terminal run: brew install git + Enter You may be prompted to type in a password. This is your computer's password and will not appear as you type it for security reasons. You will be offered to install the Command Line Developer Tools (Xcode) from Apple. Confirm by clicking Install. After the installation finishes, continue installing Homebrew by hitting ENTER again. Xcode is required by Apple and may take a while to install. Please do this before class. See For All Machine Users below for next steps. For Linux Use your package manager to install the latest version of Git: sudo apt-get install git See For All Machine Users below for next steps. NOTE: There is no icon for this program, just go to your terminal/shell/commandPrompt/bash and type git + Enter Git Config for All Machine Users Set your Git username and email. You must configure your local Git software to know where to push your work(code) to. We do this by storing our GitHub username/email address & password in our computer so that the git software can find it easily. Follow these steps. NOTE: if you see a strange looking screen pop up, it might be VIM. See the instructions below to find out how to navigate VIM. In the your terminal copy/paste this code and replace YOUR USERNAME and EMAIL with the info you used to create your GitHub account above: git config --global user.name \"YOUR USERNAME\" then Enter git config --global user.email \"YOURemail@address.com\" If it asks you for a password this is your GitHub account password NOTE: !! make sure you REMOVE the # at the beginning of the lines where you paste this configurations in. Lines beginning with # are read as a comment in configuration files like this .gitconfig file and won't be read by the git software. Instructions to Navigate VIM Possible Step 4. VIM / VI When doing your git config you may see a more unusual window in your terminal. It will have a bunch of ~ or # along the left side. This is a built in text editor like VS Code but very stripped down. It allows you to change files and write code. For this step you'll be changing your git config file to contain your username, email. VIM has two modes insert (input text) and command (move around and do stuff). For now, we really only need insert but you'll need to know how to get in and out of the two different modes. Type I to enter insert mode and type Esc to enter command mode. You'll know which one you're in because \"insert\" will appear at the bottom of the screen when you enter insert mode. For now, navigate around the page with your arrow keys (d-pad). When you need to type in your email or something type I . You're then free to type in whatever you need. When you're finished, type esc to move back to command mode. To exit and save the file type :wq + Enter (write and quit). This simply says to the computer, \"I'm about to give you a command, write the file, then quit the program.\" If you're lost, it's totally fine. VIM is an old relic that's stuck around and become a hipster text editor but really it's there so you can always change files, no matter what! See It - gitconfig & Vim The First Terms to Know in Git GitHub is a place you can store, demonstrate and collaborate with other developers on your codebase. You can hold your own code there (which is what we'll be doing in the next class) as well as copy other people's code and build off of it in your own personal projects! Git is a version control and source code management system that developers use to manage and store their code. Git allows a code base to be updated by multiple people in a safe manner that will not affect the end users' experience. Git gives us a way to develop and fix code in development \"branches\" and then merge it into a stable and safe branch. Git is how real world development occurs. It is also how you will turn in assignments. In this way you will become very familiar with the tools you'll use in your profession. Version Control is the process of iteration from one version of software (code) to the next version of software. With each minor improvement of the software bugs may be inadvertently introduced. Using version control, developers can retroactively find when and where the bugs were introduced and more quickly remove them! A branch is a copy of the whole codebase. It acts as a code sandbox for you to work in safely without change the whole codebase. In each branch, you can work on small fixes and improvements, test them, and prove their efficacy without bugs before you merge the changes or the branch, back into the whole codebase. Additional Resources Git is usually a hard concept for new programmers to wrap their minds around. Don't worry, you will get Git by the end of this course \u2013 if not by the end of this week. But to make sure you understand it sooner, watch these videos and write down all of your questions, thoughts and epiphanies to bring into class for healthy discussion and discovery! YT, The Coding Train - What are Git and GitHub? YT, Traversy Media - Git Crash Course YT, Code Insights - Git in 20 Minutes","title":"Git & GitHub Setup"},{"location":"preCourse/gitAndGitHub/#getting-the-git-software","text":"Now that you have a GitHub Account to store your code let's get the git software so we can get the code up to GitHub.","title":"Getting the Git Software"},{"location":"preCourse/gitAndGitHub/#checklist","text":"Download & Install Git Software for Mac Download Git + xCode For for Windows download gitBash Set git configurations and navigate VIM Learn more about Git","title":"Checklist"},{"location":"preCourse/gitAndGitHub/#download-git-software","text":"To use the Git Software , we will need to get comfortable using the Command-Line Interface (aka CLI or \"terminal\"). Depending on your Operating Systems (OS) you will need to follow different instructions to access your terminal and download Git: For Window <10 Install Git Additional support: Blog, GitHub - Install git See For All Machine Users below for next steps. For Windows >10 If you have a Windows 10+ machine you can use Command Prompt YT, Programming Knowledge2 - How To Install Git on Windows Install Git Additional support: Install git See For All Machine Users below for next steps. For Mac Go to terminal Cmd + Space then type terminal + Enter Install HomeBrew - in the terminal run: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" + Enter Fix packages - in the terminal run: brew doctor + Enter Install Git - in the terminal run: brew install git + Enter You may be prompted to type in a password. This is your computer's password and will not appear as you type it for security reasons. You will be offered to install the Command Line Developer Tools (Xcode) from Apple. Confirm by clicking Install. After the installation finishes, continue installing Homebrew by hitting ENTER again. Xcode is required by Apple and may take a while to install. Please do this before class. See For All Machine Users below for next steps. For Linux Use your package manager to install the latest version of Git: sudo apt-get install git See For All Machine Users below for next steps. NOTE: There is no icon for this program, just go to your terminal/shell/commandPrompt/bash and type git + Enter","title":"Download Git Software"},{"location":"preCourse/gitAndGitHub/#git-config-for-all-machine-users","text":"Set your Git username and email. You must configure your local Git software to know where to push your work(code) to. We do this by storing our GitHub username/email address & password in our computer so that the git software can find it easily. Follow these steps. NOTE: if you see a strange looking screen pop up, it might be VIM. See the instructions below to find out how to navigate VIM. In the your terminal copy/paste this code and replace YOUR USERNAME and EMAIL with the info you used to create your GitHub account above: git config --global user.name \"YOUR USERNAME\" then Enter git config --global user.email \"YOURemail@address.com\" If it asks you for a password this is your GitHub account password NOTE: !! make sure you REMOVE the # at the beginning of the lines where you paste this configurations in. Lines beginning with # are read as a comment in configuration files like this .gitconfig file and won't be read by the git software.","title":"Git Config for All Machine Users"},{"location":"preCourse/gitAndGitHub/#instructions-to-navigate-vim","text":"Possible Step 4. VIM / VI When doing your git config you may see a more unusual window in your terminal. It will have a bunch of ~ or # along the left side. This is a built in text editor like VS Code but very stripped down. It allows you to change files and write code. For this step you'll be changing your git config file to contain your username, email. VIM has two modes insert (input text) and command (move around and do stuff). For now, we really only need insert but you'll need to know how to get in and out of the two different modes. Type I to enter insert mode and type Esc to enter command mode. You'll know which one you're in because \"insert\" will appear at the bottom of the screen when you enter insert mode. For now, navigate around the page with your arrow keys (d-pad). When you need to type in your email or something type I . You're then free to type in whatever you need. When you're finished, type esc to move back to command mode. To exit and save the file type :wq + Enter (write and quit). This simply says to the computer, \"I'm about to give you a command, write the file, then quit the program.\" If you're lost, it's totally fine. VIM is an old relic that's stuck around and become a hipster text editor but really it's there so you can always change files, no matter what!","title":"Instructions to Navigate VIM"},{"location":"preCourse/gitAndGitHub/#see-it-gitconfig-vim","text":"","title":"See It - gitconfig &amp; Vim"},{"location":"preCourse/gitAndGitHub/#the-first-terms-to-know-in-git","text":"GitHub is a place you can store, demonstrate and collaborate with other developers on your codebase. You can hold your own code there (which is what we'll be doing in the next class) as well as copy other people's code and build off of it in your own personal projects! Git is a version control and source code management system that developers use to manage and store their code. Git allows a code base to be updated by multiple people in a safe manner that will not affect the end users' experience. Git gives us a way to develop and fix code in development \"branches\" and then merge it into a stable and safe branch. Git is how real world development occurs. It is also how you will turn in assignments. In this way you will become very familiar with the tools you'll use in your profession. Version Control is the process of iteration from one version of software (code) to the next version of software. With each minor improvement of the software bugs may be inadvertently introduced. Using version control, developers can retroactively find when and where the bugs were introduced and more quickly remove them! A branch is a copy of the whole codebase. It acts as a code sandbox for you to work in safely without change the whole codebase. In each branch, you can work on small fixes and improvements, test them, and prove their efficacy without bugs before you merge the changes or the branch, back into the whole codebase.","title":"The First Terms to Know in Git"},{"location":"preCourse/gitAndGitHub/#additional-resources","text":"Git is usually a hard concept for new programmers to wrap their minds around. Don't worry, you will get Git by the end of this course \u2013 if not by the end of this week. But to make sure you understand it sooner, watch these videos and write down all of your questions, thoughts and epiphanies to bring into class for healthy discussion and discovery! YT, The Coding Train - What are Git and GitHub? YT, Traversy Media - Git Crash Course YT, Code Insights - Git in 20 Minutes","title":"Additional Resources"},{"location":"preCourse/gitBasics/","text":"Git Basics Overview We have our machines set up and our GitHub account created. Now what? Git is usually a hard concept for new programmers to wrap their minds around. Don't worry, you will get Git by the end of this course \u2013 if not by the end of this week. But to make sure you understand it sooner, let's go over some basic concepts and commands. Be sure to write down all of your questions, thoughts, and epiphanies to bring into class for healthy discussion and discovery! Moving Around the Terminal Command Function pwd show the current directory (folder) ls list files in the current directory cd <directoryname> change to a new directory mkdir <directoryname> make a new directory in the current directory touch <filename> create a new file in the current directory Git Commands Command Function git clone <repoURL> clone a repo into a new directory git status show the status of the working tree git add <file(s)> add file(s) to be staged for commit git add -A add all files to be staged for commit git commit -m \"description of changes\" commit changes to staged for push git push push changes to the remote repo Additional Resources YT, Paul Programming - What is Git? YT, Code Insights - Learn Git in 20 mins YT, Traversy Media - Git Crash Course","title":"Git Basics"},{"location":"preCourse/gitBasics/#git-basics","text":"","title":"Git Basics"},{"location":"preCourse/gitBasics/#overview","text":"We have our machines set up and our GitHub account created. Now what? Git is usually a hard concept for new programmers to wrap their minds around. Don't worry, you will get Git by the end of this course \u2013 if not by the end of this week. But to make sure you understand it sooner, let's go over some basic concepts and commands. Be sure to write down all of your questions, thoughts, and epiphanies to bring into class for healthy discussion and discovery!","title":"Overview"},{"location":"preCourse/gitBasics/#moving-around-the-terminal","text":"Command Function pwd show the current directory (folder) ls list files in the current directory cd <directoryname> change to a new directory mkdir <directoryname> make a new directory in the current directory touch <filename> create a new file in the current directory","title":"Moving Around the Terminal"},{"location":"preCourse/gitBasics/#git-commands","text":"Command Function git clone <repoURL> clone a repo into a new directory git status show the status of the working tree git add <file(s)> add file(s) to be staged for commit git add -A add all files to be staged for commit git commit -m \"description of changes\" commit changes to staged for push git push push changes to the remote repo","title":"Git Commands"},{"location":"preCourse/gitBasics/#additional-resources","text":"YT, Paul Programming - What is Git? YT, Code Insights - Learn Git in 20 mins YT, Traversy Media - Git Crash Course","title":"Additional Resources"},{"location":"preCourse/gitOverhere/","text":"Managing Versions of Code with Git & GitHub Remember, in a Flipped Classroom you will study and consume your \"lecture\" before you come to class, so that you can take advantage of your time in class to practice and apply concepts with the guidance of your instructor and support of your classmates. With the guidance of your instructor you will be able to confidently make mistakes, run into errors, and find bugs in your code. But for all of this to happen, you must make sure that you complete your pre-homework before each class. Let's begin: On the first day of class we will hosting your the portfolio webpage that you'll soon build. To do this, you will need the Git software to move the files from your local machine ( computer ) to a remote repository on GitHub from where it will be hosted live on the internet for anyone that has the URL to see! Checklist Overview of Git & GitHub Create GitHub Account Overview - Version Control with GitHub Read It - Git Software With all software, including the desktop and mobile apps that you use every day, developers are always making changes and updates. Think of all the times you've been asked to update to the latest version of an app on your phone. The reason the company asks you to do this is because the team of developers have fixed bugs, improved efficiency, or add/removed features. These changes are happening all the time, all day long across an entire team of developers but are only released every so often to users. To manage all of these changes, a system called version control was developed. Of all the version control softwares available, Git is by far the most popular \u2013 and it's free! As you read above, using a version control software like Git is incredibly important as a developer. Version control allows for multiple developers to work on the same codebase at the same time, revert selected files back to a previous state, revert an entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. This helps developers work more efficiently, effectively, and responsibly when editing code. Read It - GitHub GitHub is a web application that works with git . It is a place we can store code to share with others and collaborate on projects simultaneously or asynchronously. In class and in your job, you will use GitHub every day to: store your code online (in the cloud ) host and share your projects in this class share your code's Pull Requests (PRs) with your instructor or team receive comments on your code from your instructor or team We're going to start by creating an online account on GitHub.com . After setting up your account we will walk through the steps of downloading the git software and learning a few of its many commands. Before getting started, be aware that Git works in what is called the \"Command-Line Interface\". You probably won't feel comfortable with this interface yet but you soon will be. I promise! See It - How Git Works Create a GitHub Account Go to GitHub and create an account. Be sure to use a professional name like firstNameLastName for your username It will be the first thing on your resume for potential employers to read!!!!!! IMPORTANT Write down your username and password... We will be using it again soon.","title":"GitHub Overview"},{"location":"preCourse/gitOverhere/#managing-versions-of-code-with-git-github","text":"Remember, in a Flipped Classroom you will study and consume your \"lecture\" before you come to class, so that you can take advantage of your time in class to practice and apply concepts with the guidance of your instructor and support of your classmates. With the guidance of your instructor you will be able to confidently make mistakes, run into errors, and find bugs in your code. But for all of this to happen, you must make sure that you complete your pre-homework before each class. Let's begin: On the first day of class we will hosting your the portfolio webpage that you'll soon build. To do this, you will need the Git software to move the files from your local machine ( computer ) to a remote repository on GitHub from where it will be hosted live on the internet for anyone that has the URL to see!","title":"Managing Versions of Code with Git &amp; GitHub"},{"location":"preCourse/gitOverhere/#checklist","text":"Overview of Git & GitHub Create GitHub Account","title":"Checklist"},{"location":"preCourse/gitOverhere/#overview-version-control-with-github","text":"","title":"Overview - Version Control with GitHub"},{"location":"preCourse/gitOverhere/#read-it-git-software","text":"With all software, including the desktop and mobile apps that you use every day, developers are always making changes and updates. Think of all the times you've been asked to update to the latest version of an app on your phone. The reason the company asks you to do this is because the team of developers have fixed bugs, improved efficiency, or add/removed features. These changes are happening all the time, all day long across an entire team of developers but are only released every so often to users. To manage all of these changes, a system called version control was developed. Of all the version control softwares available, Git is by far the most popular \u2013 and it's free! As you read above, using a version control software like Git is incredibly important as a developer. Version control allows for multiple developers to work on the same codebase at the same time, revert selected files back to a previous state, revert an entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. This helps developers work more efficiently, effectively, and responsibly when editing code.","title":"Read It - Git Software"},{"location":"preCourse/gitOverhere/#read-it-github","text":"GitHub is a web application that works with git . It is a place we can store code to share with others and collaborate on projects simultaneously or asynchronously. In class and in your job, you will use GitHub every day to: store your code online (in the cloud ) host and share your projects in this class share your code's Pull Requests (PRs) with your instructor or team receive comments on your code from your instructor or team We're going to start by creating an online account on GitHub.com . After setting up your account we will walk through the steps of downloading the git software and learning a few of its many commands. Before getting started, be aware that Git works in what is called the \"Command-Line Interface\". You probably won't feel comfortable with this interface yet but you soon will be. I promise!","title":"Read It - GitHub"},{"location":"preCourse/gitOverhere/#see-it-how-git-works","text":"","title":"See It - How Git Works"},{"location":"preCourse/gitOverhere/#create-a-github-account","text":"Go to GitHub and create an account. Be sure to use a professional name like firstNameLastName for your username It will be the first thing on your resume for potential employers to read!!!!!! IMPORTANT Write down your username and password... We will be using it again soon.","title":"Create a GitHub Account"},{"location":"preCourse/htmlAttributes/","text":"HTML Attributes When we say attributes in HTML we're talking about the bits of code inside the opening tag of the element like id=\"box\" , input=\"submit\" , href=\"https://website.com\" , etc. These bits of code store useful values inside what we call properties on the Element object. These values communicate crucial information to the browser about what it's supposed to do with the HTML, CSS, and JS code it receives. While we will interchangeably call this bits of information attributes and properties -know that we're talking about the same thing. Class The HTML class= attribute is used to specify a class for an HTML element. Unlike the id attribute, multiple HTML elements can share the same class name. USING THE CLASS ATTRIBUTE The class attribute is often used on multiple HTML elements to point styling rules to all of them. In JavaScript class names can be used to access and manipulate only elements with the specific class name. In the following example we have three <div> elements with a class attribute with the value of \"city\" . All of the three <div> elements will be styled equally according to the .city style definition in the CSS: the HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 <!DOCTYPE html> < html > < body > < div class = \"city\" > < h2 > London </ h2 > < p > London is the capital of England. </ p > </ div > < div class = \"city\" > < h2 > Paris </ h2 > < p > Paris is the capital of France. </ p > </ div > < div class = \"city\" > < h2 > Tokyo </ h2 > < p > Tokyo is the capital of Japan. </ p > </ div > </ body > </ html > the CSS 1 2 3 4 5 6 7 . city { background-color : tomato ; color : white ; border : 2 px solid black ; margin : 20 px ; padding : 20 px ; } HTML Burger Here is an exercise for you to interact with and to continue to help with your learning. Make the burger your own, you can click the open Sandbox button and interact with it in the editor and make your own unique burger.","title":"HTML Attributes"},{"location":"preCourse/htmlAttributes/#html-attributes","text":"When we say attributes in HTML we're talking about the bits of code inside the opening tag of the element like id=\"box\" , input=\"submit\" , href=\"https://website.com\" , etc. These bits of code store useful values inside what we call properties on the Element object. These values communicate crucial information to the browser about what it's supposed to do with the HTML, CSS, and JS code it receives. While we will interchangeably call this bits of information attributes and properties -know that we're talking about the same thing.","title":"HTML Attributes"},{"location":"preCourse/htmlAttributes/#class","text":"The HTML class= attribute is used to specify a class for an HTML element. Unlike the id attribute, multiple HTML elements can share the same class name.","title":"Class"},{"location":"preCourse/htmlAttributes/#using-the-class-attribute","text":"The class attribute is often used on multiple HTML elements to point styling rules to all of them. In JavaScript class names can be used to access and manipulate only elements with the specific class name. In the following example we have three <div> elements with a class attribute with the value of \"city\" . All of the three <div> elements will be styled equally according to the .city style definition in the CSS: the HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 <!DOCTYPE html> < html > < body > < div class = \"city\" > < h2 > London </ h2 > < p > London is the capital of England. </ p > </ div > < div class = \"city\" > < h2 > Paris </ h2 > < p > Paris is the capital of France. </ p > </ div > < div class = \"city\" > < h2 > Tokyo </ h2 > < p > Tokyo is the capital of Japan. </ p > </ div > </ body > </ html > the CSS 1 2 3 4 5 6 7 . city { background-color : tomato ; color : white ; border : 2 px solid black ; margin : 20 px ; padding : 20 px ; }","title":"USING THE CLASS ATTRIBUTE"},{"location":"preCourse/htmlAttributes/#html-burger","text":"Here is an exercise for you to interact with and to continue to help with your learning. Make the burger your own, you can click the open Sandbox button and interact with it in the editor and make your own unique burger.","title":"HTML Burger"},{"location":"preCourse/htmlTags/","text":"HTML Project Questions for Discussion BEFORE WE GET STARTED ARE THERE ANY QUESTIONS ABOUT THE HOMEWORK AND CLASS MATERIAL FROM DAY 1? Purpose: To introduce you to the concepts of web development with a fundamental understanding of what HTML is. Objective: By the end of this lesson, you will be able to identify HTML as a language, as well as elements and tags with the language. Exercise: Quizlet Game, HTML Burger WHAT IS HYPER-TEXT MARKUP LANGUAGE (HTML)? HTML is the standard mark-up language for creating web pages. The following are the main points about HTML: HTML stands for HyperText Markup Language HTML describes the structure of a web page An HTML document consists of a series of elements HTML elements tell the browser how to display the content HTML elements are represented by tags HTML tags label pieces of content such as \u201cheader\u201d, \u201cparagraph\u201d, \u201clist\u201d, and so on Browsers do not display the HTML tags, but use them to render the content of the page An HTML Element is defined by an Opening tag , some content, and a Closing tag : 1 < tagname > Content goes here... </ tagname > The HTML element is everything from the start tag to the end tag: 1 2 < h1 > My First Heading </ h1 > < p > My first paragraph. </ p > | Start tag Element content End tag | Close Tag | | - | - | - | | <h1> | My First Heading | </h1> | | <p> | My first paragraph | <p> | | <br> | none | none | NOTE: Some HTML elements have no content (like the <br> element). These elements are called empty elements or void elements because they are void of content. Empty elements do not have an end tag! Nesting HTML elements can be nested (this means that elements can contain other elements). All HTML documents consist of nested HTML elements. The following example contains four HTML elements ( <html> , <body> , <h1> and <p> ): HTML Nested Elements Example 1 2 3 4 5 6 7 8 9 <!DOCTYPE html> < html > < body > < h1 > My First Heading </ h1 > < p > My first paragraph. </ p > </ body > </ html > The <html> element is the root element and it defines the whole HTML document. It has a start tag <html> and an end tag </html> . Then, inside the <html> element there is a <body> element: 1 2 3 4 5 6 < body > < h1 > My First Heading </ h1 > < p > My first paragraph. </ p > </ body > The <body> element defines the document's body. It has a start tag <body> and an end tag </body> . Then, inside the <body> element there are two other elements: <h1> and <p> . These could be called Child Elements of the Body. Which means the Body element could be called a Parent Element 1 2 < h1 > My First Heading </ h1 > < p > My first paragraph. </ p > The <h1> element defines a heading. It has a start tag <h1> and an end tag </h1> : 1 < h1 > My First Heading </ h1 > The <p> element defines a paragraph. It has a start tag <p> and an end tag : 1 < p > My first paragraph. </ p > Some HTML elements will display correctly, even if you forget the end tag. This is because the language and browsers were built to handle a little developer-error... 1 2 3 4 5 6 7 8 9 10 EDIT Set Access Duplicate Move Delete < html > < body > < p > This is a paragraph < p > This is a paragraph </ body > </ html > However, never rely on this! Unexpected results and errors may occur if you forget the end tag! EMPTY HTML ELEMENTS HTML elements with no content are called empty elements. The <br> tag defines a line break, and is an empty element without a closing tag. 1 < p > This is a < br > paragraph with a line break. </ p > Not Case Sensitive HTML tags are not case sensitive: <P> means the same as <p> . The HTML standard does not require lowercase tags, but W3C recommends lowercase in HTML, and demands lowercase for stricter document types like XHTML. Tag Description <html> Defines the root of an HTML document <body> Defines the document's body <h1> through <h6> Defines HTML headings","title":"HTML Tags"},{"location":"preCourse/htmlTags/#html-project","text":"","title":"HTML Project"},{"location":"preCourse/htmlTags/#questions-for-discussion","text":"BEFORE WE GET STARTED ARE THERE ANY QUESTIONS ABOUT THE HOMEWORK AND CLASS MATERIAL FROM DAY 1? Purpose: To introduce you to the concepts of web development with a fundamental understanding of what HTML is. Objective: By the end of this lesson, you will be able to identify HTML as a language, as well as elements and tags with the language. Exercise: Quizlet Game, HTML Burger","title":"Questions for Discussion"},{"location":"preCourse/htmlTags/#what-is-hyper-text-markup-language-html","text":"HTML is the standard mark-up language for creating web pages. The following are the main points about HTML: HTML stands for HyperText Markup Language HTML describes the structure of a web page An HTML document consists of a series of elements HTML elements tell the browser how to display the content HTML elements are represented by tags HTML tags label pieces of content such as \u201cheader\u201d, \u201cparagraph\u201d, \u201clist\u201d, and so on Browsers do not display the HTML tags, but use them to render the content of the page An HTML Element is defined by an Opening tag , some content, and a Closing tag : 1 < tagname > Content goes here... </ tagname > The HTML element is everything from the start tag to the end tag: 1 2 < h1 > My First Heading </ h1 > < p > My first paragraph. </ p > | Start tag Element content End tag | Close Tag | | - | - | - | | <h1> | My First Heading | </h1> | | <p> | My first paragraph | <p> | | <br> | none | none | NOTE: Some HTML elements have no content (like the <br> element). These elements are called empty elements or void elements because they are void of content. Empty elements do not have an end tag!","title":"WHAT IS HYPER-TEXT MARKUP LANGUAGE (HTML)?"},{"location":"preCourse/htmlTags/#nesting","text":"HTML elements can be nested (this means that elements can contain other elements). All HTML documents consist of nested HTML elements. The following example contains four HTML elements ( <html> , <body> , <h1> and <p> ): HTML Nested Elements Example 1 2 3 4 5 6 7 8 9 <!DOCTYPE html> < html > < body > < h1 > My First Heading </ h1 > < p > My first paragraph. </ p > </ body > </ html > The <html> element is the root element and it defines the whole HTML document. It has a start tag <html> and an end tag </html> . Then, inside the <html> element there is a <body> element: 1 2 3 4 5 6 < body > < h1 > My First Heading </ h1 > < p > My first paragraph. </ p > </ body > The <body> element defines the document's body. It has a start tag <body> and an end tag </body> . Then, inside the <body> element there are two other elements: <h1> and <p> . These could be called Child Elements of the Body. Which means the Body element could be called a Parent Element 1 2 < h1 > My First Heading </ h1 > < p > My first paragraph. </ p > The <h1> element defines a heading. It has a start tag <h1> and an end tag </h1> : 1 < h1 > My First Heading </ h1 > The <p> element defines a paragraph. It has a start tag <p> and an end tag : 1 < p > My first paragraph. </ p > Some HTML elements will display correctly, even if you forget the end tag. This is because the language and browsers were built to handle a little developer-error... 1 2 3 4 5 6 7 8 9 10 EDIT Set Access Duplicate Move Delete < html > < body > < p > This is a paragraph < p > This is a paragraph </ body > </ html > However, never rely on this! Unexpected results and errors may occur if you forget the end tag!","title":"Nesting"},{"location":"preCourse/htmlTags/#empty-html-elements","text":"HTML elements with no content are called empty elements. The <br> tag defines a line break, and is an empty element without a closing tag. 1 < p > This is a < br > paragraph with a line break. </ p >","title":"EMPTY HTML ELEMENTS"},{"location":"preCourse/htmlTags/#not-case-sensitive","text":"HTML tags are not case sensitive: <P> means the same as <p> . The HTML standard does not require lowercase tags, but W3C recommends lowercase in HTML, and demands lowercase for stricter document types like XHTML. Tag Description <html> Defines the root of an HTML document <body> Defines the document's body <h1> through <h6> Defines HTML headings","title":"Not Case Sensitive"},{"location":"preCourse/keyboardQuiz/","text":"Keyboard Quiz Play the quizlet game to show your mastery of your keyboard characters. When ready press the start game button and match the definition with the item in the code editor screen!!","title":"Keyboard Quiz"},{"location":"preCourse/keyboardQuiz/#keyboard-quiz","text":"Play the quizlet game to show your mastery of your keyboard characters. When ready press the start game button and match the definition with the item in the code editor screen!!","title":"Keyboard Quiz"},{"location":"preCourse/letsWriteSomeCode/","text":"Let's Write Some Code HTML is for Content We use HTML to insert our content into the page. Text, images, video, forms, PDFs, etc... are all created by the HTML tags we use. Some tags like Header , Main , and Footer are used to group together multiple pieces of content. Let's create a Main tag to hold all of the content. Be sure to follow along in CodePen. It looks like this: 1 2 3 < main id = \"box\" > </ main > Our <main> opening tag looks a little different because we added an id= property to it. ID s are like labels we put on our HTML tags. We can use these labels in CSS and JavaScript to 'select and affect' the contents in the HTML later. Inside the Main tag, let's create an H1 tag and give the page a title with it: 1 2 3 < main id = \"box\" > < h1 > SurfCity.io - Coming Soon </ h1 > </ main > The title looks good, so now we need to create the structure for our countdown clock. We are going to do that by creating a series of four Span tags. The Span tag is usually used to wrap around bits of text that we want to change using CSS or JavaScript. In this case we are going to use JavaScript to make the countdown timer, and we need to update the contents of these span tags once every second. Notice the new ID s we are adding. It's important to note that IDs like these have to be typed exactly as we show them here. Typos, or making the first letter upper-case instead of lower-case will confuse the browser and it will not work. the HTML 1 2 3 4 5 6 7 8 < main id = \"box\" > < h1 > SurfCity.io - Coming Soon </ h1 > < span id = \"days\" > 0 days </ span > < span id = \"hours\" > 0 hours </ span > < span id = \"minutes\" > 0 minutes </ span > < span id = \"seconds\" > 0 seconds </ span > </ main > the Result Now we're going to add two more tags. A br tag which adds a line-break to force the following content onto the next line, and a p tag. The p stands for paragraph and is designed to hold multiple lines of text. We will use this space to ask if our users would like to join the mailing list. the HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 < main id = \"box\" > < h1 > SurfCity.io - Coming Soon </ h1 > < span id = \"days\" > 0 days </ span > < span id = \"hours\" > 0 hours </ span > < span id = \"minutes\" > 0 minutes </ span > < span id = \"seconds\" > 0 seconds </ span > < br > < p > Would you like to be notified when we go live? </ p > </ main > Now we come to the Form tag. Every time you've given your email address, logged in to an account, bought something with a credit card, or filled out a survey online, you've done it in a Form tag. Form tags are how we accept information from our users and they are critically important to most web sites. The form is just a content container though, and inside the container we can design it to look any way we like, but in order to accept data from the user, we need to add at least one Input tag. the HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 < main id = \"box\" > < h1 > SurfCity.io - Coming Soon </ h1 > < span id = \"days\" > 0 days </ span > < span id = \"hours\" > 0 hours </ span > < span id = \"minutes\" > 0 minutes </ span > < span id = \"seconds\" > 0 seconds </ span > < br > < p > Would you like to be notified when we go live? </ p > < form > Email: </ form > </ main > the Result There are a variety of different types of data that a form can accept, and the tag we use to do it is called an Input tag. Inside the Input tag is a property called type= . Changing the type property changes what kind of data the input accepts, and we need the user to give us an email, so we will use type=\"text\" . The second input is a little different. It has its type property/attribute set to submit . This will create a button input element that will be used to trigger a submission function on the Form Element it's inside. Notice: we also give Input elements a name= property. This gives us a way to access the value stored in that input via thing called a key . This input's key will be email and its value will be whatever the user inputs. You'll here the term key:value pairs ; this describes the relationship of these pieces of data. the HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 < main id = \"box\" > < h1 > SurfCity.io - Coming Soon </ h1 > < span id = \"days\" > 0 days </ span > < span id = \"hours\" > 0 hours </ span > < span id = \"minutes\" > 0 minutes </ span > < span id = \"seconds\" > 0 seconds </ span > < br > < p > Would you like to be notified when we go live? </ p > < form > Email: < input type = \"text\" name = \"email\" > < input type = \"submit\" name = \"submit\" value = \"Submit\" > </ form > </ main > the Result Ok, we're almost done with the HTML, but our friend, the client, just called to say we need to include links to their social media... He doesn't have the links yet because some of the accounts are still being created, but that's OK. We can include an image for now and add the link later when it's available. The Img tag just needs the src= property filled in with a URL so that it knows where find the image. That's it! We're done with the HTML. It still looks a little plain...let's learn how to use CSS to transform the look of it!! the HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 < main id = \"box\" > < h1 > SurfCity.io - Coming Soon </ h1 > < span id = \"days\" > 0 days </ span > < span id = \"hours\" > 0 hours </ span > < span id = \"minutes\" > 0 minutes </ span > < span id = \"seconds\" > 0 seconds </ span > < br > < p > Would you like to be notified when we go live? </ p > < form > Email: < input type = \"text\" name = \"email\" > < input type = \"submit\" name = \"submit\" value = \"Submit\" > </ form > </ main > < div id = \"social\" > < img src = \"https://assets.codepen.io/1240556/social.png\" /> </ div > the Result","title":"Let's Write Some Code"},{"location":"preCourse/letsWriteSomeCode/#lets-write-some-code","text":"","title":"Let's Write Some Code"},{"location":"preCourse/letsWriteSomeCode/#html-is-for-content","text":"We use HTML to insert our content into the page. Text, images, video, forms, PDFs, etc... are all created by the HTML tags we use. Some tags like Header , Main , and Footer are used to group together multiple pieces of content. Let's create a Main tag to hold all of the content. Be sure to follow along in CodePen. It looks like this: 1 2 3 < main id = \"box\" > </ main > Our <main> opening tag looks a little different because we added an id= property to it. ID s are like labels we put on our HTML tags. We can use these labels in CSS and JavaScript to 'select and affect' the contents in the HTML later. Inside the Main tag, let's create an H1 tag and give the page a title with it: 1 2 3 < main id = \"box\" > < h1 > SurfCity.io - Coming Soon </ h1 > </ main > The title looks good, so now we need to create the structure for our countdown clock. We are going to do that by creating a series of four Span tags. The Span tag is usually used to wrap around bits of text that we want to change using CSS or JavaScript. In this case we are going to use JavaScript to make the countdown timer, and we need to update the contents of these span tags once every second. Notice the new ID s we are adding. It's important to note that IDs like these have to be typed exactly as we show them here. Typos, or making the first letter upper-case instead of lower-case will confuse the browser and it will not work. the HTML 1 2 3 4 5 6 7 8 < main id = \"box\" > < h1 > SurfCity.io - Coming Soon </ h1 > < span id = \"days\" > 0 days </ span > < span id = \"hours\" > 0 hours </ span > < span id = \"minutes\" > 0 minutes </ span > < span id = \"seconds\" > 0 seconds </ span > </ main > the Result Now we're going to add two more tags. A br tag which adds a line-break to force the following content onto the next line, and a p tag. The p stands for paragraph and is designed to hold multiple lines of text. We will use this space to ask if our users would like to join the mailing list. the HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 < main id = \"box\" > < h1 > SurfCity.io - Coming Soon </ h1 > < span id = \"days\" > 0 days </ span > < span id = \"hours\" > 0 hours </ span > < span id = \"minutes\" > 0 minutes </ span > < span id = \"seconds\" > 0 seconds </ span > < br > < p > Would you like to be notified when we go live? </ p > </ main > Now we come to the Form tag. Every time you've given your email address, logged in to an account, bought something with a credit card, or filled out a survey online, you've done it in a Form tag. Form tags are how we accept information from our users and they are critically important to most web sites. The form is just a content container though, and inside the container we can design it to look any way we like, but in order to accept data from the user, we need to add at least one Input tag. the HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 < main id = \"box\" > < h1 > SurfCity.io - Coming Soon </ h1 > < span id = \"days\" > 0 days </ span > < span id = \"hours\" > 0 hours </ span > < span id = \"minutes\" > 0 minutes </ span > < span id = \"seconds\" > 0 seconds </ span > < br > < p > Would you like to be notified when we go live? </ p > < form > Email: </ form > </ main > the Result There are a variety of different types of data that a form can accept, and the tag we use to do it is called an Input tag. Inside the Input tag is a property called type= . Changing the type property changes what kind of data the input accepts, and we need the user to give us an email, so we will use type=\"text\" . The second input is a little different. It has its type property/attribute set to submit . This will create a button input element that will be used to trigger a submission function on the Form Element it's inside. Notice: we also give Input elements a name= property. This gives us a way to access the value stored in that input via thing called a key . This input's key will be email and its value will be whatever the user inputs. You'll here the term key:value pairs ; this describes the relationship of these pieces of data. the HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 < main id = \"box\" > < h1 > SurfCity.io - Coming Soon </ h1 > < span id = \"days\" > 0 days </ span > < span id = \"hours\" > 0 hours </ span > < span id = \"minutes\" > 0 minutes </ span > < span id = \"seconds\" > 0 seconds </ span > < br > < p > Would you like to be notified when we go live? </ p > < form > Email: < input type = \"text\" name = \"email\" > < input type = \"submit\" name = \"submit\" value = \"Submit\" > </ form > </ main > the Result Ok, we're almost done with the HTML, but our friend, the client, just called to say we need to include links to their social media... He doesn't have the links yet because some of the accounts are still being created, but that's OK. We can include an image for now and add the link later when it's available. The Img tag just needs the src= property filled in with a URL so that it knows where find the image. That's it! We're done with the HTML. It still looks a little plain...let's learn how to use CSS to transform the look of it!! the HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 < main id = \"box\" > < h1 > SurfCity.io - Coming Soon </ h1 > < span id = \"days\" > 0 days </ span > < span id = \"hours\" > 0 hours </ span > < span id = \"minutes\" > 0 minutes </ span > < span id = \"seconds\" > 0 seconds </ span > < br > < p > Would you like to be notified when we go live? </ p > < form > Email: < input type = \"text\" name = \"email\" > < input type = \"submit\" name = \"submit\" value = \"Submit\" > </ form > </ main > < div id = \"social\" > < img src = \"https://assets.codepen.io/1240556/social.png\" /> </ div > the Result","title":"HTML is for Content"},{"location":"preCourse/moreCSStechniques/","text":"More CSS Techniques Objective : By the end of this lesson, the student will use W3Schools as a resource to apply additional styles to HTML elements using CSS rules. Assignment : CSS Advanced Practice CodeSandbox Review and Recap Previously, we covered how to write CSS rules to add some style to our webpage. Remind yourself of the 3 parts of a CSS rule: For today's activity, we will explore CSS a little deeper into the different properties that we could change about an object. You will use W3Schools to help you complete the assignment. Hint: You may have to use previous lesson material to help you. Use your resources to complete the assignments. Targeting Multiple Selectors If you want to apply the same style to multiple HTML elements, using a comma , will allow this to happen. Applying color values to both the h3 and p tags: 1 2 3 4 h3 , p { color : blue ; font-family : Arial , Helvetica , san-serif ; } This will make all the H3 and the Paragraph Elements blue and change the font to Helvetica. Color Codes There are different ways to assign a color value to an element. The three most common color representation models are: By Color Name You can use the names of some colors. This option limits the choice that you have for colors because the color has to have a Name: color: blue; For all other shades that don't necessarily have names, we use a code: By Hex Code Hex code is a code represented by combination of letters and numbers ranging between 00-FF : color: #0000ff; By Red, Green, Blue values (called RGB values) All colors on a computer are different combinations of values of red, green, and blue. color: rgb(0, 0, 255); What's really happening here is that we call a function called rgb() and pass it arguments in the r ed, g reen, b lue order and it returns the color on the screen....! All of these codes are for the exact same color! Tools for Colors There are tools like: ColorPick EyeDropper that can help you choose a color off your screen and it will give you the code for you to copy/paste. Color Picker the provides a color palette to choose colors and their codes from. Scheme Color provides you with pre-made color schemes. Mycolor Space that helps you create a well designed scheme of colors around one color. Adobe Color Wheel where you can create a custom color scheme for any project. Color Book Value Converter will convert any color into any code you need! Practice It Fork the following CodeSandbox . You will have to create and link your CSS stylesheet. (Hint: Use your resources to remind yourself how to do this) Follow the instructions in the CodeSandbox to style the HTML elements. If you don't know how to do something right away, don't just sit - S.A.T. !! S earch for the answer in your textbook or Google, A sk your classmates and/or teacher, and when you find it: T each your solution. Someone else may have the same question. Know Your Docs Be sure to reference the official documentation on CSS on W3Schools Tutorials. Documentation makes software useful. All good software comes with documentation so new developers can pick it up, learn quickly, apply, and even change it if needed. W3S Docs - CSS Selectors Questions for Discussion What is a selector? What are the different ways to assign a color value to an element? How do you make sure that the HTML file and CSS file are linked together? Can you change more than one property in a declaration block? Terms to Know Take a look at these terms. If you don't know or can't describe any of them, take some time to teach yourself. You're a developer, which means you're also learning to develop yourself. CSS - \"Cascading Style Sheets\" is a Rule-based language that is used to style the HTML. Declaration - A statement that shows the property and value that is changed from its default value. Selector - Part of the CSS Rule that shows the element selected to have styles applied. There are many more selector techniques that will be covered more in the course. Property - A specific style you are trying to add/change about the element selected. Value - The chosen option for the property. 1 2 3 4 p { color : red ; text-align : center ; } p is the selector color and text-align are properties red and center are values for the properties. (Note: there are other possible values for each property) Link - To link your stylesheet to your HTML you will need to put the following line of code in the <head> section of your HTML file. <link rel=\"stylesheet\" href=\"styles.css\">","title":"Day Three Homework"},{"location":"preCourse/moreCSStechniques/#more-css-techniques","text":"Objective : By the end of this lesson, the student will use W3Schools as a resource to apply additional styles to HTML elements using CSS rules. Assignment : CSS Advanced Practice CodeSandbox","title":"More CSS Techniques"},{"location":"preCourse/moreCSStechniques/#review-and-recap","text":"Previously, we covered how to write CSS rules to add some style to our webpage. Remind yourself of the 3 parts of a CSS rule: For today's activity, we will explore CSS a little deeper into the different properties that we could change about an object. You will use W3Schools to help you complete the assignment. Hint: You may have to use previous lesson material to help you. Use your resources to complete the assignments.","title":"Review and Recap"},{"location":"preCourse/moreCSStechniques/#targeting-multiple-selectors","text":"If you want to apply the same style to multiple HTML elements, using a comma , will allow this to happen. Applying color values to both the h3 and p tags: 1 2 3 4 h3 , p { color : blue ; font-family : Arial , Helvetica , san-serif ; } This will make all the H3 and the Paragraph Elements blue and change the font to Helvetica.","title":"Targeting Multiple Selectors"},{"location":"preCourse/moreCSStechniques/#color-codes","text":"There are different ways to assign a color value to an element. The three most common color representation models are:","title":"Color Codes"},{"location":"preCourse/moreCSStechniques/#by-color-name","text":"You can use the names of some colors. This option limits the choice that you have for colors because the color has to have a Name: color: blue; For all other shades that don't necessarily have names, we use a code:","title":"By Color Name"},{"location":"preCourse/moreCSStechniques/#by-hex-code","text":"Hex code is a code represented by combination of letters and numbers ranging between 00-FF : color: #0000ff;","title":"By Hex Code"},{"location":"preCourse/moreCSStechniques/#by-red-green-blue-values-called-rgb-values","text":"All colors on a computer are different combinations of values of red, green, and blue. color: rgb(0, 0, 255); What's really happening here is that we call a function called rgb() and pass it arguments in the r ed, g reen, b lue order and it returns the color on the screen....! All of these codes are for the exact same color!","title":"By Red, Green, Blue values (called RGB values)"},{"location":"preCourse/moreCSStechniques/#tools-for-colors","text":"There are tools like: ColorPick EyeDropper that can help you choose a color off your screen and it will give you the code for you to copy/paste. Color Picker the provides a color palette to choose colors and their codes from. Scheme Color provides you with pre-made color schemes. Mycolor Space that helps you create a well designed scheme of colors around one color. Adobe Color Wheel where you can create a custom color scheme for any project. Color Book Value Converter will convert any color into any code you need!","title":"Tools for Colors"},{"location":"preCourse/moreCSStechniques/#practice-it","text":"Fork the following CodeSandbox . You will have to create and link your CSS stylesheet. (Hint: Use your resources to remind yourself how to do this) Follow the instructions in the CodeSandbox to style the HTML elements. If you don't know how to do something right away, don't just sit - S.A.T. !! S earch for the answer in your textbook or Google, A sk your classmates and/or teacher, and when you find it: T each your solution. Someone else may have the same question.","title":"Practice It"},{"location":"preCourse/moreCSStechniques/#know-your-docs","text":"Be sure to reference the official documentation on CSS on W3Schools Tutorials. Documentation makes software useful. All good software comes with documentation so new developers can pick it up, learn quickly, apply, and even change it if needed. W3S Docs - CSS Selectors","title":"Know Your Docs"},{"location":"preCourse/moreCSStechniques/#questions-for-discussion","text":"What is a selector? What are the different ways to assign a color value to an element? How do you make sure that the HTML file and CSS file are linked together? Can you change more than one property in a declaration block?","title":"Questions for Discussion"},{"location":"preCourse/moreCSStechniques/#terms-to-know","text":"Take a look at these terms. If you don't know or can't describe any of them, take some time to teach yourself. You're a developer, which means you're also learning to develop yourself. CSS - \"Cascading Style Sheets\" is a Rule-based language that is used to style the HTML. Declaration - A statement that shows the property and value that is changed from its default value. Selector - Part of the CSS Rule that shows the element selected to have styles applied. There are many more selector techniques that will be covered more in the course. Property - A specific style you are trying to add/change about the element selected. Value - The chosen option for the property. 1 2 3 4 p { color : red ; text-align : center ; } p is the selector color and text-align are properties red and center are values for the properties. (Note: there are other possible values for each property) Link - To link your stylesheet to your HTML you will need to put the following line of code in the <head> section of your HTML file. <link rel=\"stylesheet\" href=\"styles.css\">","title":"Terms to Know"},{"location":"preCourse/ourFirstWebPage/","text":"Building Our First Web Page Program Learning Goals In the next two weeks, at a minimum, you should understand: There are 3 types of code used to build modern web applications: HTML, CSS, and Javascript HTML is used to add content to your application (text, images, video, buttons, etc) HTML is a tag-based language. CSS is used to change the \"look and layout\" of the HTML content. CSS is a rule-based language CSS rules \"select\" HTML and \"affect\", or change HTML. JavaScript is primarily used to add interactivity to your application. Front-end and back-end web developers perform different, but equally important jobs. Your First Web Job You bump into an acquaintance and get to chatting. You tell them that you are learning to build web applications and they seem very interested. They tell you that they \"need a website built... Are you interested?\" \"I don't know,\" you reply. \"I'm still new to all this.\" \"I think it'll be pretty easy,\" they say. \"I just need a simple webpage that I can use to collect emails. Let me show you what I'm thinking...\" They start sketching out the basic layout to the page. It includes a title, a countdown clock, and a place where people can submit their emails. As they do, they let you know that they are going to be running a kickstarter campaign for a new product idea, and they want to collect emails in advance to help with promotion. You take a good look at the sketch and decide to go for it! Let's get started HTML IS A TAG-BASED LANGUAGE The first thing you need to know about HTML is there are two different kinds of tags. Some tags, like the H1 , are wrapped around content. The 'h' in H1 is short for heading . It has an opening tag , <h1> , and a closing tag , </h1> , (see below) and the text of the heading goes in between them. 1 < h1 > SurfCity.io - Coming Soon </ h1 > The other type of HTML tags are called self-closing tags and they contain all that they need in the opening tag and do not need a closing tag. One example is the Img tag (see below) that includes the source src= attribute which gives directions on where to find the image that's supposed to be shown to the user. The Img tag is not wrapped around the image, instead it tells the browser where to find the source of the image and put the image on the page. 1 < img src = \"https://assets.codepen.io/1240556/social.png\" /> These are the two categories of HTML Tags we write when building web pages: Normal or Non-void tags and Self-Closing or Void tags. These tags create HTML Elements on our page. We'll learn much more about who to use these elements, in due time. Where Do I Write The Code? In this two week class we are going to write code in three different environments, but the easiest to get started with is a website called codepen.io . Codepen asks you to make an account, and we'll do that later, but for now just scroll down the page until you see the 'Try the Editor' button and click it. Once it loads, you will see two parts, a section where you write the code, and a section where you see the page you're building. The code section has a separate place for each type of code (HTML, CSS, and JS). The page is designed to be responsive, meaning it changes itself to fit different size screens. If you have a high resolution monitor, you will see three panels in the code section that can be expanded to maximize the area you are coding in. If you have a smaller screen, you will see tabs at the top that allow you to choose which type of code to edit. In either case, we are ready to get started on building the page. Option 1 Option 2","title":"Building our first web page"},{"location":"preCourse/ourFirstWebPage/#building-our-first-web-page","text":"","title":"Building Our First Web Page"},{"location":"preCourse/ourFirstWebPage/#program-learning-goals","text":"In the next two weeks, at a minimum, you should understand: There are 3 types of code used to build modern web applications: HTML, CSS, and Javascript HTML is used to add content to your application (text, images, video, buttons, etc) HTML is a tag-based language. CSS is used to change the \"look and layout\" of the HTML content. CSS is a rule-based language CSS rules \"select\" HTML and \"affect\", or change HTML. JavaScript is primarily used to add interactivity to your application. Front-end and back-end web developers perform different, but equally important jobs.","title":"Program Learning Goals"},{"location":"preCourse/ourFirstWebPage/#your-first-web-job","text":"You bump into an acquaintance and get to chatting. You tell them that you are learning to build web applications and they seem very interested. They tell you that they \"need a website built... Are you interested?\" \"I don't know,\" you reply. \"I'm still new to all this.\" \"I think it'll be pretty easy,\" they say. \"I just need a simple webpage that I can use to collect emails. Let me show you what I'm thinking...\" They start sketching out the basic layout to the page. It includes a title, a countdown clock, and a place where people can submit their emails. As they do, they let you know that they are going to be running a kickstarter campaign for a new product idea, and they want to collect emails in advance to help with promotion. You take a good look at the sketch and decide to go for it!","title":"Your First Web Job"},{"location":"preCourse/ourFirstWebPage/#lets-get-started","text":"","title":"Let's get started"},{"location":"preCourse/ourFirstWebPage/#html-is-a-tag-based-language","text":"The first thing you need to know about HTML is there are two different kinds of tags. Some tags, like the H1 , are wrapped around content. The 'h' in H1 is short for heading . It has an opening tag , <h1> , and a closing tag , </h1> , (see below) and the text of the heading goes in between them. 1 < h1 > SurfCity.io - Coming Soon </ h1 > The other type of HTML tags are called self-closing tags and they contain all that they need in the opening tag and do not need a closing tag. One example is the Img tag (see below) that includes the source src= attribute which gives directions on where to find the image that's supposed to be shown to the user. The Img tag is not wrapped around the image, instead it tells the browser where to find the source of the image and put the image on the page. 1 < img src = \"https://assets.codepen.io/1240556/social.png\" /> These are the two categories of HTML Tags we write when building web pages: Normal or Non-void tags and Self-Closing or Void tags. These tags create HTML Elements on our page. We'll learn much more about who to use these elements, in due time.","title":"HTML IS A TAG-BASED LANGUAGE"},{"location":"preCourse/ourFirstWebPage/#where-do-i-write-the-code","text":"In this two week class we are going to write code in three different environments, but the easiest to get started with is a website called codepen.io . Codepen asks you to make an account, and we'll do that later, but for now just scroll down the page until you see the 'Try the Editor' button and click it. Once it loads, you will see two parts, a section where you write the code, and a section where you see the page you're building. The code section has a separate place for each type of code (HTML, CSS, and JS). The page is designed to be responsive, meaning it changes itself to fit different size screens. If you have a high resolution monitor, you will see three panels in the code section that can be expanded to maximize the area you are coding in. If you have a smaller screen, you will see tabs at the top that allow you to choose which type of code to edit. In either case, we are ready to get started on building the page. Option 1 Option 2","title":"Where Do I Write The Code?"},{"location":"preCourse/project-LandingPage/","text":"Portfolio Landing Page A journey of a thousand miles begins with a single step. \u2013 Lao Tzu Overview Today you will build the first page of your portfolio website! You'll get the hang of it quickly, so don't worry if you don't understand all the code. You'll build your page using VS Code and view it using the Live Server extension. In the next lesson, we'll get your site hosted for the world to see! How Classes Work Each class throughout the program will include a \"checklist\" that describes the general flow of the class, as well as, key points and topics so you will know what to expect before diving in. Today's Checklist Create a folder called myPortfolio in your Documents folder. Create your index.html file. Build your first webpage using HTML. Link a CSS file. Copy/Paste CSS code into that CSS file. Experiment with CSS on your own. Build a modified \"hero\" style landing page by the end of class. Project Instructions Draw a Wireframe A wireframe is a simplified outline that defines the main design of a web page or site. Wireframes are used to plan the page structure, specify major elements, and explain functionality. It is the skeleton or blueprint of a website. You'll be using wireframes to plan your work throughout this course and your career. Take a look at the wireframe below. This is the outline of the page you're building today and will serve as blue print for you to build from. CreateYour Folder and First Page Create a folder called: myPortfolio in your Documents folder. Open VS Code (Your text editor). Click File > Open Folder in the top navigation bar and find the new folder you just created. Click the New File icon next to your folder and name it index.html . The file will automatically open in the editor pane. Copy and paste the following code into your blank index.html file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < link rel = \"stylesheet\" href = \"./style.css\" > < title > My Portfolio </ title > </ head > < body > <!-- This is a what comment line looks like in HTML --> <!-- The rest of your code goes between here... --> <!-- ...and here. --> </ body > </ html > Add Your header and main Elements Save your page. Cmd + S / Ctrl + S TIP: Select File > Auto Save to automatically save any changes. Create two elements inside the Body tags called Header and Main. Copy/paste the code below to get started. NOTE: Remember to reference your previous lessons and bookmarked docs. And be sure you have only ONE Body element. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <!-- Don't include this <body> tag. It's for reference only --> <!-- <body> --> < header > <!-- REPLACE THIS LINE WITH THE PROVIDED LOGO IMG TAG --> <!-- REPLACE THIS LINE WITH A NAV ELEMENT --> </ header > < main > <!-- REPLACE THIS LINE WITH YOUR HEAD SHOT IMG TAG --> <!-- REPLACE THIS LINE WITH THE PORTFOLIO BUTTON --> < a class = \"small-text\" href = \"https://austincodingacademy.com/\" > \u00a9 Austin Coding Academy </ a > </ main > <!-- </body> --> <!-- Don't include this </body> tag. It's for reference only --> Add a Logo and Navigation to the Header Section Copy/paste the line of code below inside the Header element: 1 < img src = \"https://cdn.evbuc.com/eventlogos/188084824/acastandardcirclefullname.png\" class = \"logo\" alt = \"austin coding academy logo\" > Create a Nav element below this code but still inside the Header tag. Create 4 Anchor elements inside the Nav element for each of the following: \"Resume\", \"About Me\", \"My Blog\", and \"Contact Me\". HINT: The anchor tag for \"Contact Me\" should look like this: <a class=\"has-border\">Contact Me</a> Add Your Content to the Main Section Paste in this line of code in between the main tags : <img src=\"./myProfilePic.jpg\" id=\"profile-pic\" alt=\"Head shot of Me\"> Navigate to your finder/file explorer on your computer and open two separate windows on your computer. Find a good, clear, professional picture of yourself in one of the windows. Navigate to your myPortfolio project in the other window. Drag the image of yourself from the first window into the myPortfolio folder in the other window. Rename the image myProfilePic.jpg . NOTE: if your image is a .png , .jpeg , or another format, simply change the suffix in the line of code from step above. Create an H1 element with your full name in it below this new Img tag. Create an H2 element with your current title: Student of Web Development below the new H1 element. Copy/paste this line of code below the H2 element to create a Button element: <button id=\"portfolio\">Portfolio</button> . Save your code. Click the Go Live link in the bottom right-hand corner of VS Code. Go Live TIP: If the button doesn't show up, try quitting VS Code and restarting it. Or uninstall Live-Server and reinstall then restart VS Code again. Look at your website in Chrome. Not matching your wireframe? That's okay. What you see is called normal document flow . In all web files, each element is read top-to-bottom and left-to-right and rendered on the screen top-to-bottom and left-to-right. Next, we'll add styles to arrange our page and make it pretty. Add Your Styles We're going to include a set of rules listed in a CSS file to make everything look pretty. Look in the Head tag at the top of your index.html file. Do you see <link rel=\"stylesheet\" href=\"./style.css\"> ? This line of code allows you to link styles to the otherwise very boring web page. The line is telling the browser to go find a file called style.css in the same folder as your index.html file. Let's create one now. Click the New File icon next to your folder and name it style.css . The file will automatically open in the editor pane. Copy and paste the following code inside your new style.css file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 body { font-family : Arial , Helvetica , sans-serif ; background-image : url ( \"https://png.pngtree.com/thumb_back/fh260/back_pic/00/15/30/4656e81f6dc57c5.jpg\" ); background-repeat : no-repeat ; background-size : cover ; } /* What kind of selector is this? */ . logo { width : 150 px ; height : 100 px ; margin : 3 % 10 % ; } header { display : grid ; grid-template-columns : 40 % 60 % ; width : 100 % ; } main { height : auto ; width : 100 % ; display : grid ; grid-template-columns : 30 % 40 % 30 % ; } /* This is an element within and element selector */ nav > a { margin : 2 % 1 % 3 % ; height : 10 % ; width : 15 % ; color : white ; font-family : Arial , Helvetica , sans-serif ; font-size : 20 px ; border-radius : 25 px ; background : transparent ; padding : 20 px ; text-align : center ; border : 2 px solid white ; } . has-border { border-radius : 25 px ; border : 2 px solid #0795C3 ; background : none ; padding : 20 px ; } nav { display : flex ; justify-content : flex-end ; width : 100 % ; padding-right : 2 % ; } /* This is an ID selector */ # profile-pic { width : 300 px ; height : 300 px ; border-radius : 50 % ; margin : 15 % auto ; grid-column : 2 / 3 ; } h1 { color : white ; grid-column : 2 / 3 ; margin : 3 % auto ; border-bottom : 2 px solid #1940A9 ;; } h2 { grid-column : 2 / 3 ; margin : 3 % auto ; font-style : italic ; } . small-text { grid-column : 2 / 3 ; color : white ; font-size : 10 px ; margin : 3 % auto ; } button { grid-column : 2 / 3 ; margin : 3 % auto ; width : 70 % ; height : 15 % ; font-family : Arial , Helvetica , sans-serif ; font-size : 20 px ; border-radius : 25 px ; background : transparent ; padding : 20 px ; padding-bottom : 5 % ; text-align : center ; color : white ; letter-spacing : 16 px ; font-style : italic ; } Playtime Save your file and then go back to your browser to see what happened. What happened? Is it all working? If so, read through and see if you can figure out how to change the background img to something you like better. Can you figure out how to change the color of the links at the top? What about the logo at the top-left? Finally : Fix any bugs you have and get excited about playing with stuff. This is how you will be learning from here on out! Playing, breaking, fixing, playing, breaking and fixing again! Don't be afraid to change colors, text sizes, font families \u2013 whatever! You can always undo. NOTE: As you learn you will be pushing into unfamiliar territory. This will be your job! To push the boundary, experiment, and come up with solutions to problems. Embrace this learning, love the bugs, find joy in squashing them and you will do well! Review and Push Yourself Further Every lesson in this book will end with a Review and Push Yourself Further section. These sections are here to help you push yourself further once you've completed the in-class assignment. You should never stop coding or think you can't do or learn more. So to help guide you forward, these sections are given as highly-recommended suggestions on what you should code next. Take advantage of them and don't be afraid to Google your way through the challenges Play with the properties and other values in the CSS file to see what they are changing on the page. Don't be afraid to break things. Just click undo! If you feel like you've made a mess, remember that you have all of the original code here within this assignment. Google each of the properties in the CSS file like margin, font-family, text-align, color, and so forth. Learn new values for each of those properties. Don't be afraid to break things . You can always come back and fix them. Just come back to these instructions! See what else you can change and really get this page customized to your tastes. We'll learn more about CSS later on, but you should start experimenting and playing with it now. Learn more about your editor. Use these pages for inspiration:","title":"Portfolio Landing Page"},{"location":"preCourse/project-LandingPage/#portfolio-landing-page","text":"A journey of a thousand miles begins with a single step. \u2013 Lao Tzu","title":"Portfolio Landing Page"},{"location":"preCourse/project-LandingPage/#overview","text":"Today you will build the first page of your portfolio website! You'll get the hang of it quickly, so don't worry if you don't understand all the code. You'll build your page using VS Code and view it using the Live Server extension. In the next lesson, we'll get your site hosted for the world to see!","title":"Overview"},{"location":"preCourse/project-LandingPage/#how-classes-work","text":"Each class throughout the program will include a \"checklist\" that describes the general flow of the class, as well as, key points and topics so you will know what to expect before diving in.","title":"How Classes Work"},{"location":"preCourse/project-LandingPage/#todays-checklist","text":"Create a folder called myPortfolio in your Documents folder. Create your index.html file. Build your first webpage using HTML. Link a CSS file. Copy/Paste CSS code into that CSS file. Experiment with CSS on your own. Build a modified \"hero\" style landing page by the end of class.","title":"Today's Checklist"},{"location":"preCourse/project-LandingPage/#project-instructions","text":"","title":"Project Instructions"},{"location":"preCourse/project-LandingPage/#draw-a-wireframe","text":"A wireframe is a simplified outline that defines the main design of a web page or site. Wireframes are used to plan the page structure, specify major elements, and explain functionality. It is the skeleton or blueprint of a website. You'll be using wireframes to plan your work throughout this course and your career. Take a look at the wireframe below. This is the outline of the page you're building today and will serve as blue print for you to build from.","title":"Draw a Wireframe"},{"location":"preCourse/project-LandingPage/#createyour-folder-and-first-page","text":"Create a folder called: myPortfolio in your Documents folder. Open VS Code (Your text editor). Click File > Open Folder in the top navigation bar and find the new folder you just created. Click the New File icon next to your folder and name it index.html . The file will automatically open in the editor pane. Copy and paste the following code into your blank index.html file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < link rel = \"stylesheet\" href = \"./style.css\" > < title > My Portfolio </ title > </ head > < body > <!-- This is a what comment line looks like in HTML --> <!-- The rest of your code goes between here... --> <!-- ...and here. --> </ body > </ html >","title":"CreateYour Folder and First Page"},{"location":"preCourse/project-LandingPage/#add-your-header-and-main-elements","text":"Save your page. Cmd + S / Ctrl + S TIP: Select File > Auto Save to automatically save any changes. Create two elements inside the Body tags called Header and Main. Copy/paste the code below to get started. NOTE: Remember to reference your previous lessons and bookmarked docs. And be sure you have only ONE Body element. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <!-- Don't include this <body> tag. It's for reference only --> <!-- <body> --> < header > <!-- REPLACE THIS LINE WITH THE PROVIDED LOGO IMG TAG --> <!-- REPLACE THIS LINE WITH A NAV ELEMENT --> </ header > < main > <!-- REPLACE THIS LINE WITH YOUR HEAD SHOT IMG TAG --> <!-- REPLACE THIS LINE WITH THE PORTFOLIO BUTTON --> < a class = \"small-text\" href = \"https://austincodingacademy.com/\" > \u00a9 Austin Coding Academy </ a > </ main > <!-- </body> --> <!-- Don't include this </body> tag. It's for reference only -->","title":"Add Your header and main Elements"},{"location":"preCourse/project-LandingPage/#add-a-logo-and-navigation-to-the-header-section","text":"Copy/paste the line of code below inside the Header element: 1 < img src = \"https://cdn.evbuc.com/eventlogos/188084824/acastandardcirclefullname.png\" class = \"logo\" alt = \"austin coding academy logo\" > Create a Nav element below this code but still inside the Header tag. Create 4 Anchor elements inside the Nav element for each of the following: \"Resume\", \"About Me\", \"My Blog\", and \"Contact Me\". HINT: The anchor tag for \"Contact Me\" should look like this: <a class=\"has-border\">Contact Me</a>","title":"Add a Logo and Navigation to the Header Section"},{"location":"preCourse/project-LandingPage/#add-your-content-to-the-main-section","text":"Paste in this line of code in between the main tags : <img src=\"./myProfilePic.jpg\" id=\"profile-pic\" alt=\"Head shot of Me\"> Navigate to your finder/file explorer on your computer and open two separate windows on your computer. Find a good, clear, professional picture of yourself in one of the windows. Navigate to your myPortfolio project in the other window. Drag the image of yourself from the first window into the myPortfolio folder in the other window. Rename the image myProfilePic.jpg . NOTE: if your image is a .png , .jpeg , or another format, simply change the suffix in the line of code from step above. Create an H1 element with your full name in it below this new Img tag. Create an H2 element with your current title: Student of Web Development below the new H1 element. Copy/paste this line of code below the H2 element to create a Button element: <button id=\"portfolio\">Portfolio</button> . Save your code. Click the Go Live link in the bottom right-hand corner of VS Code. Go Live TIP: If the button doesn't show up, try quitting VS Code and restarting it. Or uninstall Live-Server and reinstall then restart VS Code again. Look at your website in Chrome. Not matching your wireframe? That's okay. What you see is called normal document flow . In all web files, each element is read top-to-bottom and left-to-right and rendered on the screen top-to-bottom and left-to-right. Next, we'll add styles to arrange our page and make it pretty.","title":"Add Your Content to the Main Section"},{"location":"preCourse/project-LandingPage/#add-your-styles","text":"We're going to include a set of rules listed in a CSS file to make everything look pretty. Look in the Head tag at the top of your index.html file. Do you see <link rel=\"stylesheet\" href=\"./style.css\"> ? This line of code allows you to link styles to the otherwise very boring web page. The line is telling the browser to go find a file called style.css in the same folder as your index.html file. Let's create one now. Click the New File icon next to your folder and name it style.css . The file will automatically open in the editor pane. Copy and paste the following code inside your new style.css file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 body { font-family : Arial , Helvetica , sans-serif ; background-image : url ( \"https://png.pngtree.com/thumb_back/fh260/back_pic/00/15/30/4656e81f6dc57c5.jpg\" ); background-repeat : no-repeat ; background-size : cover ; } /* What kind of selector is this? */ . logo { width : 150 px ; height : 100 px ; margin : 3 % 10 % ; } header { display : grid ; grid-template-columns : 40 % 60 % ; width : 100 % ; } main { height : auto ; width : 100 % ; display : grid ; grid-template-columns : 30 % 40 % 30 % ; } /* This is an element within and element selector */ nav > a { margin : 2 % 1 % 3 % ; height : 10 % ; width : 15 % ; color : white ; font-family : Arial , Helvetica , sans-serif ; font-size : 20 px ; border-radius : 25 px ; background : transparent ; padding : 20 px ; text-align : center ; border : 2 px solid white ; } . has-border { border-radius : 25 px ; border : 2 px solid #0795C3 ; background : none ; padding : 20 px ; } nav { display : flex ; justify-content : flex-end ; width : 100 % ; padding-right : 2 % ; } /* This is an ID selector */ # profile-pic { width : 300 px ; height : 300 px ; border-radius : 50 % ; margin : 15 % auto ; grid-column : 2 / 3 ; } h1 { color : white ; grid-column : 2 / 3 ; margin : 3 % auto ; border-bottom : 2 px solid #1940A9 ;; } h2 { grid-column : 2 / 3 ; margin : 3 % auto ; font-style : italic ; } . small-text { grid-column : 2 / 3 ; color : white ; font-size : 10 px ; margin : 3 % auto ; } button { grid-column : 2 / 3 ; margin : 3 % auto ; width : 70 % ; height : 15 % ; font-family : Arial , Helvetica , sans-serif ; font-size : 20 px ; border-radius : 25 px ; background : transparent ; padding : 20 px ; padding-bottom : 5 % ; text-align : center ; color : white ; letter-spacing : 16 px ; font-style : italic ; }","title":"Add Your Styles"},{"location":"preCourse/project-LandingPage/#playtime","text":"Save your file and then go back to your browser to see what happened. What happened? Is it all working? If so, read through and see if you can figure out how to change the background img to something you like better. Can you figure out how to change the color of the links at the top? What about the logo at the top-left? Finally : Fix any bugs you have and get excited about playing with stuff. This is how you will be learning from here on out! Playing, breaking, fixing, playing, breaking and fixing again! Don't be afraid to change colors, text sizes, font families \u2013 whatever! You can always undo. NOTE: As you learn you will be pushing into unfamiliar territory. This will be your job! To push the boundary, experiment, and come up with solutions to problems. Embrace this learning, love the bugs, find joy in squashing them and you will do well!","title":"Playtime"},{"location":"preCourse/project-LandingPage/#review-and-push-yourself-further","text":"Every lesson in this book will end with a Review and Push Yourself Further section. These sections are here to help you push yourself further once you've completed the in-class assignment. You should never stop coding or think you can't do or learn more. So to help guide you forward, these sections are given as highly-recommended suggestions on what you should code next. Take advantage of them and don't be afraid to Google your way through the challenges Play with the properties and other values in the CSS file to see what they are changing on the page. Don't be afraid to break things. Just click undo! If you feel like you've made a mess, remember that you have all of the original code here within this assignment. Google each of the properties in the CSS file like margin, font-family, text-align, color, and so forth. Learn new values for each of those properties. Don't be afraid to break things . You can always come back and fix them. Just come back to these instructions! See what else you can change and really get this page customized to your tastes. We'll learn more about CSS later on, but you should start experimenting and playing with it now. Learn more about your editor. Use these pages for inspiration:","title":"Review and Push Yourself Further"},{"location":"preCourse/setupInstructions/","text":"Prepare Your Machine(Setup Your Computer) To work in the course you'll need three essential tools on your machine (computer): a web browser , a text editor , a terminal or and terminal emulator (a.k.a. command line interface or CLI). The short checklist looks like this: Download Chrome Download VS Code Terminal: MacOS has a built-in terminal Windows 10+ has Command Prompt Windows <=9 will need to download GitBash Chrome (a web browser) When consuming content through the internet, users/we need a program that can render the streams of data sent to our computer (laptop or phone) from other computers (the cloud) through the internet. The general name for this type of program is called a browser. Yes, you can surf the internet with other browsers like Internet Explore, Edge, Opera, Firefox or Safari, but Chrome undoubtedly has the strongest built-in dev tools of any browser. In this course and all the following courses we\u2019ll be using Chrome. Be sure to download Chrome. After that: Practice It - Using Chrome Master Bookmark Management Organized Your Bookmarks Shortcut Practice: Cmd + T = open new tab Shortcut Practice: Cmd + Shift + T = reopen last closed tab Shortcut Practice: Cmd + R = refresh the current tab Shortcut Practice: Cmd + W = close the current tab NOTE: For Windows machines use Ctrl instead of Cmd . VS Code (an IDE/text editor) A text editor is simply a tool used to edit your code and organize it into files before it is executed. There are plenty of text editors or IDE s including Atom, SublimeText, IntelliJ, Brackets, WebStorm, VIM, TextWrangler, RubyMine and even NotePad. Some are paid, others are free, but for our use-case and to get the most powerful text editor for the buck we're going to use the free and well-supported Visual Studio Code . Be sure to download it and then continue to read up on other text editors as you grow as a developer. See It - IDEs and VS Code YT, blondiebytes - IDEs and TextEditors YT, Coding Tech - Why VS Code VS Code Docs - Learn & Practice More Keyboard Shortcuts NOTE: VS Code, Visual Studio and VS Community are all different IDEs . Terminal or Terminal Emulator A terminal or Command Line Interface (CLI) is a way for you to interact with your computer's core functionality without building a GUI , a Graphical User Interface . GUIs are what we give to people that don't know how to work with code. We learn to work in terminals because later on we'll be interacting with remote servers and the only way we can talk to them is sending them messages through a CLI command. Think of the terminal or CLI (command line interface) as a shortcut to the computer. Normally we access our computer's programs and files through a GUI (graphical user interface, pronounced: \"gooey\"). A GUI is nice and pretty, but sometimes we need to access the computer more directly and in a more efficient way. We can do this using the command line interface, or command line for short. Installation/Accessing a Terminal on Your Computer Macs Mac users have a built in terminal. To access it, simply hold Cmd + Space A Spotlight search bar should appear. Type in \"terminal\" then hit Enter . But you'll need homebrew so run this in your terminal: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" and say yes to XCode . ( this will take a while ) Learn how to work through your Mac terminal with a few short commands . Windows 10+ Windows 10 comes built with Command Prompt , a command line interpreter. It acts the same way as the command line and is in this way a command line emulator. Open Command Prompt via the Command Prompt shortcut located in the Start menu or on the Apps screen, depending on your version of Windows. Learn how to use the Windows command line . Windows < 10 If you are using a pre-Windows 10 machine then you will need to download GitBash to work as your terminal emulator. Learn GitBash commands . NOTE: We'll use these terminals or terminal emulators throughout this course and each one afterward, so make sure you can access them for now. The CLI Commands You Must Learn CLI Commands","title":"Prepare Your Machine"},{"location":"preCourse/setupInstructions/#prepare-your-machinesetup-your-computer","text":"To work in the course you'll need three essential tools on your machine (computer): a web browser , a text editor , a terminal or and terminal emulator (a.k.a. command line interface or CLI). The short checklist looks like this: Download Chrome Download VS Code Terminal: MacOS has a built-in terminal Windows 10+ has Command Prompt Windows <=9 will need to download GitBash","title":"Prepare Your Machine(Setup Your Computer)"},{"location":"preCourse/setupInstructions/#chrome-a-web-browser","text":"When consuming content through the internet, users/we need a program that can render the streams of data sent to our computer (laptop or phone) from other computers (the cloud) through the internet. The general name for this type of program is called a browser. Yes, you can surf the internet with other browsers like Internet Explore, Edge, Opera, Firefox or Safari, but Chrome undoubtedly has the strongest built-in dev tools of any browser. In this course and all the following courses we\u2019ll be using Chrome. Be sure to download Chrome. After that:","title":"Chrome (a web browser)"},{"location":"preCourse/setupInstructions/#practice-it-using-chrome","text":"Master Bookmark Management Organized Your Bookmarks Shortcut Practice: Cmd + T = open new tab Shortcut Practice: Cmd + Shift + T = reopen last closed tab Shortcut Practice: Cmd + R = refresh the current tab Shortcut Practice: Cmd + W = close the current tab NOTE: For Windows machines use Ctrl instead of Cmd .","title":"Practice It - Using Chrome"},{"location":"preCourse/setupInstructions/#vs-code-an-idetext-editor","text":"A text editor is simply a tool used to edit your code and organize it into files before it is executed. There are plenty of text editors or IDE s including Atom, SublimeText, IntelliJ, Brackets, WebStorm, VIM, TextWrangler, RubyMine and even NotePad. Some are paid, others are free, but for our use-case and to get the most powerful text editor for the buck we're going to use the free and well-supported Visual Studio Code . Be sure to download it and then continue to read up on other text editors as you grow as a developer.","title":"VS Code (an IDE/text editor)"},{"location":"preCourse/setupInstructions/#see-it-ides-and-vs-code","text":"YT, blondiebytes - IDEs and TextEditors YT, Coding Tech - Why VS Code VS Code Docs - Learn & Practice More Keyboard Shortcuts NOTE: VS Code, Visual Studio and VS Community are all different IDEs .","title":"See It - IDEs and VS Code"},{"location":"preCourse/setupInstructions/#terminal-or-terminal-emulator","text":"A terminal or Command Line Interface (CLI) is a way for you to interact with your computer's core functionality without building a GUI , a Graphical User Interface . GUIs are what we give to people that don't know how to work with code. We learn to work in terminals because later on we'll be interacting with remote servers and the only way we can talk to them is sending them messages through a CLI command. Think of the terminal or CLI (command line interface) as a shortcut to the computer. Normally we access our computer's programs and files through a GUI (graphical user interface, pronounced: \"gooey\"). A GUI is nice and pretty, but sometimes we need to access the computer more directly and in a more efficient way. We can do this using the command line interface, or command line for short.","title":"Terminal or Terminal Emulator"},{"location":"preCourse/setupInstructions/#installationaccessing-a-terminal-on-your-computer","text":"Macs Mac users have a built in terminal. To access it, simply hold Cmd + Space A Spotlight search bar should appear. Type in \"terminal\" then hit Enter . But you'll need homebrew so run this in your terminal: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" and say yes to XCode . ( this will take a while ) Learn how to work through your Mac terminal with a few short commands . Windows 10+ Windows 10 comes built with Command Prompt , a command line interpreter. It acts the same way as the command line and is in this way a command line emulator. Open Command Prompt via the Command Prompt shortcut located in the Start menu or on the Apps screen, depending on your version of Windows. Learn how to use the Windows command line . Windows < 10 If you are using a pre-Windows 10 machine then you will need to download GitBash to work as your terminal emulator. Learn GitBash commands . NOTE: We'll use these terminals or terminal emulators throughout this course and each one afterward, so make sure you can access them for now.","title":"Installation/Accessing a Terminal on Your Computer"},{"location":"preCourse/setupInstructions/#the-cli-commands-you-must-learn","text":"CLI Commands","title":"The CLI Commands You Must Learn"},{"location":"preCourse/submittingHomework/","text":"Submitting Coding Homework Create Your Development Folder You'll need a designated folder to keep all your projects together on your computer. Open your terminal program and navigate to Documents: cd Documents Make a new folder named devFolder : mkdir devFolder Change into the new folder/directory you made in the last class: cd devFolder NOTE FOR WINDOWS MACHINES USING ONEDRIVE: If you use OneDrive to save your photos, music, and other files, you may run into problems using Git and GitHub to create and manage your repos. If you have any issues, please refer to How to Configure OneDrive to Sync Only Certain Folders in Windows 10 to unsync your devFolder . Create a Repo for Each Assignment Open your web browser and sign in to your GitHub account. Click the New button in the top-right corner of the window. Enter ACA_web101_yourFirstName_yourLastName in the Repository name field. NOTE: Change firstName for your actual first name and lastName for your actual last name. Enter This is my ACA portfolio in the Description field. Leave the Public radio button selected. Check the Add a README file checkbox. (this will create a README.md file for you to take notes in.) Click the Create repository button. Once the repo is created, click the Code button and copy the link it provides in the drop-down menu by clicking on the icon that looks like a page with the arrow pointing left. Go back to your terminal. Type git clone and paste the link you copied from your repo on GitHub to clone the repo onto your computer: git clone paste-that-link-here-and-replace-me Press the Enter key and watch it work! Move Your Project Files For the first assignment, you've already been working in a folder that is NOT a Git repo. And, you have a new repo with nothing but a README file. To continue, you need to move your myPortfolio folder into your ACA_web101_yourname folder so Git can move your project to GitHub. Navigate to your finder/file explorer on your computer and open two separate windows. Navigate to your ACA_web101_yourname folder in the first window. Navigate to your myPortfolio folder in the other window. Drag the myPortfolio folder into the ACA_web101_yourname folder in the first window. Your folder structure should look like this:","title":"Submitting Homework"},{"location":"preCourse/submittingHomework/#submitting-coding-homework","text":"","title":"Submitting Coding Homework"},{"location":"preCourse/submittingHomework/#create-your-development-folder","text":"You'll need a designated folder to keep all your projects together on your computer. Open your terminal program and navigate to Documents: cd Documents Make a new folder named devFolder : mkdir devFolder Change into the new folder/directory you made in the last class: cd devFolder NOTE FOR WINDOWS MACHINES USING ONEDRIVE: If you use OneDrive to save your photos, music, and other files, you may run into problems using Git and GitHub to create and manage your repos. If you have any issues, please refer to How to Configure OneDrive to Sync Only Certain Folders in Windows 10 to unsync your devFolder .","title":"Create Your Development Folder"},{"location":"preCourse/submittingHomework/#create-a-repo-for-each-assignment","text":"Open your web browser and sign in to your GitHub account. Click the New button in the top-right corner of the window. Enter ACA_web101_yourFirstName_yourLastName in the Repository name field. NOTE: Change firstName for your actual first name and lastName for your actual last name. Enter This is my ACA portfolio in the Description field. Leave the Public radio button selected. Check the Add a README file checkbox. (this will create a README.md file for you to take notes in.) Click the Create repository button. Once the repo is created, click the Code button and copy the link it provides in the drop-down menu by clicking on the icon that looks like a page with the arrow pointing left. Go back to your terminal. Type git clone and paste the link you copied from your repo on GitHub to clone the repo onto your computer: git clone paste-that-link-here-and-replace-me Press the Enter key and watch it work!","title":"Create a Repo for Each Assignment"},{"location":"preCourse/submittingHomework/#move-your-project-files","text":"For the first assignment, you've already been working in a folder that is NOT a Git repo. And, you have a new repo with nothing but a README file. To continue, you need to move your myPortfolio folder into your ACA_web101_yourname folder so Git can move your project to GitHub. Navigate to your finder/file explorer on your computer and open two separate windows. Navigate to your ACA_web101_yourname folder in the first window. Navigate to your myPortfolio folder in the other window. Drag the myPortfolio folder into the ACA_web101_yourname folder in the first window. Your folder structure should look like this:","title":"Move Your Project Files"},{"location":"preCourse/succeedInThisCourse/","text":"How to Succeed In This Course and This Career Read It Every section in this textbook consists of an overview video that is designed to help you understand what you're about to learn and why it's important. After watching the video you'll also have a * Read It \" section (like this one) that will provide more context and detail. We all learn in different ways but we also learn in similar ways. Video might be better for some while reading is better for others, however, the reinforcement from both angles is ideal for all. Throughout this course, you will be consuming your work through a variety of different mediums \u2013 reading, videos, hands-on coding platforms, and more. This approach is part of a well-documented and successful teaching and learning strategy called Differentiated Learning , whereby we active different regions of your brain to help you notice patterns and build your own understandings. Take the time with each \"Read It\" and \"Know Your Docs\" section to build your understanding, draw conclusions, and take notes of what you've realized. Following these sections will usually be another video \u2013 See It \u2013 that dives into the application of the concept and then a Practice It section that gives you the opportunity to tinker with the concept in a hands-on way. Please, please , please , practice the problems during your homework. Teach yourself to approach a problem and figure it out yourself. You will gain so much satisfaction, confidence, and gainful understanding if you apply your mind to each and every problem! Why? Our instructors don\u2019t lecture in class. Instead, our instructors guide you through multiple challenges including logic problems, presentations, interview questions, and application programming challenges. To use the class time effectively you and all of your classmates must complete the assigned pre-homework. If you and your classmates do this you\u2019ll be able to get into class and really ask good questions, apply what you\u2019re learning at home and advance your skills more quickly. This program is built to accommodate full-time employment through part-time classes BUT you will not learn everything you need to learn in these 5 hours/week. YOU MUST READ, WATCH, PRACTICE, and RESEARCH on your own. Each of the sections in your pre-lesson homeworks have been honed in through years of training student-developers to focus on what they really need to learn in a very short amount of time. Trust the process, do the work, sacrifice time now for your future, and GSD ! Flipped Classroom: What The short? You read and study outside of class and apply that knowledge in class with the support of your classmates and instructor. No pride. No ego. No shame. A more academic definition can be found here . But the following videos do well to explain it well. Either way, this approach works and works well! The only challenge now is to shape your mindset around it. The Flipped Classroom: Why In the traditional classroom , the teacher is the central focus of a lesson. The teacher responds to questions while students defer directly to the teacher for guidance and feedback. In a classroom with a traditional style of instruction, individual lessons may be focused on an explanation of content utilizing a lecture-style. Typically, this pattern of teaching also involves giving students the task of reading from a textbook or practicing a concept by working on a problem set, for example, outside school. In a flipped classroom students are required to study the content of the lecture outside of class by reading, watching videos and fiddling with code. Class time with the instructor is then mostly reserved for questions over the content, small discussions of related topics and then dedicated guided practice time on each project. This way students get access to a professional programmer when they need it, during problems and struggles. This approach may feel difficult at first but this methodology has been proven to work and is well suited for both adult learners and part-time education. The Flipped Classroom: How WATCH, READ, PRACTICE, RESEARCH, AND WRITE Every Pre-Homework will have a video to WATCH. These videos are incredibly important to help build context for why you\u2019ll be learning the upcoming concept. Watch all videos that are given to you even if they\u2019re 30 mins, 60 mins or just 5 mins. Watch them all! They were built or chosen because they teach what we need you to learn. READ ALL of the pre-homework given to you. Each lesson has been carefully thought out and crafted to guide you through, sometimes, very complex or technically intricate processes. Make sure you understand the concepts by reading every article that\u2019s suggested. PRACTICE Most pre-homework will have Practice It sections where you can apply the lesson you\u2019ve just watched and read about. This section is where you actually learn! Don\u2019t cut yourself short. DO THE PRACTICE PROBLEM ! Put it in a Repl.it and don\u2019t stop fidgeting with it until you completely understand it. RESEARCH your questions! ALL questions can be answered on the internet. Don\u2019t wait until you get to class to answer low hanging fruit. Find it on the internet. Then you can use your class time to ask harder questions with deeper understanding. At the end of most pre-lesson homeworks you\u2019ll see a list of Terms to Know & Questions for Discussion . If you can\u2019t describe or answer them to another person you need to go look them up on Google, read or watch a video on them, then WRITE down your understanding of each one in your journal. WRITE your blogging questions every week. You\u2019ll see a lesson on creating your blog account on Medium.com in the Pre-Course Lessons, so you can publish your thoughts on multiple subjects. These questions are collected from various interviews from our graduates and online research to prepare you for the hardest interview you\u2019ve ever experienced , the one you\u2019ll go through for your first developer job. Today's Shortcut - YouTube Videos While watching YouTube videos, Type Shift + > to accelerate the play speed of a video. Shift + < to slow it down. Simply type L to jump ahead by 10 seconds. And J to go back 10 seconds. Type C to turn on/off captions.","title":"Flipped Classroom"},{"location":"preCourse/succeedInThisCourse/#how-to-succeed-in-this-course-and-this-career","text":"","title":"How to Succeed In This Course and This Career"},{"location":"preCourse/succeedInThisCourse/#read-it","text":"Every section in this textbook consists of an overview video that is designed to help you understand what you're about to learn and why it's important. After watching the video you'll also have a * Read It \" section (like this one) that will provide more context and detail. We all learn in different ways but we also learn in similar ways. Video might be better for some while reading is better for others, however, the reinforcement from both angles is ideal for all. Throughout this course, you will be consuming your work through a variety of different mediums \u2013 reading, videos, hands-on coding platforms, and more. This approach is part of a well-documented and successful teaching and learning strategy called Differentiated Learning , whereby we active different regions of your brain to help you notice patterns and build your own understandings. Take the time with each \"Read It\" and \"Know Your Docs\" section to build your understanding, draw conclusions, and take notes of what you've realized. Following these sections will usually be another video \u2013 See It \u2013 that dives into the application of the concept and then a Practice It section that gives you the opportunity to tinker with the concept in a hands-on way. Please, please , please , practice the problems during your homework. Teach yourself to approach a problem and figure it out yourself. You will gain so much satisfaction, confidence, and gainful understanding if you apply your mind to each and every problem! Why? Our instructors don\u2019t lecture in class. Instead, our instructors guide you through multiple challenges including logic problems, presentations, interview questions, and application programming challenges. To use the class time effectively you and all of your classmates must complete the assigned pre-homework. If you and your classmates do this you\u2019ll be able to get into class and really ask good questions, apply what you\u2019re learning at home and advance your skills more quickly. This program is built to accommodate full-time employment through part-time classes BUT you will not learn everything you need to learn in these 5 hours/week. YOU MUST READ, WATCH, PRACTICE, and RESEARCH on your own. Each of the sections in your pre-lesson homeworks have been honed in through years of training student-developers to focus on what they really need to learn in a very short amount of time. Trust the process, do the work, sacrifice time now for your future, and GSD !","title":"Read It"},{"location":"preCourse/succeedInThisCourse/#flipped-classroom-what","text":"The short? You read and study outside of class and apply that knowledge in class with the support of your classmates and instructor. No pride. No ego. No shame. A more academic definition can be found here . But the following videos do well to explain it well. Either way, this approach works and works well! The only challenge now is to shape your mindset around it.","title":"Flipped Classroom: What"},{"location":"preCourse/succeedInThisCourse/#the-flipped-classroom-why","text":"In the traditional classroom , the teacher is the central focus of a lesson. The teacher responds to questions while students defer directly to the teacher for guidance and feedback. In a classroom with a traditional style of instruction, individual lessons may be focused on an explanation of content utilizing a lecture-style. Typically, this pattern of teaching also involves giving students the task of reading from a textbook or practicing a concept by working on a problem set, for example, outside school. In a flipped classroom students are required to study the content of the lecture outside of class by reading, watching videos and fiddling with code. Class time with the instructor is then mostly reserved for questions over the content, small discussions of related topics and then dedicated guided practice time on each project. This way students get access to a professional programmer when they need it, during problems and struggles. This approach may feel difficult at first but this methodology has been proven to work and is well suited for both adult learners and part-time education.","title":"The Flipped Classroom: Why"},{"location":"preCourse/succeedInThisCourse/#the-flipped-classroom-how","text":"WATCH, READ, PRACTICE, RESEARCH, AND WRITE Every Pre-Homework will have a video to WATCH. These videos are incredibly important to help build context for why you\u2019ll be learning the upcoming concept. Watch all videos that are given to you even if they\u2019re 30 mins, 60 mins or just 5 mins. Watch them all! They were built or chosen because they teach what we need you to learn. READ ALL of the pre-homework given to you. Each lesson has been carefully thought out and crafted to guide you through, sometimes, very complex or technically intricate processes. Make sure you understand the concepts by reading every article that\u2019s suggested. PRACTICE Most pre-homework will have Practice It sections where you can apply the lesson you\u2019ve just watched and read about. This section is where you actually learn! Don\u2019t cut yourself short. DO THE PRACTICE PROBLEM ! Put it in a Repl.it and don\u2019t stop fidgeting with it until you completely understand it. RESEARCH your questions! ALL questions can be answered on the internet. Don\u2019t wait until you get to class to answer low hanging fruit. Find it on the internet. Then you can use your class time to ask harder questions with deeper understanding. At the end of most pre-lesson homeworks you\u2019ll see a list of Terms to Know & Questions for Discussion . If you can\u2019t describe or answer them to another person you need to go look them up on Google, read or watch a video on them, then WRITE down your understanding of each one in your journal. WRITE your blogging questions every week. You\u2019ll see a lesson on creating your blog account on Medium.com in the Pre-Course Lessons, so you can publish your thoughts on multiple subjects. These questions are collected from various interviews from our graduates and online research to prepare you for the hardest interview you\u2019ve ever experienced , the one you\u2019ll go through for your first developer job.","title":"The Flipped Classroom: How"},{"location":"preCourse/succeedInThisCourse/#todays-shortcut-youtube-videos","text":"While watching YouTube videos, Type Shift + > to accelerate the play speed of a video. Shift + < to slow it down. Simply type L to jump ahead by 10 seconds. And J to go back 10 seconds. Type C to turn on/off captions.","title":"Today's Shortcut - YouTube Videos"},{"location":"preCourse/theDevelopSeries/","text":"The Develop Series Each week, you'll also be training to be a better learner, listener, person, thinker, entrepreneur. These qualities transcend programming and web development and will carry you much further than you though possible. Coupled with coding, these skills will make you a fierce collaborator in the job market and build a foundation for you future. Are you ready?","title":"Develop Series"},{"location":"preCourse/theDevelopSeries/#the-develop-series","text":"Each week, you'll also be training to be a better learner, listener, person, thinker, entrepreneur. These qualities transcend programming and web development and will carry you much further than you though possible. Coupled with coding, these skills will make you a fierce collaborator in the job market and build a foundation for you future. Are you ready?","title":"The Develop Series"},{"location":"preCourse/theSATmethod/","text":"The S.A.T. Method Overview As you begin your journey into web development, you will learn you have dedicated yourself to a lifetime of learning. All developers, all day, are researching and learning about new technologies and better solutions to their problems. You are on track to join them in this exploration. There is an ever-growing wealth of knowledge online. Because of the massive landscape of development and our limited time together, you must bring a sense of ownership to this class. This is what we mean by a growth-mindset . You must own your learning, your growth, and your curiosity. To help you do this, we will not only be teaching you how to code, program, and develop, but also how to learn and teach yourself new skills to expand your abilities. One of the many skills that will help you grow is Googling. It may sound funny, but Googling really is one of the most powerful skills you can nurture. Search. Ask. Teach. S.A.T. is an acronym for our style of passing on, maintaining, and growing in-house knowledge in our ACA family, which also contributes to our online and in-class community and culture: make yourself better every day while making others around you better! It works like this: If you have a question, you should immediately ask yourself: \u201cIs it in my textbook?\" 1. SEARCH for the question using your resources, \u2026if you don\u2019t find what you\u2019re asking for: 2. ASK your question to your classmates and/or instructor, your learning community is a great resource to pull from and contribute to... 3. TEACH the solution. This is the most important part. If you know the answer to a posted question, then go and answer it! Also, if you learn something new, pass it on to others. Final Thoughts Don\u2019t underestimate the power of sharing what you know. It always comes back around!","title":"S.A.T."},{"location":"preCourse/theSATmethod/#the-sat-method","text":"","title":"The S.A.T. Method"},{"location":"preCourse/theSATmethod/#overview","text":"As you begin your journey into web development, you will learn you have dedicated yourself to a lifetime of learning. All developers, all day, are researching and learning about new technologies and better solutions to their problems. You are on track to join them in this exploration. There is an ever-growing wealth of knowledge online. Because of the massive landscape of development and our limited time together, you must bring a sense of ownership to this class. This is what we mean by a growth-mindset . You must own your learning, your growth, and your curiosity. To help you do this, we will not only be teaching you how to code, program, and develop, but also how to learn and teach yourself new skills to expand your abilities. One of the many skills that will help you grow is Googling. It may sound funny, but Googling really is one of the most powerful skills you can nurture.","title":"Overview"},{"location":"preCourse/theSATmethod/#search-ask-teach","text":"S.A.T. is an acronym for our style of passing on, maintaining, and growing in-house knowledge in our ACA family, which also contributes to our online and in-class community and culture: make yourself better every day while making others around you better! It works like this: If you have a question, you should immediately ask yourself: \u201cIs it in my textbook?\" 1. SEARCH for the question using your resources, \u2026if you don\u2019t find what you\u2019re asking for: 2. ASK your question to your classmates and/or instructor, your learning community is a great resource to pull from and contribute to... 3. TEACH the solution. This is the most important part. If you know the answer to a posted question, then go and answer it! Also, if you learn something new, pass it on to others. Final Thoughts Don\u2019t underestimate the power of sharing what you know. It always comes back around!","title":"Search. Ask. Teach."},{"location":"preCourse/whyBlogging/","text":"Blogging on Medium Many benefits spring from starting your own blog! To enumerate a few: establishing and building-up your online presence reflecting on your own learning and engraining the value sharing and connecting with others contributing your lessons to the community expressing yourself and recording your thoughts in a place you can easily return or share with others (i.e. potential employers) In class, we will use your blog for all of these reasons. Your blog will allow you to record your thoughts and lessons, share them with your instructor, and prepare for the rigors of developer interviews to come . Read It Progressing through the material and challenges set forth in this web-based textbook will certainly teach you new skills and establish a great baseline of knowledge. However, in our limited time together we cannot cover all of the material that may come up in an interview. To ensure you are constantly improving upon your skills and knowledge base as a whole, at the end of each lesson there will be a set of questions entitled: Interview Questions . The purpose of these questions is to provide you with questions pertaining to deeper topics that might not have been covered while learning the hard-skills of coding and programming or the soft-skills of presenting. If you don't know the answers to these questions...PERFECT! This is your chance to learn them! You are expected and will be graded each week on your blog post that answers these questions. Use google. Search for the terms in the questions and read as much as you can find. Once you understand the terms and ideas, synthesize the answers to the questions in your weekly blog. The practice of blogging every week will do countless things for you. Simply covering new material, pushing your upper-limits and converting your new ideas into words will cultivate your ability to speak about them, which will prepare you to speak about code in interviews. It will slowly yet rapidly build your knowledge of different challenges and solutions-based approaches and record them in a place for you to return to when you are preparing for interviews as a study guide...in your own words!! The final reason you should be happy to be writing a weekly blog is that in order for you to move on to the next course you will need to pass the Exit Test of this course. The questions to this test are pulled from the Interview Questions you answer each week. This is a win-win for you all the way around! Practice It Go to Medium.com Sign-up for a free account Bookmark the site into your bookmarks bar At the end of each class there is a set of Interview Questions for you to answer in your blog. Use the time in class to discuss the questions with your instructor but then take them home and research for yourself so you can answer them in your blog. Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! When publishing your blogs, make sure you \"@LubbockCodingAcademy\", \"@AustinCodingAcademy\", and tag \"Coding\", and \"Web Development\" in your story. This way we can find your blogs easily and feature them if they stand out. This, of course, is also how you build-up your web presence! Additional Resources YT, Kinnetik Kommunications - Starting a Blog on Medium Be sure to have your account up and ready to start blogging on your first night of class!!","title":"Blogging Habit"},{"location":"preCourse/whyBlogging/#blogging-on-medium","text":"Many benefits spring from starting your own blog! To enumerate a few: establishing and building-up your online presence reflecting on your own learning and engraining the value sharing and connecting with others contributing your lessons to the community expressing yourself and recording your thoughts in a place you can easily return or share with others (i.e. potential employers) In class, we will use your blog for all of these reasons. Your blog will allow you to record your thoughts and lessons, share them with your instructor, and prepare for the rigors of developer interviews to come .","title":"Blogging on Medium"},{"location":"preCourse/whyBlogging/#read-it","text":"Progressing through the material and challenges set forth in this web-based textbook will certainly teach you new skills and establish a great baseline of knowledge. However, in our limited time together we cannot cover all of the material that may come up in an interview. To ensure you are constantly improving upon your skills and knowledge base as a whole, at the end of each lesson there will be a set of questions entitled: Interview Questions . The purpose of these questions is to provide you with questions pertaining to deeper topics that might not have been covered while learning the hard-skills of coding and programming or the soft-skills of presenting. If you don't know the answers to these questions...PERFECT! This is your chance to learn them! You are expected and will be graded each week on your blog post that answers these questions. Use google. Search for the terms in the questions and read as much as you can find. Once you understand the terms and ideas, synthesize the answers to the questions in your weekly blog. The practice of blogging every week will do countless things for you. Simply covering new material, pushing your upper-limits and converting your new ideas into words will cultivate your ability to speak about them, which will prepare you to speak about code in interviews. It will slowly yet rapidly build your knowledge of different challenges and solutions-based approaches and record them in a place for you to return to when you are preparing for interviews as a study guide...in your own words!! The final reason you should be happy to be writing a weekly blog is that in order for you to move on to the next course you will need to pass the Exit Test of this course. The questions to this test are pulled from the Interview Questions you answer each week. This is a win-win for you all the way around!","title":"Read It"},{"location":"preCourse/whyBlogging/#practice-it","text":"Go to Medium.com Sign-up for a free account Bookmark the site into your bookmarks bar At the end of each class there is a set of Interview Questions for you to answer in your blog. Use the time in class to discuss the questions with your instructor but then take them home and research for yourself so you can answer them in your blog. Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! When publishing your blogs, make sure you \"@LubbockCodingAcademy\", \"@AustinCodingAcademy\", and tag \"Coding\", and \"Web Development\" in your story. This way we can find your blogs easily and feature them if they stand out. This, of course, is also how you build-up your web presence!","title":"Practice It"},{"location":"preCourse/whyBlogging/#additional-resources","text":"YT, Kinnetik Kommunications - Starting a Blog on Medium Be sure to have your account up and ready to start blogging on your first night of class!!","title":"Additional Resources"}]}